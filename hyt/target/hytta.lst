
/Users/luca/Projects/hytta/target/hytta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d78  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  080a4d90  080a4d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  080a4d98  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000090  20000300  080a4d9c  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000008e0  20000390  20000390  00040390  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a4e2c  080a4e2c  00034e2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a4e54  080a4e54  00034e54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d5811  00000000  00000000  00034e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013640  00000000  00000000  0010a669  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000173ce  00000000  00000000  0011dca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025a8  00000000  00000000  00135077  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003df0  00000000  00000000  0013761f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029f70  00000000  00000000  0013b40f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b713  00000000  00000000  0016537f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a1a7e  00000000  00000000  00190a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c97c  00000000  00000000  00232510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	dc 43 0a 08                                         .C..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 f8c9 	bl	80a41c4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 f8ce 	bl	80a41da <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a4d9c 	.word	0x080a4d9c
 80a004c:	20000390 	.word	0x20000390
 80a0050:	20000390 	.word	0x20000390
 80a0054:	20000c70 	.word	0x20000c70
 80a0058:	20000c70 	.word	0x20000c70

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fe65 	bl	80a2d2c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a4d4c 	.word	0x080a4d4c
 80a0084:	080a4d8c 	.word	0x080a4d8c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bba4 	b.w	80a07d4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fe0b 	bl	80a0ca8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 be0b 	b.w	80a2cb0 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bb47 	b.w	80a172c <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bb4d 	b.w	80a173c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.9.constprop.13>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80a00b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a00b4:	4605      	mov	r5, r0
 80a00b6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a00ba:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00bc:	f88d 3000 	strb.w	r3, [sp]
 80a00c0:	233c      	movs	r3, #60	; 0x3c
 80a00c2:	f001 fcb7 	bl	80a1a34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
 80a00c6:	4628      	mov	r0, r5
 80a00c8:	b003      	add	sp, #12
 80a00ca:	bd30      	pop	{r4, r5, pc}

080a00cc <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 80a00cc:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a00ce:	f001 f95f 	bl	80a1390 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00d2:	4b03      	ldr	r3, [pc, #12]	; (80a00e0 <_ZN10CloudClass7processEv+0x14>)
 80a00d4:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80a00d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a00da:	f001 bb07 	b.w	80a16ec <spark_process>
 80a00de:	bf00      	nop
 80a00e0:	20000b7c 	.word	0x20000b7c

080a00e4 <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a00e4:	6803      	ldr	r3, [r0, #0]
 80a00e6:	b12b      	cbz	r3, 80a00f4 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
 80a00e8:	6842      	ldr	r2, [r0, #4]
 80a00ea:	4293      	cmp	r3, r2
 80a00ec:	d202      	bcs.n	80a00f4 <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
 80a00ee:	4618      	mov	r0, r3
 80a00f0:	f004 b852 	b.w	80a4198 <atoi>
 80a00f4:	2000      	movs	r0, #0
 80a00f6:	4770      	bx	lr

080a00f8 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
 80a00f8:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a00fa:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
 80a00fc:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a00fe:	b145      	cbz	r5, 80a0112 <_ZN10BlynkParam8iteratorppEv+0x1a>
 80a0100:	6843      	ldr	r3, [r0, #4]
 80a0102:	429d      	cmp	r5, r3
 80a0104:	d205      	bcs.n	80a0112 <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
 80a0106:	4628      	mov	r0, r5
 80a0108:	f004 f8bd 	bl	80a4286 <strlen>
 80a010c:	3001      	adds	r0, #1
 80a010e:	4405      	add	r5, r0
 80a0110:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
 80a0112:	4620      	mov	r0, r4
 80a0114:	bd38      	pop	{r3, r4, r5, pc}

080a0116 <_ZN10BlynkParam3addEPKvj>:
    return iterator::invalid();
}

inline
void BlynkParam::add(const void* b, size_t l)
{
 80a0116:	b570      	push	{r4, r5, r6, lr}
    if (len + l > buff_size)
 80a0118:	6843      	ldr	r3, [r0, #4]
    return iterator::invalid();
}

inline
void BlynkParam::add(const void* b, size_t l)
{
 80a011a:	4604      	mov	r4, r0
    if (len + l > buff_size)
 80a011c:	6880      	ldr	r0, [r0, #8]
 80a011e:	189e      	adds	r6, r3, r2
 80a0120:	4286      	cmp	r6, r0
    return iterator::invalid();
}

inline
void BlynkParam::add(const void* b, size_t l)
{
 80a0122:	4615      	mov	r5, r2
    if (len + l > buff_size)
 80a0124:	d806      	bhi.n	80a0134 <_ZN10BlynkParam3addEPKvj+0x1e>
        return;
    memcpy(buff+len, b, l);
 80a0126:	6820      	ldr	r0, [r4, #0]
 80a0128:	4418      	add	r0, r3
 80a012a:	f004 f84b 	bl	80a41c4 <memcpy>
    len += l;
 80a012e:	6863      	ldr	r3, [r4, #4]
 80a0130:	441d      	add	r5, r3
 80a0132:	6065      	str	r5, [r4, #4]
 80a0134:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0138 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
 80a0138:	b570      	push	{r4, r5, r6, lr}
 80a013a:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
 80a013c:	6840      	ldr	r0, [r0, #4]
 80a013e:	68a6      	ldr	r6, [r4, #8]
 80a0140:	6825      	ldr	r5, [r4, #0]
 80a0142:	460b      	mov	r3, r1
 80a0144:	4a04      	ldr	r2, [pc, #16]	; (80a0158 <_ZN10BlynkParam3addEi+0x20>)
 80a0146:	1a31      	subs	r1, r6, r0
 80a0148:	4428      	add	r0, r5
 80a014a:	f001 fb07 	bl	80a175c <snprintf>
 80a014e:	6863      	ldr	r3, [r4, #4]
 80a0150:	3001      	adds	r0, #1
 80a0152:	4418      	add	r0, r3
 80a0154:	6060      	str	r0, [r4, #4]
 80a0156:	bd70      	pop	{r4, r5, r6, pc}
 80a0158:	080a444a 	.word	0x080a444a

080a015c <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
 80a015c:	b570      	push	{r4, r5, r6, lr}
 80a015e:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
 80a0160:	6840      	ldr	r0, [r0, #4]
 80a0162:	68a6      	ldr	r6, [r4, #8]
 80a0164:	6825      	ldr	r5, [r4, #0]
 80a0166:	460b      	mov	r3, r1
 80a0168:	4a04      	ldr	r2, [pc, #16]	; (80a017c <_ZN10BlynkParam3addEl+0x20>)
 80a016a:	1a31      	subs	r1, r6, r0
 80a016c:	4428      	add	r0, r5
 80a016e:	f001 faf5 	bl	80a175c <snprintf>
 80a0172:	6863      	ldr	r3, [r4, #4]
 80a0174:	3001      	adds	r0, #1
 80a0176:	4418      	add	r0, r3
 80a0178:	6060      	str	r0, [r4, #4]
 80a017a:	bd70      	pop	{r4, r5, r6, pc}
 80a017c:	080a444d 	.word	0x080a444d

080a0180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0180:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0182:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0184:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0186:	b17c      	cbz	r4, 80a01a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0188:	6863      	ldr	r3, [r4, #4]
 80a018a:	3b01      	subs	r3, #1
 80a018c:	6063      	str	r3, [r4, #4]
 80a018e:	b95b      	cbnz	r3, 80a01a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0190:	6823      	ldr	r3, [r4, #0]
 80a0192:	4620      	mov	r0, r4
 80a0194:	689b      	ldr	r3, [r3, #8]
 80a0196:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0198:	68a3      	ldr	r3, [r4, #8]
 80a019a:	3b01      	subs	r3, #1
 80a019c:	60a3      	str	r3, [r4, #8]
 80a019e:	b91b      	cbnz	r3, 80a01a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a01a0:	6823      	ldr	r3, [r4, #0]
 80a01a2:	4620      	mov	r0, r4
 80a01a4:	68db      	ldr	r3, [r3, #12]
 80a01a6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a01a8:	4628      	mov	r0, r5
 80a01aa:	bd38      	pop	{r3, r4, r5, pc}

080a01ac <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
 80a01ac:	b510      	push	{r4, lr}
 80a01ae:	4604      	mov	r4, r0
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a01b0:	4b03      	ldr	r3, [pc, #12]	; (80a01c0 <_ZN22BlynkTransportParticleD1Ev+0x14>)
 80a01b2:	f840 3b18 	str.w	r3, [r0], #24
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a01b6:	f7ff ffe3 	bl	80a0180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a01ba:	4620      	mov	r0, r4
 80a01bc:	bd10      	pop	{r4, pc}
 80a01be:	bf00      	nop
 80a01c0:	080a4aec 	.word	0x080a4aec

080a01c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
 80a01c4:	b508      	push	{r3, lr}
        state = CONNECTING;
 80a01c6:	2300      	movs	r3, #0
 80a01c8:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a01ca:	6800      	ldr	r0, [r0, #0]
 80a01cc:	f002 fa8c 	bl	80a26e8 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
 80a01d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
 80a01d4:	f000 bfd2 	b.w	80a117c <BlynkNoOpCbk>

080a01d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a01d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
 80a01dc:	188e      	adds	r6, r1, r2
 80a01de:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
 80a01e0:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a01e2:	4680      	mov	r8, r0
 80a01e4:	460d      	mov	r5, r1
 80a01e6:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a01e8:	9105      	str	r1, [sp, #20]
 80a01ea:	9606      	str	r6, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
 80a01ec:	f080 80ee 	bcs.w	80a03cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
 80a01f0:	880b      	ldrh	r3, [r1, #0]
    if (++it >= param.end())
 80a01f2:	a805      	add	r0, sp, #20
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
 80a01f4:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
 80a01f8:	f7ff ff7e 	bl	80a00f8 <_ZN10BlynkParam8iteratorppEv>
 80a01fc:	6803      	ldr	r3, [r0, #0]
 80a01fe:	429e      	cmp	r6, r3
 80a0200:	f240 80e4 	bls.w	80a03cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0204:	a805      	add	r0, sp, #20
 80a0206:	f7ff ff6d 	bl	80a00e4 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
 80a020a:	f247 2276 	movw	r2, #29302	; 0x7276
 80a020e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0212:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
 80a0214:	4293      	cmp	r3, r2
 80a0216:	f000 80a0 	beq.w	80a035a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x182>
 80a021a:	d80d      	bhi.n	80a0238 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
 80a021c:	f247 2261 	movw	r2, #29281	; 0x7261
 80a0220:	4293      	cmp	r3, r2
 80a0222:	d065      	beq.n	80a02f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
 80a0224:	f247 2264 	movw	r2, #29284	; 0x7264
 80a0228:	4293      	cmp	r3, r2
 80a022a:	d039      	beq.n	80a02a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc8>
 80a022c:	f646 5270 	movw	r2, #28016	; 0x6d70
 80a0230:	4293      	cmp	r3, r2
 80a0232:	f040 80bd 	bne.w	80a03b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d8>
 80a0236:	e02f      	b.n	80a0298 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
 80a0238:	f247 7264 	movw	r2, #30564	; 0x7764
 80a023c:	4293      	cmp	r3, r2
 80a023e:	d042      	beq.n	80a02c6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xee>
 80a0240:	f247 7276 	movw	r2, #30582	; 0x7776
 80a0244:	4293      	cmp	r3, r2
 80a0246:	f000 8099 	beq.w	80a037c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a4>
 80a024a:	f247 7261 	movw	r2, #30561	; 0x7761
 80a024e:	4293      	cmp	r3, r2
 80a0250:	f040 80ae 	bne.w	80a03b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d8>
 80a0254:	e06e      	b.n	80a0334 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x15c>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            pin = BLYNK_DECODE_PIN(it);
 80a0256:	a805      	add	r0, sp, #20
 80a0258:	f7ff ff44 	bl	80a00e4 <_ZNK10BlynkParam8iterator5asIntEv>
 80a025c:	b2c5      	uxtb	r5, r0
            ++it;
 80a025e:	a805      	add	r0, sp, #20
 80a0260:	f7ff ff4a 	bl	80a00f8 <_ZN10BlynkParam8iteratorppEv>
 80a0264:	9c05      	ldr	r4, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
 80a0266:	495b      	ldr	r1, [pc, #364]	; (80a03d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>)
 80a0268:	4620      	mov	r0, r4
 80a026a:	f003 ffe7 	bl	80a423c <strcmp>
 80a026e:	4601      	mov	r1, r0
 80a0270:	2800      	cmp	r0, #0
 80a0272:	f000 80a7 	beq.w	80a03c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
 80a0276:	4958      	ldr	r1, [pc, #352]	; (80a03d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>)
 80a0278:	4620      	mov	r0, r4
 80a027a:	f003 ffdf 	bl	80a423c <strcmp>
 80a027e:	2800      	cmp	r0, #0
 80a0280:	f000 809f 	beq.w	80a03c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ea>
 80a0284:	4955      	ldr	r1, [pc, #340]	; (80a03dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x204>)
 80a0286:	4620      	mov	r0, r4
 80a0288:	f003 ffd8 	bl	80a423c <strcmp>
 80a028c:	2800      	cmp	r0, #0
 80a028e:	f000 8098 	beq.w	80a03c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ea>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
 80a0292:	a805      	add	r0, sp, #20
 80a0294:	f7ff ff30 	bl	80a00f8 <_ZN10BlynkParam8iteratorppEv>
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
 80a0298:	9b05      	ldr	r3, [sp, #20]
 80a029a:	429e      	cmp	r6, r3
 80a029c:	d8db      	bhi.n	80a0256 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x7e>
 80a029e:	e095      	b.n	80a03cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a02a0:	ab0a      	add	r3, sp, #40	; 0x28
 80a02a2:	9307      	str	r3, [sp, #28]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a02a4:	2203      	movs	r2, #3
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a02a6:	2310      	movs	r3, #16
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a02a8:	a807      	add	r0, sp, #28
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a02aa:	2500      	movs	r5, #0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a02ac:	494c      	ldr	r1, [pc, #304]	; (80a03e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x208>)
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a02ae:	9309      	str	r3, [sp, #36]	; 0x24
 80a02b0:	9508      	str	r5, [sp, #32]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a02b2:	f7ff ff30 	bl	80a0116 <_ZN10BlynkParam3addEPKvj>
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
        rsp.add(pin);
 80a02b6:	a807      	add	r0, sp, #28
 80a02b8:	4621      	mov	r1, r4
 80a02ba:	f7ff ff3d 	bl	80a0138 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
 80a02be:	4620      	mov	r0, r4
 80a02c0:	f002 fdae 	bl	80a2e20 <digitalRead>
 80a02c4:	e026      	b.n	80a0314 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13c>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
 80a02c6:	a805      	add	r0, sp, #20
 80a02c8:	f7ff ff16 	bl	80a00f8 <_ZN10BlynkParam8iteratorppEv>
 80a02cc:	6803      	ldr	r3, [r0, #0]
 80a02ce:	429e      	cmp	r6, r3
 80a02d0:	d97c      	bls.n	80a03cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
 80a02d2:	b2a4      	uxth	r4, r4
 80a02d4:	2101      	movs	r1, #1
 80a02d6:	4620      	mov	r0, r4
 80a02d8:	f002 fd78 	bl	80a2dcc <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
 80a02dc:	a805      	add	r0, sp, #20
 80a02de:	f7ff ff01 	bl	80a00e4 <_ZNK10BlynkParam8iterator5asIntEv>
 80a02e2:	1c01      	adds	r1, r0, #0
 80a02e4:	bf18      	it	ne
 80a02e6:	2101      	movne	r1, #1
 80a02e8:	4620      	mov	r0, r4
 80a02ea:	f002 fd80 	bl	80a2dee <digitalWrite>
    } break;
 80a02ee:	e06d      	b.n	80a03cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a02f0:	ab0a      	add	r3, sp, #40	; 0x28
 80a02f2:	9307      	str	r3, [sp, #28]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a02f4:	2203      	movs	r2, #3
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a02f6:	2310      	movs	r3, #16
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a02f8:	493a      	ldr	r1, [pc, #232]	; (80a03e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>)
 80a02fa:	a807      	add	r0, sp, #28
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a02fc:	2500      	movs	r5, #0
 80a02fe:	9309      	str	r3, [sp, #36]	; 0x24
 80a0300:	9508      	str	r5, [sp, #32]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a0302:	f7ff ff08 	bl	80a0116 <_ZN10BlynkParam3addEPKvj>
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
        rsp.add(pin);
 80a0306:	a807      	add	r0, sp, #28
 80a0308:	4621      	mov	r1, r4
 80a030a:	f7ff ff15 	bl	80a0138 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
 80a030e:	4620      	mov	r0, r4
 80a0310:	f002 fd99 	bl	80a2e46 <analogRead>
 80a0314:	4601      	mov	r1, r0
 80a0316:	a807      	add	r0, sp, #28
 80a0318:	f7ff ff20 	bl	80a015c <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
 80a031c:	462a      	mov	r2, r5
 80a031e:	9b08      	ldr	r3, [sp, #32]
 80a0320:	9502      	str	r5, [sp, #8]
 80a0322:	3b01      	subs	r3, #1
 80a0324:	9300      	str	r3, [sp, #0]
 80a0326:	9b07      	ldr	r3, [sp, #28]
 80a0328:	9501      	str	r5, [sp, #4]
 80a032a:	2114      	movs	r1, #20
 80a032c:	4640      	mov	r0, r8
 80a032e:	f000 faa1 	bl	80a0874 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
 80a0332:	e04b      	b.n	80a03cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
 80a0334:	a805      	add	r0, sp, #20
 80a0336:	f7ff fedf 	bl	80a00f8 <_ZN10BlynkParam8iteratorppEv>
 80a033a:	6803      	ldr	r3, [r0, #0]
 80a033c:	429e      	cmp	r6, r3
 80a033e:	d945      	bls.n	80a03cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
 80a0340:	b2a4      	uxth	r4, r4
 80a0342:	2101      	movs	r1, #1
 80a0344:	4620      	mov	r0, r4
 80a0346:	f002 fd41 	bl	80a2dcc <pinMode>
#endif
        analogWrite(pin, it.asInt());
 80a034a:	a805      	add	r0, sp, #20
 80a034c:	f7ff feca 	bl	80a00e4 <_ZNK10BlynkParam8iterator5asIntEv>
 80a0350:	4601      	mov	r1, r0
 80a0352:	4620      	mov	r0, r4
 80a0354:	f002 fd8e 	bl	80a2e74 <_Z11analogWritetm>
    } break;
 80a0358:	e038      	b.n	80a03cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
 80a035a:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
 80a035c:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
 80a035e:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
 80a0362:	f000 ff0d 	bl	80a1180 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
 80a0366:	4603      	mov	r3, r0
            handler(req);
 80a0368:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
 80a036a:	b123      	cbz	r3, 80a0376 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19e>
 80a036c:	4a1e      	ldr	r2, [pc, #120]	; (80a03e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x210>)
 80a036e:	4293      	cmp	r3, r2
 80a0370:	d001      	beq.n	80a0376 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19e>
            handler(req);
 80a0372:	4798      	blx	r3
 80a0374:	e02a      	b.n	80a03cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        } else {
            BlynkWidgetReadDefault(req);
 80a0376:	f000 feff 	bl	80a1178 <BlynkWidgetRead>
        }
    } break;
 80a037a:	e027      	b.n	80a03cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
    case BLYNK_HW_VW: {
        ++it;
 80a037c:	a805      	add	r0, sp, #20
 80a037e:	f7ff febb 	bl	80a00f8 <_ZN10BlynkParam8iteratorppEv>
 80a0382:	9b05      	ldr	r3, [sp, #20]
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a0384:	4620      	mov	r0, r4
        }
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
 80a0386:	1b5d      	subs	r5, r3, r5
 80a0388:	1b7d      	subs	r5, r7, r5
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
 80a038a:	930a      	str	r3, [sp, #40]	; 0x28
 80a038c:	950b      	str	r5, [sp, #44]	; 0x2c
 80a038e:	950c      	str	r5, [sp, #48]	; 0x30
        BlynkReq req = { pin };
 80a0390:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a0394:	f000 fefe 	bl	80a1194 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
 80a0398:	4603      	mov	r3, r0
            handler(req, param2);
 80a039a:	a90a      	add	r1, sp, #40	; 0x28
 80a039c:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
 80a039e:	b123      	cbz	r3, 80a03aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d2>
 80a03a0:	4a12      	ldr	r2, [pc, #72]	; (80a03ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x214>)
 80a03a2:	4293      	cmp	r3, r2
 80a03a4:	d001      	beq.n	80a03aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d2>
            handler(req, param2);
 80a03a6:	4798      	blx	r3
 80a03a8:	e010      	b.n	80a03cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        } else {
            BlynkWidgetWriteDefault(req, param2);
 80a03aa:	f000 fee6 	bl	80a117a <BlynkWidgetWrite>
        }
    } break;
 80a03ae:	e00d      	b.n	80a03cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
 80a03b0:	2300      	movs	r3, #0
 80a03b2:	2102      	movs	r1, #2
 80a03b4:	9100      	str	r1, [sp, #0]
 80a03b6:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 80a03ba:	9302      	str	r3, [sp, #8]
 80a03bc:	9301      	str	r3, [sp, #4]
 80a03be:	4619      	mov	r1, r3
 80a03c0:	e7b4      	b.n	80a032c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
            pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
 80a03c2:	2101      	movs	r1, #1
 80a03c4:	4628      	mov	r0, r5
 80a03c6:	f002 fd01 	bl	80a2dcc <pinMode>
 80a03ca:	e762      	b.n	80a0292 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
 80a03cc:	b00e      	add	sp, #56	; 0x38
 80a03ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a03d2:	bf00      	nop
 80a03d4:	080a4451 	.word	0x080a4451
 80a03d8:	080a4454 	.word	0x080a4454
 80a03dc:	080a4458 	.word	0x080a4458
 80a03e0:	080a445c 	.word	0x080a445c
 80a03e4:	080a445f 	.word	0x080a445f
 80a03e8:	080a1179 	.word	0x080a1179
 80a03ec:	080a117b 	.word	0x080a117b

080a03f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
 80a03f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a03f4:	b08e      	sub	sp, #56	; 0x38
 80a03f6:	af04      	add	r7, sp, #16
 80a03f8:	4605      	mov	r5, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
 80a03fa:	2205      	movs	r2, #5
 80a03fc:	f107 010c 	add.w	r1, r7, #12
 80a0400:	6800      	ldr	r0, [r0, #0]
 80a0402:	f001 ff1d 	bl	80a2240 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
 80a0406:	2800      	cmp	r0, #0
 80a0408:	f000 8119 	beq.w	80a063e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
 80a040c:	2805      	cmp	r0, #5
 80a040e:	d001      	beq.n	80a0414 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
 80a0410:	2000      	movs	r0, #0
 80a0412:	e119      	b.n	80a0648 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a0414:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
 80a0418:	f8b7 400f 	ldrh.w	r4, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a041c:	0a13      	lsrs	r3, r2, #8
 80a041e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
 80a0422:	0a23      	lsrs	r3, r4, #8
 80a0424:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a0428:	b292      	uxth	r2, r2
    hdr.length = ntohs(hdr.length);
 80a042a:	b2a4      	uxth	r4, r4
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a042c:	f8a7 200d 	strh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
 80a0430:	f8a7 400f 	strh.w	r4, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
 80a0434:	2a00      	cmp	r2, #0
 80a0436:	d0eb      	beq.n	80a0410 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
 80a0438:	7b3b      	ldrb	r3, [r7, #12]
 80a043a:	b9f3      	cbnz	r3, 80a047a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
        lastActivityIn = BlynkMillis();
 80a043c:	f000 fe98 	bl	80a1170 <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a0440:	7f6b      	ldrb	r3, [r5, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
 80a0442:	60e8      	str	r0, [r5, #12]
 80a0444:	f8b7 200f 	ldrh.w	r2, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a0448:	b99b      	cbnz	r3, 80a0472 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
 80a044a:	f8b7 100d 	ldrh.w	r1, [r7, #13]
 80a044e:	2901      	cmp	r1, #1
 80a0450:	d10f      	bne.n	80a0472 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
            switch (hdr.length) {
 80a0452:	2a04      	cmp	r2, #4
 80a0454:	d001      	beq.n	80a045a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
 80a0456:	2ac8      	cmp	r2, #200	; 0xc8
 80a0458:	d1da      	bne.n	80a0410 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
                state = CONNECTED;
 80a045a:	2401      	movs	r4, #1
        if (state == CONNECTING && (1 == hdr.msg_id)) {
            switch (hdr.length) {
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
 80a045c:	6168      	str	r0, [r5, #20]
                state = CONNECTED;
 80a045e:	776c      	strb	r4, [r5, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
                }
#endif
                this->sendInfo();
 80a0460:	4628      	mov	r0, r5
 80a0462:	f000 fabf 	bl	80a09e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
 80a0466:	f7ff fe31 	bl	80a00cc <_ZN10CloudClass7processEv>
                BlynkOnConnected();
 80a046a:	f000 fe87 	bl	80a117c <BlynkNoOpCbk>
                return true;
 80a046e:	4620      	mov	r0, r4
 80a0470:	e0ea      	b.n	80a0648 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
 80a0472:	1f50      	subs	r0, r2, #5
 80a0474:	bf18      	it	ne
 80a0476:	2001      	movne	r0, #1
 80a0478:	e0e6      	b.n	80a0648 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
 80a047a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80a047e:	d903      	bls.n	80a0488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
        // TODO: Flush
        internalReconnect();
 80a0480:	4628      	mov	r0, r5
 80a0482:	f7ff fe9f 	bl	80a01c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a0486:	e0da      	b.n	80a063e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
 80a0488:	f104 0308 	add.w	r3, r4, #8
 80a048c:	f023 0307 	bic.w	r3, r3, #7
 80a0490:	46e8      	mov	r8, sp
 80a0492:	ebad 0d03 	sub.w	sp, sp, r3
 80a0496:	ae04      	add	r6, sp, #16
 80a0498:	4622      	mov	r2, r4
 80a049a:	4631      	mov	r1, r6
 80a049c:	6828      	ldr	r0, [r5, #0]
 80a049e:	f001 fecf 	bl	80a2240 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
 80a04a2:	4284      	cmp	r4, r0
 80a04a4:	f04f 0400 	mov.w	r4, #0
 80a04a8:	f040 80c4 	bne.w	80a0634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x244>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
 80a04ac:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80a04b0:	54f4      	strb	r4, [r6, r3]

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
 80a04b2:	f000 fe5d 	bl	80a1170 <_Z11BlynkMillisv>

    switch (hdr.type)
 80a04b6:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
 80a04b8:	60e8      	str	r0, [r5, #12]

    switch (hdr.type)
 80a04ba:	2b11      	cmp	r3, #17
 80a04bc:	d072      	beq.n	80a05a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
 80a04be:	d806      	bhi.n	80a04ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xde>
 80a04c0:	2b06      	cmp	r3, #6
 80a04c2:	d020      	beq.n	80a0506 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x116>
 80a04c4:	2b0f      	cmp	r3, #15
 80a04c6:	d060      	beq.n	80a058a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
 80a04c8:	2b02      	cmp	r3, #2
 80a04ca:	d009      	beq.n	80a04e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf0>
 80a04cc:	e0ae      	b.n	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
 80a04ce:	2b29      	cmp	r3, #41	; 0x29
 80a04d0:	d025      	beq.n	80a051e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
 80a04d2:	2b37      	cmp	r3, #55	; 0x37
 80a04d4:	f000 80b0 	beq.w	80a0638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
 80a04d8:	2b14      	cmp	r3, #20
 80a04da:	f040 80a7 	bne.w	80a062c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
 80a04de:	e054      	b.n	80a058a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
 80a04e0:	7f6b      	ldrb	r3, [r5, #29]
 80a04e2:	b943      	cbnz	r3, 80a04f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x106>
            BLYNK_LOG1(BLYNK_F("Ready"));
            state = CONNECTED;
 80a04e4:	2301      	movs	r3, #1
 80a04e6:	776b      	strb	r3, [r5, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
            }
#endif
            this->sendInfo();
 80a04e8:	4628      	mov	r0, r5
 80a04ea:	f000 fa7b 	bl	80a09e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
 80a04ee:	f7ff fded 	bl	80a00cc <_ZN10CloudClass7processEv>
            BlynkOnConnected();
 80a04f2:	f000 fe43 	bl	80a117c <BlynkNoOpCbk>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
 80a04f6:	2300      	movs	r3, #0
 80a04f8:	21c8      	movs	r1, #200	; 0xc8
 80a04fa:	f8b7 200d 	ldrh.w	r2, [r7, #13]
 80a04fe:	9302      	str	r3, [sp, #8]
 80a0500:	9301      	str	r3, [sp, #4]
 80a0502:	9100      	str	r1, [sp, #0]
 80a0504:	e006      	b.n	80a0514 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x124>
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
 80a0506:	23c8      	movs	r3, #200	; 0xc8
 80a0508:	f8b7 200d 	ldrh.w	r2, [r7, #13]
 80a050c:	9300      	str	r3, [sp, #0]
 80a050e:	4623      	mov	r3, r4
 80a0510:	9402      	str	r4, [sp, #8]
 80a0512:	9401      	str	r4, [sp, #4]
 80a0514:	4619      	mov	r1, r3
 80a0516:	4628      	mov	r0, r5
 80a0518:	f000 f9ac 	bl	80a0874 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
 80a051c:	e08c      	b.n	80a0638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
 80a051e:	68ab      	ldr	r3, [r5, #8]
 80a0520:	b91b      	cbnz	r3, 80a052a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13a>
             redir_serv = (char*)malloc(32);
 80a0522:	2020      	movs	r0, #32
 80a0524:	f001 f902 	bl	80a172c <malloc>
 80a0528:	60a8      	str	r0, [r5, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
 80a052a:	f8b7 400f 	ldrh.w	r4, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a052e:	61fe      	str	r6, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
 80a0530:	4434      	add	r4, r6
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
 80a0532:	42a6      	cmp	r6, r4
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a0534:	623c      	str	r4, [r7, #32]
 80a0536:	d301      	bcc.n	80a053c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14c>
            return false;
 80a0538:	2000      	movs	r0, #0
 80a053a:	e07e      	b.n	80a063a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        strncpy(redir_serv, it.asStr(), 32);
 80a053c:	2220      	movs	r2, #32
 80a053e:	4631      	mov	r1, r6
 80a0540:	68a8      	ldr	r0, [r5, #8]
 80a0542:	f003 fea8 	bl	80a4296 <strncpy>
        if (++it < param.end())
 80a0546:	f107 001c 	add.w	r0, r7, #28
 80a054a:	f7ff fdd5 	bl	80a00f8 <_ZN10BlynkParam8iteratorppEv>
 80a054e:	6803      	ldr	r3, [r0, #0]
 80a0550:	42a3      	cmp	r3, r4
 80a0552:	d207      	bcs.n	80a0564 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a0554:	69f8      	ldr	r0, [r7, #28]
 80a0556:	b118      	cbz	r0, 80a0560 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
 80a0558:	6a3b      	ldr	r3, [r7, #32]
 80a055a:	4298      	cmp	r0, r3
 80a055c:	d371      	bcc.n	80a0642 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x252>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
 80a055e:	2000      	movs	r0, #0
            redir_port = it.asLong();
 80a0560:	b284      	uxth	r4, r0
 80a0562:	e000      	b.n	80a0566 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x176>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
 80a0564:	2450      	movs	r4, #80	; 0x50
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a0566:	6828      	ldr	r0, [r5, #0]
 80a0568:	f002 f8be 	bl	80a26e8 <_ZN9TCPClient4stopEv>
        strncpy(redir_serv, it.asStr(), 32);
        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
 80a056c:	682b      	ldr	r3, [r5, #0]
 80a056e:	68aa      	ldr	r2, [r5, #8]
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
 80a0570:	871c      	strh	r4, [r3, #56]	; 0x38
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
 80a0572:	635a      	str	r2, [r3, #52]	; 0x34
        state = CONNECTING;
 80a0574:	2300      	movs	r3, #0
 80a0576:	776b      	strb	r3, [r5, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a0578:	f000 fdfa 	bl	80a1170 <_Z11BlynkMillisv>
 80a057c:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a0580:	3808      	subs	r0, #8
 80a0582:	6128      	str	r0, [r5, #16]
 80a0584:	60e8      	str	r0, [r5, #12]
 80a0586:	6168      	str	r0, [r5, #20]
 80a0588:	e056      	b.n	80a0638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
 80a058a:	68fb      	ldr	r3, [r7, #12]
        this->processCmd(inputBuffer, hdr.length);
 80a058c:	f8b7 200f 	ldrh.w	r2, [r7, #15]
        state = CONNECTING;
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
 80a0590:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80a0594:	836b      	strh	r3, [r5, #26]
        this->processCmd(inputBuffer, hdr.length);
 80a0596:	4631      	mov	r1, r6
 80a0598:	4628      	mov	r0, r5
 80a059a:	f7ff fe1d 	bl	80a01d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
 80a059e:	2300      	movs	r3, #0
 80a05a0:	836b      	strh	r3, [r5, #26]
 80a05a2:	e049      	b.n	80a0638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
 80a05a4:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
 80a05a8:	713c      	strb	r4, [r7, #4]
 80a05aa:	4433      	add	r3, r6
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
 80a05ac:	429e      	cmp	r6, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a05ae:	617e      	str	r6, [r7, #20]
 80a05b0:	61bb      	str	r3, [r7, #24]
 80a05b2:	d241      	bcs.n	80a0638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
 80a05b4:	6830      	ldr	r0, [r6, #0]
 80a05b6:	60b8      	str	r0, [r7, #8]

        ++it;
 80a05b8:	f107 0014 	add.w	r0, r7, #20
 80a05bc:	f7ff fd9c 	bl	80a00f8 <_ZN10BlynkParam8iteratorppEv>
 80a05c0:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
 80a05c2:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80a05c6:	1b96      	subs	r6, r2, r6
 80a05c8:	1b9e      	subs	r6, r3, r6
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
 80a05ca:	61fa      	str	r2, [r7, #28]
        BlynkParam param2(start, length);

        switch (cmd32) {
 80a05cc:	68bb      	ldr	r3, [r7, #8]
 80a05ce:	4a20      	ldr	r2, [pc, #128]	; (80a0650 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>)
 80a05d0:	623e      	str	r6, [r7, #32]
 80a05d2:	4293      	cmp	r3, r2
 80a05d4:	627e      	str	r6, [r7, #36]	; 0x24
 80a05d6:	d01d      	beq.n	80a0614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
 80a05d8:	d80b      	bhi.n	80a05f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x202>
 80a05da:	f102 32fd 	add.w	r2, r2, #4261281277	; 0xfdfdfdfd
 80a05de:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
 80a05e2:	4293      	cmp	r3, r2
 80a05e4:	d128      	bne.n	80a0638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
 80a05e6:	f107 011c 	add.w	r1, r7, #28
 80a05ea:	1d38      	adds	r0, r7, #4
 80a05ec:	f000 fdc5 	bl	80a117a <BlynkWidgetWrite>
 80a05f0:	e022      	b.n	80a0638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
 80a05f2:	4a18      	ldr	r2, [pc, #96]	; (80a0654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x264>)
 80a05f4:	4293      	cmp	r3, r2
 80a05f6:	d013      	beq.n	80a0620 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
 80a05f8:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
 80a05fc:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 80a0600:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80a0604:	4293      	cmp	r3, r2
 80a0606:	d117      	bne.n	80a0638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
 80a0608:	f107 011c 	add.w	r1, r7, #28
 80a060c:	1d38      	adds	r0, r7, #4
 80a060e:	f000 fdb4 	bl	80a117a <BlynkWidgetWrite>
 80a0612:	e011      	b.n	80a0638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
 80a0614:	f107 011c 	add.w	r1, r7, #28
 80a0618:	1d38      	adds	r0, r7, #4
 80a061a:	f000 fdae 	bl	80a117a <BlynkWidgetWrite>
 80a061e:	e00b      	b.n	80a0638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
 80a0620:	f107 011c 	add.w	r1, r7, #28
 80a0624:	1d38      	adds	r0, r7, #4
 80a0626:	f000 fda8 	bl	80a117a <BlynkWidgetWrite>
 80a062a:	e005      	b.n	80a0638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
#endif
        // TODO: Flush
        internalReconnect();
 80a062c:	4628      	mov	r0, r5
 80a062e:	f7ff fdc9 	bl	80a01c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a0632:	e001      	b.n	80a0638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
 80a0634:	4620      	mov	r0, r4
 80a0636:	e000      	b.n	80a063a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
 80a0638:	2001      	movs	r0, #1
 80a063a:	46c5      	mov	sp, r8
 80a063c:	e004      	b.n	80a0648 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
 80a063e:	2001      	movs	r0, #1
 80a0640:	e002      	b.n	80a0648 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
 80a0642:	f003 fdad 	bl	80a41a0 <atol>
 80a0646:	e78b      	b.n	80a0560 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
        internalReconnect();
    } break;
    }

    return true;
}
 80a0648:	3728      	adds	r7, #40	; 0x28
 80a064a:	46bd      	mov	sp, r7
 80a064c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0650:	00637472 	.word	0x00637472
 80a0654:	6e6f6361 	.word	0x6e6f6361

080a0658 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
 80a0658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a065c:	4604      	mov	r4, r0
 80a065e:	b08a      	sub	sp, #40	; 0x28
 80a0660:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
 80a0662:	f7ff fd33 	bl	80a00cc <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
 80a0666:	7f63      	ldrb	r3, [r4, #29]
 80a0668:	2b02      	cmp	r3, #2
 80a066a:	f000 809d 	beq.w	80a07a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x150>
      avg -= 1;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
 80a066e:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
 80a0670:	8b62      	ldrh	r2, [r4, #26]
 80a0672:	3301      	adds	r3, #1
 80a0674:	b2db      	uxtb	r3, r3
 80a0676:	7723      	strb	r3, [r4, #28]
 80a0678:	2a00      	cmp	r2, #0
 80a067a:	d141      	bne.n	80a0700 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
 80a067c:	2b02      	cmp	r3, #2
 80a067e:	d83f      	bhi.n	80a0700 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a0680:	6820      	ldr	r0, [r4, #0]
 80a0682:	f002 f935 	bl	80a28f0 <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
 80a0686:	b140      	cbz	r0, 80a069a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x42>
        while (avail || conn.available() > 0) {
 80a0688:	2d00      	cmp	r5, #0
 80a068a:	f040 808f 	bne.w	80a07ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
    int available() { return client.available(); }
 80a068e:	6820      	ldr	r0, [r4, #0]
 80a0690:	f001 ffec 	bl	80a266c <_ZN9TCPClient9availableEv>
 80a0694:	2800      	cmp	r0, #0
 80a0696:	f300 8089 	bgt.w	80a07ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
 80a069a:	f000 fd69 	bl	80a1170 <_Z11BlynkMillisv>
 80a069e:	4606      	mov	r6, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a06a0:	6820      	ldr	r0, [r4, #0]
 80a06a2:	f002 f925 	bl	80a28f0 <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
 80a06a6:	7f67      	ldrb	r7, [r4, #29]
 80a06a8:	4605      	mov	r5, r0
 80a06aa:	2f01      	cmp	r7, #1
 80a06ac:	d12a      	bne.n	80a0704 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xac>
        if (!tconn) {
 80a06ae:	b920      	cbnz	r0, 80a06ba <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            lastHeartbeat = t;
 80a06b0:	6166      	str	r6, [r4, #20]
            internalReconnect();
 80a06b2:	4620      	mov	r0, r4
 80a06b4:	f7ff fd86 	bl	80a01c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
 80a06b8:	e072      	b.n	80a07a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
 80a06ba:	f644 2238 	movw	r2, #19000	; 0x4a38
 80a06be:	68e3      	ldr	r3, [r4, #12]
 80a06c0:	1af3      	subs	r3, r6, r3
 80a06c2:	4293      	cmp	r3, r2
 80a06c4:	d904      	bls.n	80a06d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x78>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
 80a06c6:	4620      	mov	r0, r4
 80a06c8:	f7ff fd7c 	bl	80a01c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
 80a06cc:	2500      	movs	r5, #0
 80a06ce:	e067      	b.n	80a07a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
 80a06d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80a06d4:	4293      	cmp	r3, r2
 80a06d6:	d803      	bhi.n	80a06e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x88>
 80a06d8:	6923      	ldr	r3, [r4, #16]
 80a06da:	1af3      	subs	r3, r6, r3
 80a06dc:	4293      	cmp	r3, r2
 80a06de:	d90f      	bls.n	80a0700 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
 80a06e0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a06e4:	6963      	ldr	r3, [r4, #20]
 80a06e6:	1af3      	subs	r3, r6, r3
 80a06e8:	4293      	cmp	r3, r2
 80a06ea:	d909      	bls.n	80a0700 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
 80a06ec:	2300      	movs	r3, #0
 80a06ee:	9302      	str	r3, [sp, #8]
 80a06f0:	9301      	str	r3, [sp, #4]
 80a06f2:	9300      	str	r3, [sp, #0]
 80a06f4:	461a      	mov	r2, r3
 80a06f6:	2106      	movs	r1, #6
 80a06f8:	4620      	mov	r0, r4
 80a06fa:	f000 f8bb 	bl	80a0874 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
 80a06fe:	6166      	str	r6, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
 80a0700:	2501      	movs	r5, #1
 80a0702:	e04d      	b.n	80a07a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
 80a0704:	2f00      	cmp	r7, #0
 80a0706:	d1fb      	bne.n	80a0700 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
 80a0708:	6962      	ldr	r2, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
 80a070a:	b150      	cbz	r0, 80a0722 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
 80a070c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80a0710:	1ab6      	subs	r6, r6, r2
 80a0712:	429e      	cmp	r6, r3
 80a0714:	d9f4      	bls.n	80a0700 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a0716:	6820      	ldr	r0, [r4, #0]
 80a0718:	f001 ffe6 	bl	80a26e8 <_ZN9TCPClient4stopEv>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
            return false;
 80a071c:	463d      	mov	r5, r7
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
 80a071e:	7767      	strb	r7, [r4, #29]
            return false;
 80a0720:	e03e      	b.n	80a07a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
 80a0722:	f241 3388 	movw	r3, #5000	; 0x1388
 80a0726:	1ab2      	subs	r2, r6, r2
 80a0728:	429a      	cmp	r2, r3
 80a072a:	d9e9      	bls.n	80a0700 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
 80a072c:	6820      	ldr	r0, [r4, #0]
 80a072e:	f001 ffdb 	bl	80a26e8 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
 80a0732:	f8d4 e000 	ldr.w	lr, [r4]
        domain = d;
        port = p;
    }

    bool connect() {
        if (domain) {
 80a0736:	f8de c034 	ldr.w	ip, [lr, #52]	; 0x34
 80a073a:	f8be 8038 	ldrh.w	r8, [lr, #56]	; 0x38
 80a073e:	f1bc 0f00 	cmp.w	ip, #0
 80a0742:	d006      	beq.n	80a0752 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xfa>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
            return (1 == client.connect(domain, port));
 80a0744:	462b      	mov	r3, r5
 80a0746:	4642      	mov	r2, r8
 80a0748:	4661      	mov	r1, ip
 80a074a:	4670      	mov	r0, lr
 80a074c:	f001 feae 	bl	80a24ac <_ZN9TCPClient7connectEPKctm>
 80a0750:	e00e      	b.n	80a0770 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x118>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0752:	4b1f      	ldr	r3, [pc, #124]	; (80a07d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x178>)
 80a0754:	ad05      	add	r5, sp, #20
 80a0756:	f10e 0720 	add.w	r7, lr, #32
 80a075a:	9304      	str	r3, [sp, #16]
 80a075c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80a075e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0760:	683b      	ldr	r3, [r7, #0]
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            return (1 == client.connect(addr, port));
 80a0762:	4642      	mov	r2, r8
 80a0764:	702b      	strb	r3, [r5, #0]
 80a0766:	a904      	add	r1, sp, #16
 80a0768:	4663      	mov	r3, ip
 80a076a:	4670      	mov	r0, lr
 80a076c:	f002 f818 	bl	80a27a0 <_ZN9TCPClient7connectE9IPAddresstm>
 80a0770:	1e43      	subs	r3, r0, #1
 80a0772:	425d      	negs	r5, r3
 80a0774:	415d      	adcs	r5, r3
 80a0776:	b90d      	cbnz	r5, 80a077c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x124>
                lastLogin = t;
 80a0778:	6166      	str	r6, [r4, #20]
                return false;
 80a077a:	e011      	b.n	80a07a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
 80a077c:	6867      	ldr	r7, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
 80a077e:	2601      	movs	r6, #1
 80a0780:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
 80a0782:	4638      	mov	r0, r7
 80a0784:	f003 fd7f 	bl	80a4286 <strlen>
 80a0788:	2300      	movs	r3, #0
 80a078a:	e88d 0009 	stmia.w	sp, {r0, r3}
 80a078e:	9302      	str	r3, [sp, #8]
 80a0790:	4632      	mov	r2, r6
 80a0792:	463b      	mov	r3, r7
 80a0794:	2102      	movs	r1, #2
 80a0796:	4620      	mov	r0, r4
 80a0798:	f000 f86c 	bl	80a0874 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
 80a079c:	6923      	ldr	r3, [r4, #16]
 80a079e:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
 80a07a0:	7f23      	ldrb	r3, [r4, #28]
 80a07a2:	3b01      	subs	r3, #1
 80a07a4:	7723      	strb	r3, [r4, #28]
 80a07a6:	e00e      	b.n	80a07c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
 80a07a8:	2500      	movs	r5, #0
 80a07aa:	e00c      	b.n	80a07c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
 80a07ac:	4620      	mov	r0, r4
 80a07ae:	f7ff fe1f 	bl	80a03f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
 80a07b2:	4605      	mov	r5, r0
 80a07b4:	2800      	cmp	r0, #0
 80a07b6:	f47f af6a 	bne.w	80a068e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x36>
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a07ba:	6820      	ldr	r0, [r4, #0]
 80a07bc:	f001 ff94 	bl	80a26e8 <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
 80a07c0:	f000 fcdc 	bl	80a117c <BlynkNoOpCbk>
                return false;
 80a07c4:	e7ec      	b.n	80a07a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            return true;
        }
#endif
    }
    return true;
}
 80a07c6:	4628      	mov	r0, r5
 80a07c8:	b00a      	add	sp, #40	; 0x28
 80a07ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a07ce:	bf00      	nop
 80a07d0:	080a49c8 	.word	0x080a49c8

080a07d4 <setup>:
#define DHTTYPE DHT11
#define DHTPIN D4
PietteTech_DHT DHT(DHTPIN, DHTTYPE);

void setup()
{
 80a07d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Serial.begin(9600);
 80a07d6:	f002 f987 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a07da:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a07de:	f002 f969 	bl	80a2ab4 <_ZN9USBSerial5beginEl>
  delay(5000);
 80a07e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80a07e6:	f000 ffd1 	bl	80a178c <delay>
  // Read sensor once per minute
  timer.setInterval(60000L, readDHT);
 80a07ea:	4a1c      	ldr	r2, [pc, #112]	; (80a085c <setup+0x88>)
 80a07ec:	f64e 2160 	movw	r1, #60000	; 0xea60
 80a07f0:	481b      	ldr	r0, [pc, #108]	; (80a0860 <setup+0x8c>)
 80a07f2:	f000 fd36 	bl	80a1262 <_ZN10BlynkTimer11setIntervalEmPFvvE>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
 80a07f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
 80a07fa:	4c1a      	ldr	r4, [pc, #104]	; (80a0864 <setup+0x90>)
 80a07fc:	f000 fcb6 	bl	80a116c <_Z10BlynkDelaym>
 80a0800:	4b19      	ldr	r3, [pc, #100]	; (80a0868 <setup+0x94>)

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
 80a0802:	f242 3627 	movw	r6, #8999	; 0x2327
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
 80a0806:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a0808:	f000 fcb2 	bl	80a1170 <_Z11BlynkMillisv>
    void config(const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(domain, port);
 80a080c:	6823      	ldr	r3, [r4, #0]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
 80a080e:	4a17      	ldr	r2, [pc, #92]	; (80a086c <setup+0x98>)
 80a0810:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a0814:	3808      	subs	r0, #8
 80a0816:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
 80a0818:	2250      	movs	r2, #80	; 0x50
 80a081a:	6120      	str	r0, [r4, #16]
 80a081c:	60e0      	str	r0, [r4, #12]
 80a081e:	6160      	str	r0, [r4, #20]
 80a0820:	871a      	strh	r2, [r3, #56]	; 0x38

    bool connected() { return state == CONNECTED; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
 80a0822:	2500      	movs	r5, #0
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a0824:	6820      	ldr	r0, [r4, #0]
 80a0826:	f001 ff5f 	bl	80a26e8 <_ZN9TCPClient4stopEv>
 80a082a:	7765      	strb	r5, [r4, #29]
        millis_time_t started = BlynkMillis();
 80a082c:	f000 fca0 	bl	80a1170 <_Z11BlynkMillisv>
 80a0830:	4607      	mov	r7, r0
        while ((state != CONNECTED) &&
 80a0832:	7f63      	ldrb	r3, [r4, #29]
 80a0834:	2b01      	cmp	r3, #1
 80a0836:	d009      	beq.n	80a084c <setup+0x78>
               (BlynkMillis() - started < timeout))
 80a0838:	f000 fc9a 	bl	80a1170 <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
 80a083c:	1bc0      	subs	r0, r0, r7
 80a083e:	42b0      	cmp	r0, r6
 80a0840:	d804      	bhi.n	80a084c <setup+0x78>
               (BlynkMillis() - started < timeout))
        {
            run();
 80a0842:	2100      	movs	r1, #0
 80a0844:	4807      	ldr	r0, [pc, #28]	; (80a0864 <setup+0x90>)
 80a0846:	f7ff ff07 	bl	80a0658 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
 80a084a:	e7f2      	b.n	80a0832 <setup+0x5e>
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
 80a084c:	7f63      	ldrb	r3, [r4, #29]
 80a084e:	2b01      	cmp	r3, #1
 80a0850:	d1e8      	bne.n	80a0824 <setup+0x50>
  Blynk.begin(blynkAuth);
  DHT.begin();
 80a0852:	4807      	ldr	r0, [pc, #28]	; (80a0870 <setup+0x9c>)
}
 80a0854:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Serial.begin(9600);
  delay(5000);
  // Read sensor once per minute
  timer.setInterval(60000L, readDHT);
  Blynk.begin(blynkAuth);
  DHT.begin();
 80a0858:	f000 bb3f 	b.w	80a0eda <_ZN14PietteTech_DHT5beginEv>
 80a085c:	080a0a7d 	.word	0x080a0a7d
 80a0860:	200003f4 	.word	0x200003f4
 80a0864:	20000638 	.word	0x20000638
 80a0868:	20000300 	.word	0x20000300
 80a086c:	080a4462 	.word	0x080a4462
 80a0870:	20000394 	.word	0x20000394

080a0874 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
 80a0874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0878:	b083      	sub	sp, #12
 80a087a:	4604      	mov	r4, r0
 80a087c:	af00      	add	r7, sp, #0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a087e:	6800      	ldr	r0, [r0, #0]
 80a0880:	4689      	mov	r9, r1
 80a0882:	4616      	mov	r6, r2
 80a0884:	469b      	mov	fp, r3
 80a0886:	6b3d      	ldr	r5, [r7, #48]	; 0x30
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
 80a0888:	46ea      	mov	sl, sp
 80a088a:	f002 f831 	bl	80a28f0 <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
 80a088e:	2800      	cmp	r0, #0
 80a0890:	d061      	beq.n	80a0956 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe2>
 80a0892:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 80a0896:	f000 80a1 	beq.w	80a09dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x168>
 80a089a:	f1b9 0f06 	cmp.w	r9, #6
 80a089e:	f000 809d 	beq.w	80a09dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x168>
 80a08a2:	7f63      	ldrb	r3, [r4, #29]
 80a08a4:	2b01      	cmp	r3, #1
 80a08a6:	d156      	bne.n	80a0956 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe2>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
 80a08a8:	b916      	cbnz	r6, 80a08b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
 80a08aa:	8b66      	ldrh	r6, [r4, #26]
 80a08ac:	2e00      	cmp	r6, #0
 80a08ae:	d057      	beq.n	80a0960 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
 80a08b0:	f1a9 030c 	sub.w	r3, r9, #12
 80a08b4:	2b08      	cmp	r3, #8
 80a08b6:	d95b      	bls.n	80a0970 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xfc>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
 80a08b8:	f1bb 0f00 	cmp.w	fp, #0
 80a08bc:	bf18      	it	ne
 80a08be:	46a8      	movne	r8, r5
 80a08c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80a08c2:	bf08      	it	eq
 80a08c4:	f04f 0800 	moveq.w	r8, #0
 80a08c8:	2a00      	cmp	r2, #0
 80a08ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a08cc:	f108 0305 	add.w	r3, r8, #5
 80a08d0:	bf14      	ite	ne
 80a08d2:	4690      	movne	r8, r2
 80a08d4:	f04f 0800 	moveq.w	r8, #0
 80a08d8:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
 80a08da:	f108 0307 	add.w	r3, r8, #7
 80a08de:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
 80a08e2:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
 80a08e4:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
 80a08e8:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
 80a08ec:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
 80a08ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
 80a08f2:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
 80a08f6:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
 80a08fa:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
 80a08fe:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
 80a0902:	f1bb 0f00 	cmp.w	fp, #0
 80a0906:	d052      	beq.n	80a09ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
 80a0908:	2d00      	cmp	r5, #0
 80a090a:	d050      	beq.n	80a09ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
        memcpy(buff + pos, data, length);
 80a090c:	462a      	mov	r2, r5
 80a090e:	4659      	mov	r1, fp
 80a0910:	f10d 0005 	add.w	r0, sp, #5
 80a0914:	f003 fc56 	bl	80a41c4 <memcpy>
        pos += length;
 80a0918:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
 80a091a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a091c:	2b00      	cmp	r3, #0
 80a091e:	d148      	bne.n	80a09b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
 80a0920:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
 80a0922:	4545      	cmp	r5, r8
 80a0924:	d251      	bcs.n	80a09ca <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x156>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
 80a0926:	ebc5 0208 	rsb	r2, r5, r8
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
 80a092a:	687b      	ldr	r3, [r7, #4]
 80a092c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80a0930:	bf28      	it	cs
 80a0932:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80a0936:	1959      	adds	r1, r3, r5
 80a0938:	6820      	ldr	r0, [r4, #0]
 80a093a:	f001 fd96 	bl	80a246a <_ZN9TCPClient5writeEPKhj>
 80a093e:	4606      	mov	r6, r0
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
 80a0940:	2000      	movs	r0, #0
 80a0942:	f000 fc13 	bl	80a116c <_Z10BlynkDelaym>
        if (w == 0) {
 80a0946:	2e00      	cmp	r6, #0
 80a0948:	d13d      	bne.n	80a09c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x152>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a094a:	6820      	ldr	r0, [r4, #0]
 80a094c:	f001 fecc 	bl	80a26e8 <_ZN9TCPClient4stopEv>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
#endif
            conn.disconnect();
            state = CONNECTING;
 80a0950:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
 80a0952:	f000 fc13 	bl	80a117c <BlynkNoOpCbk>
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
 80a0956:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
 80a0958:	370c      	adds	r7, #12
 80a095a:	46bd      	mov	sp, r7
 80a095c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
 80a0960:	8b23      	ldrh	r3, [r4, #24]
 80a0962:	3301      	adds	r3, #1
 80a0964:	b29b      	uxth	r3, r3
 80a0966:	b903      	cbnz	r3, 80a096a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf6>
        msgIdOut = 1;
 80a0968:	2301      	movs	r3, #1
 80a096a:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
 80a096c:	8b26      	ldrh	r6, [r4, #24]
 80a096e:	e79f      	b.n	80a08b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
 80a0970:	68e3      	ldr	r3, [r4, #12]
 80a0972:	6922      	ldr	r2, [r4, #16]
 80a0974:	4293      	cmp	r3, r2
 80a0976:	bf38      	it	cc
 80a0978:	4613      	movcc	r3, r2
 80a097a:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
 80a097e:	f000 fbf7 	bl	80a1170 <_Z11BlynkMillisv>
        if (wait_time >= 0) {
 80a0982:	ebc0 0008 	rsb	r0, r0, r8
 80a0986:	2800      	cmp	r0, #0
 80a0988:	db0a      	blt.n	80a09a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
 80a098a:	2100      	movs	r1, #0
 80a098c:	4620      	mov	r0, r4
 80a098e:	f7ff fe63 	bl	80a0658 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
 80a0992:	f000 fbed 	bl	80a1170 <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
 80a0996:	ebc0 0008 	rsb	r0, r0, r8
 80a099a:	2800      	cmp	r0, #0
 80a099c:	daf5      	bge.n	80a098a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x116>
 80a099e:	e78b      	b.n	80a08b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
 80a09a0:	7f21      	ldrb	r1, [r4, #28]
 80a09a2:	2900      	cmp	r1, #0
 80a09a4:	d188      	bne.n	80a08b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
            run();
 80a09a6:	4620      	mov	r0, r4
 80a09a8:	f7ff fe56 	bl	80a0658 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
 80a09ac:	e784      	b.n	80a08b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
 80a09ae:	2005      	movs	r0, #5
 80a09b0:	e7b3      	b.n	80a091a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa6>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
 80a09b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a09b4:	2b00      	cmp	r3, #0
 80a09b6:	d0b3      	beq.n	80a0920 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        memcpy(buff + pos, data2, length2);
 80a09b8:	461a      	mov	r2, r3
 80a09ba:	687b      	ldr	r3, [r7, #4]
 80a09bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80a09be:	4418      	add	r0, r3
 80a09c0:	f003 fc00 	bl	80a41c4 <memcpy>
 80a09c4:	e7ac      	b.n	80a0920 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
 80a09c6:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
 80a09c8:	e7ab      	b.n	80a0922 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xae>
        }
    }

#endif

    if (wlen != full_length) {
 80a09ca:	d003      	beq.n	80a09d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x160>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
#endif
        internalReconnect();
 80a09cc:	4620      	mov	r0, r4
 80a09ce:	f7ff fbf9 	bl	80a01c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
 80a09d2:	e7c0      	b.n	80a0956 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe2>
    }

    lastActivityOut = BlynkMillis();
 80a09d4:	f000 fbcc 	bl	80a1170 <_Z11BlynkMillisv>
 80a09d8:	6120      	str	r0, [r4, #16]
 80a09da:	e7bc      	b.n	80a0956 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe2>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
 80a09dc:	2e00      	cmp	r6, #0
 80a09de:	f47f af6b 	bne.w	80a08b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
 80a09e2:	e762      	b.n	80a08aa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>

080a09e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
 80a09e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len);
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len);
 80a09e6:	2200      	movs	r2, #0
 80a09e8:	2350      	movs	r3, #80	; 0x50
 80a09ea:	9300      	str	r3, [sp, #0]
 80a09ec:	9202      	str	r2, [sp, #8]
 80a09ee:	9201      	str	r2, [sp, #4]
 80a09f0:	4b03      	ldr	r3, [pc, #12]	; (80a0a00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x1c>)
 80a09f2:	2111      	movs	r1, #17
 80a09f4:	f7ff ff3e 	bl	80a0874 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
 80a09f8:	b005      	add	sp, #20
 80a09fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80a09fe:	bf00      	nop
 80a0a00:	080a43f8 	.word	0x080a43f8

080a0a04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
 80a0a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0a08:	460d      	mov	r5, r1
 80a0a0a:	4690      	mov	r8, r2
 80a0a0c:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0a10:	ab08      	add	r3, sp, #32
 80a0a12:	2400      	movs	r4, #0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a0a14:	2203      	movs	r2, #3
 80a0a16:	4606      	mov	r6, r0
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0a18:	9305      	str	r3, [sp, #20]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a0a1a:	a805      	add	r0, sp, #20
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a0a20:	4914      	ldr	r1, [pc, #80]	; (80a0a74 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x70>)
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0a22:	9307      	str	r3, [sp, #28]
 80a0a24:	9406      	str	r4, [sp, #24]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a0a26:	f7ff fb76 	bl	80a0116 <_ZN10BlynkParam3addEPKvj>
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
        cmd.add(pin);
 80a0a2a:	4629      	mov	r1, r5
 80a0a2c:	a805      	add	r0, sp, #20
 80a0a2e:	f7ff fb83 	bl	80a0138 <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
 80a0a32:	9b06      	ldr	r3, [sp, #24]
 80a0a34:	9907      	ldr	r1, [sp, #28]
 80a0a36:	9d05      	ldr	r5, [sp, #20]
 80a0a38:	4640      	mov	r0, r8
 80a0a3a:	1acf      	subs	r7, r1, r3
 80a0a3c:	441d      	add	r5, r3
 80a0a3e:	f002 fd4d 	bl	80a34dc <__aeabi_f2d>
 80a0a42:	4a0d      	ldr	r2, [pc, #52]	; (80a0a78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x74>)
 80a0a44:	e9cd 0100 	strd	r0, r1, [sp]
 80a0a48:	4639      	mov	r1, r7
 80a0a4a:	4628      	mov	r0, r5
 80a0a4c:	f000 fe86 	bl	80a175c <snprintf>
 80a0a50:	9b06      	ldr	r3, [sp, #24]
 80a0a52:	3001      	adds	r0, #1
 80a0a54:	4418      	add	r0, r3
 80a0a56:	9006      	str	r0, [sp, #24]
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a0a58:	3801      	subs	r0, #1
 80a0a5a:	9000      	str	r0, [sp, #0]
 80a0a5c:	9402      	str	r4, [sp, #8]
 80a0a5e:	9401      	str	r4, [sp, #4]
 80a0a60:	9b05      	ldr	r3, [sp, #20]
 80a0a62:	4622      	mov	r2, r4
 80a0a64:	2114      	movs	r1, #20
 80a0a66:	4630      	mov	r0, r6
 80a0a68:	f7ff ff04 	bl	80a0874 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a0a6c:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 80a0a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0a74:	080a4472 	.word	0x080a4472
 80a0a78:	080a4475 	.word	0x080a4475

080a0a7c <_Z7readDHTv>:
}

// Blynk currently handles the waiting time, if this wasn't the case it would be
// a good rule to wait ~2500ms between each read according to the PietteTech_DHT library
void readDHT()
{
 80a0a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int result = DHT.acquireAndWait(1000);
 80a0a80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
}

// Blynk currently handles the waiting time, if this wasn't the case it would be
// a good rule to wait ~2500ms between each read according to the PietteTech_DHT library
void readDHT()
{
 80a0a84:	b089      	sub	sp, #36	; 0x24
  int result = DHT.acquireAndWait(1000);
 80a0a86:	4870      	ldr	r0, [pc, #448]	; (80a0c48 <_Z7readDHTv+0x1cc>)
 80a0a88:	f000 fb16 	bl	80a10b8 <_ZN14PietteTech_DHT14acquireAndWaitEm>

  switch (result)
 80a0a8c:	3007      	adds	r0, #7
 80a0a8e:	4c6f      	ldr	r4, [pc, #444]	; (80a0c4c <_Z7readDHTv+0x1d0>)
 80a0a90:	2807      	cmp	r0, #7
 80a0a92:	d85d      	bhi.n	80a0b50 <_Z7readDHTv+0xd4>
 80a0a94:	e8df f000 	tbb	[pc, r0]
 80a0a98:	303b4651 	.word	0x303b4651
 80a0a9c:	040f1a25 	.word	0x040f1a25
  {
  case DHTLIB_OK:
    Serial.println("OK");
 80a0aa0:	f002 f822 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a0aa4:	496a      	ldr	r1, [pc, #424]	; (80a0c50 <_Z7readDHTv+0x1d4>)
 80a0aa6:	f001 fa6e 	bl	80a1f86 <_ZN5Print7printlnEPKc>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a0aaa:	2200      	movs	r2, #0
    Particle.publish("status", "OK", PRIVATE);
 80a0aac:	f88d 2000 	strb.w	r2, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a0ab0:	7823      	ldrb	r3, [r4, #0]
 80a0ab2:	4a67      	ldr	r2, [pc, #412]	; (80a0c50 <_Z7readDHTv+0x1d4>)
 80a0ab4:	e056      	b.n	80a0b64 <_Z7readDHTv+0xe8>
    break;
  case DHTLIB_ERROR_CHECKSUM:
    Serial.println("Error\n\r\tChecksum error");
 80a0ab6:	f002 f817 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a0aba:	4966      	ldr	r1, [pc, #408]	; (80a0c54 <_Z7readDHTv+0x1d8>)
 80a0abc:	f001 fa63 	bl	80a1f86 <_ZN5Print7printlnEPKc>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a0ac0:	2200      	movs	r2, #0
    Particle.publish("status", "Checksum error", PRIVATE);
 80a0ac2:	f88d 2000 	strb.w	r2, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a0ac6:	7823      	ldrb	r3, [r4, #0]
 80a0ac8:	4a63      	ldr	r2, [pc, #396]	; (80a0c58 <_Z7readDHTv+0x1dc>)
 80a0aca:	e04b      	b.n	80a0b64 <_Z7readDHTv+0xe8>
    break;
  case DHTLIB_ERROR_ISR_TIMEOUT:
    Serial.println("Error\n\r\tISR time out error");
 80a0acc:	f002 f80c 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a0ad0:	4962      	ldr	r1, [pc, #392]	; (80a0c5c <_Z7readDHTv+0x1e0>)
 80a0ad2:	f001 fa58 	bl	80a1f86 <_ZN5Print7printlnEPKc>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a0ad6:	2200      	movs	r2, #0
    Particle.publish("status", "ISR time out error", PRIVATE);
 80a0ad8:	f88d 2000 	strb.w	r2, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a0adc:	7823      	ldrb	r3, [r4, #0]
 80a0ade:	4a60      	ldr	r2, [pc, #384]	; (80a0c60 <_Z7readDHTv+0x1e4>)
 80a0ae0:	e040      	b.n	80a0b64 <_Z7readDHTv+0xe8>
    break;
  case DHTLIB_ERROR_RESPONSE_TIMEOUT:
    Serial.println("Error\n\r\tResponse time out error");
 80a0ae2:	f002 f801 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a0ae6:	495f      	ldr	r1, [pc, #380]	; (80a0c64 <_Z7readDHTv+0x1e8>)
 80a0ae8:	f001 fa4d 	bl	80a1f86 <_ZN5Print7printlnEPKc>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a0aec:	2200      	movs	r2, #0
    Particle.publish("status", "Response time out error", PRIVATE);
 80a0aee:	f88d 2000 	strb.w	r2, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a0af2:	7823      	ldrb	r3, [r4, #0]
 80a0af4:	4a5c      	ldr	r2, [pc, #368]	; (80a0c68 <_Z7readDHTv+0x1ec>)
 80a0af6:	e035      	b.n	80a0b64 <_Z7readDHTv+0xe8>
    break;
  case DHTLIB_ERROR_DATA_TIMEOUT:
    Serial.println("Error\n\r\tData time out error");
 80a0af8:	f001 fff6 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a0afc:	495b      	ldr	r1, [pc, #364]	; (80a0c6c <_Z7readDHTv+0x1f0>)
 80a0afe:	f001 fa42 	bl	80a1f86 <_ZN5Print7printlnEPKc>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a0b02:	2200      	movs	r2, #0
    Particle.publish("status", "Data time out error", PRIVATE);
 80a0b04:	f88d 2000 	strb.w	r2, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a0b08:	7823      	ldrb	r3, [r4, #0]
 80a0b0a:	4a59      	ldr	r2, [pc, #356]	; (80a0c70 <_Z7readDHTv+0x1f4>)
 80a0b0c:	e02a      	b.n	80a0b64 <_Z7readDHTv+0xe8>
    break;
  case DHTLIB_ERROR_ACQUIRING:
    Serial.println("Error\n\r\tAcquiring");
 80a0b0e:	f001 ffeb 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a0b12:	4958      	ldr	r1, [pc, #352]	; (80a0c74 <_Z7readDHTv+0x1f8>)
 80a0b14:	f001 fa37 	bl	80a1f86 <_ZN5Print7printlnEPKc>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a0b18:	2200      	movs	r2, #0
    Particle.publish("status", "Acquiring", PRIVATE);
 80a0b1a:	f88d 2000 	strb.w	r2, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a0b1e:	7823      	ldrb	r3, [r4, #0]
 80a0b20:	4a55      	ldr	r2, [pc, #340]	; (80a0c78 <_Z7readDHTv+0x1fc>)
 80a0b22:	e01f      	b.n	80a0b64 <_Z7readDHTv+0xe8>
    break;
  case DHTLIB_ERROR_DELTA:
    Serial.println("Error\n\r\tDelta time too small");
 80a0b24:	f001 ffe0 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a0b28:	4954      	ldr	r1, [pc, #336]	; (80a0c7c <_Z7readDHTv+0x200>)
 80a0b2a:	f001 fa2c 	bl	80a1f86 <_ZN5Print7printlnEPKc>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a0b2e:	2200      	movs	r2, #0
    Particle.publish("status", "Delta time too small", PRIVATE);
 80a0b30:	f88d 2000 	strb.w	r2, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a0b34:	7823      	ldrb	r3, [r4, #0]
 80a0b36:	4a52      	ldr	r2, [pc, #328]	; (80a0c80 <_Z7readDHTv+0x204>)
 80a0b38:	e014      	b.n	80a0b64 <_Z7readDHTv+0xe8>
    break;
  case DHTLIB_ERROR_NOTSTARTED:
    Serial.println("Error\n\r\tNot started");
 80a0b3a:	f001 ffd5 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a0b3e:	4951      	ldr	r1, [pc, #324]	; (80a0c84 <_Z7readDHTv+0x208>)
 80a0b40:	f001 fa21 	bl	80a1f86 <_ZN5Print7printlnEPKc>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a0b44:	2200      	movs	r2, #0
    Particle.publish("status", "Not started", PRIVATE);
 80a0b46:	f88d 2000 	strb.w	r2, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a0b4a:	7823      	ldrb	r3, [r4, #0]
 80a0b4c:	4a4e      	ldr	r2, [pc, #312]	; (80a0c88 <_Z7readDHTv+0x20c>)
 80a0b4e:	e009      	b.n	80a0b64 <_Z7readDHTv+0xe8>
    break;
  default:
    Serial.println("Unknown error");
 80a0b50:	f001 ffca 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a0b54:	494d      	ldr	r1, [pc, #308]	; (80a0c8c <_Z7readDHTv+0x210>)
 80a0b56:	f001 fa16 	bl	80a1f86 <_ZN5Print7printlnEPKc>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a0b5a:	2200      	movs	r2, #0
    Particle.publish("status", "Unknown error", PRIVATE);
 80a0b5c:	f88d 2000 	strb.w	r2, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a0b60:	7823      	ldrb	r3, [r4, #0]
 80a0b62:	4a4a      	ldr	r2, [pc, #296]	; (80a0c8c <_Z7readDHTv+0x210>)
 80a0b64:	494a      	ldr	r1, [pc, #296]	; (80a0c90 <_Z7readDHTv+0x214>)
 80a0b66:	a804      	add	r0, sp, #16
 80a0b68:	f7ff faa3 	bl	80a00b2 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.9.constprop.13>
 80a0b6c:	a805      	add	r0, sp, #20
 80a0b6e:	f7ff fb07 	bl	80a0180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    break;
  }

  // Get temperature and humidity, then send some data to serial
  // and the Particle cloud for debugging
  float temperature = DHT.getCelsius();
 80a0b72:	4835      	ldr	r0, [pc, #212]	; (80a0c48 <_Z7readDHTv+0x1cc>)
 80a0b74:	f000 fac4 	bl	80a1100 <_ZN14PietteTech_DHT10getCelsiusEv>
 80a0b78:	4606      	mov	r6, r0
  Serial.print("Temperature (oC): ");
 80a0b7a:	f001 ffb5 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a0b7e:	4945      	ldr	r1, [pc, #276]	; (80a0c94 <_Z7readDHTv+0x218>)
 80a0b80:	f001 f9ee 	bl	80a1f60 <_ZN5Print5printEPKc>
  Serial.println(temperature, 2);
 80a0b84:	f001 ffb0 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a0b88:	4605      	mov	r5, r0
 80a0b8a:	4630      	mov	r0, r6
 80a0b8c:	f002 fca6 	bl	80a34dc <__aeabi_f2d>
 80a0b90:	2702      	movs	r7, #2
 80a0b92:	460b      	mov	r3, r1
 80a0b94:	4602      	mov	r2, r0
 80a0b96:	9700      	str	r7, [sp, #0]
 80a0b98:	4628      	mov	r0, r5
 80a0b9a:	f001 fafb 	bl	80a2194 <_ZN5Print7printlnEdi>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a0b9e:	f04f 0800 	mov.w	r8, #0
  Particle.publish("temperature", String(temperature), PRIVATE);
 80a0ba2:	4631      	mov	r1, r6
 80a0ba4:	2206      	movs	r2, #6
 80a0ba6:	a804      	add	r0, sp, #16
 80a0ba8:	f001 fc1a 	bl	80a23e0 <_ZN6StringC1Efi>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a0bac:	7823      	ldrb	r3, [r4, #0]
 80a0bae:	9a04      	ldr	r2, [sp, #16]
 80a0bb0:	4939      	ldr	r1, [pc, #228]	; (80a0c98 <_Z7readDHTv+0x21c>)
 80a0bb2:	a802      	add	r0, sp, #8
 80a0bb4:	f88d 8000 	strb.w	r8, [sp]
 80a0bb8:	f7ff fa7b 	bl	80a00b2 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.9.constprop.13>
 80a0bbc:	a803      	add	r0, sp, #12
 80a0bbe:	f7ff fadf 	bl	80a0180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0bc2:	a804      	add	r0, sp, #16
 80a0bc4:	f001 fbb4 	bl	80a2330 <_ZN6StringD1Ev>

  float humidity = DHT.getHumidity();
 80a0bc8:	481f      	ldr	r0, [pc, #124]	; (80a0c48 <_Z7readDHTv+0x1cc>)
 80a0bca:	f000 fab3 	bl	80a1134 <_ZN14PietteTech_DHT11getHumidityEv>
 80a0bce:	4605      	mov	r5, r0
  Serial.print("Humidity (%): ");
 80a0bd0:	f001 ff8a 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a0bd4:	4931      	ldr	r1, [pc, #196]	; (80a0c9c <_Z7readDHTv+0x220>)
 80a0bd6:	f001 f9c3 	bl	80a1f60 <_ZN5Print5printEPKc>
  Serial.println(humidity, 2);
 80a0bda:	f001 ff85 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a0bde:	4681      	mov	r9, r0
 80a0be0:	4628      	mov	r0, r5
 80a0be2:	f002 fc7b 	bl	80a34dc <__aeabi_f2d>
 80a0be6:	9700      	str	r7, [sp, #0]
 80a0be8:	460b      	mov	r3, r1
 80a0bea:	4602      	mov	r2, r0
 80a0bec:	4648      	mov	r0, r9
 80a0bee:	f001 fad1 	bl	80a2194 <_ZN5Print7printlnEdi>
  Particle.publish("humidity", String(humidity), PRIVATE);
 80a0bf2:	4629      	mov	r1, r5
 80a0bf4:	2206      	movs	r2, #6
 80a0bf6:	a804      	add	r0, sp, #16
 80a0bf8:	f001 fbf2 	bl	80a23e0 <_ZN6StringC1Efi>
 80a0bfc:	7823      	ldrb	r3, [r4, #0]
 80a0bfe:	9a04      	ldr	r2, [sp, #16]
 80a0c00:	4927      	ldr	r1, [pc, #156]	; (80a0ca0 <_Z7readDHTv+0x224>)
 80a0c02:	a802      	add	r0, sp, #8
 80a0c04:	f88d 8000 	strb.w	r8, [sp]
 80a0c08:	f7ff fa53 	bl	80a00b2 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.9.constprop.13>
 80a0c0c:	a803      	add	r0, sp, #12
 80a0c0e:	f7ff fab7 	bl	80a0180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0c12:	a804      	add	r0, sp, #16
 80a0c14:	f001 fb8c 	bl	80a2330 <_ZN6StringD1Ev>

  // Send data to the Blynk API, once for the monitor and once for the graph
  Blynk.virtualWrite(0, temperature);
 80a0c18:	4632      	mov	r2, r6
 80a0c1a:	4641      	mov	r1, r8
 80a0c1c:	4821      	ldr	r0, [pc, #132]	; (80a0ca4 <_Z7readDHTv+0x228>)
 80a0c1e:	f7ff fef1 	bl	80a0a04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(2, temperature);
 80a0c22:	4632      	mov	r2, r6
 80a0c24:	4639      	mov	r1, r7
 80a0c26:	481f      	ldr	r0, [pc, #124]	; (80a0ca4 <_Z7readDHTv+0x228>)
 80a0c28:	f7ff feec 	bl	80a0a04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(1, humidity);
 80a0c2c:	462a      	mov	r2, r5
 80a0c2e:	2101      	movs	r1, #1
 80a0c30:	481c      	ldr	r0, [pc, #112]	; (80a0ca4 <_Z7readDHTv+0x228>)
 80a0c32:	f7ff fee7 	bl	80a0a04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(3, humidity);
 80a0c36:	462a      	mov	r2, r5
 80a0c38:	2103      	movs	r1, #3
 80a0c3a:	481a      	ldr	r0, [pc, #104]	; (80a0ca4 <_Z7readDHTv+0x228>)
 80a0c3c:	f7ff fee2 	bl	80a0a04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
}
 80a0c40:	b009      	add	sp, #36	; 0x24
 80a0c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0c46:	bf00      	nop
 80a0c48:	20000394 	.word	0x20000394
 80a0c4c:	200003f0 	.word	0x200003f0
 80a0c50:	080a447b 	.word	0x080a447b
 80a0c54:	080a4485 	.word	0x080a4485
 80a0c58:	080a448d 	.word	0x080a448d
 80a0c5c:	080a449c 	.word	0x080a449c
 80a0c60:	080a44a4 	.word	0x080a44a4
 80a0c64:	080a44b7 	.word	0x080a44b7
 80a0c68:	080a44bf 	.word	0x080a44bf
 80a0c6c:	080a44d7 	.word	0x080a44d7
 80a0c70:	080a44df 	.word	0x080a44df
 80a0c74:	080a44f3 	.word	0x080a44f3
 80a0c78:	080a44fb 	.word	0x080a44fb
 80a0c7c:	080a4505 	.word	0x080a4505
 80a0c80:	080a450d 	.word	0x080a450d
 80a0c84:	080a4522 	.word	0x080a4522
 80a0c88:	080a452a 	.word	0x080a452a
 80a0c8c:	080a4536 	.word	0x080a4536
 80a0c90:	080a447e 	.word	0x080a447e
 80a0c94:	080a4544 	.word	0x080a4544
 80a0c98:	080a4557 	.word	0x080a4557
 80a0c9c:	080a4563 	.word	0x080a4563
 80a0ca0:	080a4572 	.word	0x080a4572
 80a0ca4:	20000638 	.word	0x20000638

080a0ca8 <loop>:

void loop()
{
 80a0ca8:	b508      	push	{r3, lr}
  Blynk.run();
 80a0caa:	2100      	movs	r1, #0
 80a0cac:	4803      	ldr	r0, [pc, #12]	; (80a0cbc <loop+0x14>)
 80a0cae:	f7ff fcd3 	bl	80a0658 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  timer.run();
}
 80a0cb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void loop()
{
  Blynk.run();
  timer.run();
 80a0cb6:	4802      	ldr	r0, [pc, #8]	; (80a0cc0 <loop+0x18>)
 80a0cb8:	f000 baf5 	b.w	80a12a6 <_ZN10BlynkTimer3runEv>
 80a0cbc:	20000638 	.word	0x20000638
 80a0cc0:	200003f4 	.word	0x200003f4

080a0cc4 <_GLOBAL__sub_I_Blynk>:
}
 80a0cc4:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0cc6:	4b15      	ldr	r3, [pc, #84]	; (80a0d1c <_GLOBAL__sub_I_Blynk+0x58>)

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
 80a0cc8:	4d15      	ldr	r5, [pc, #84]	; (80a0d20 <_GLOBAL__sub_I_Blynk+0x5c>)
 80a0cca:	2201      	movs	r2, #1
 80a0ccc:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0cce:	f000 fb67 	bl	80a13a0 <HAL_Pin_Map>
 80a0cd2:	4628      	mov	r0, r5
 80a0cd4:	f001 fd5a 	bl	80a278c <_ZN9TCPClientC1Ev>
 80a0cd8:	f105 001c 	add.w	r0, r5, #28
 80a0cdc:	2400      	movs	r4, #0
 80a0cde:	f001 f8e9 	bl	80a1eb4 <_ZN9IPAddressC1Ev>
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
 80a0ce2:	4a10      	ldr	r2, [pc, #64]	; (80a0d24 <_GLOBAL__sub_I_Blynk+0x60>)
 80a0ce4:	4910      	ldr	r1, [pc, #64]	; (80a0d28 <_GLOBAL__sub_I_Blynk+0x64>)
 80a0ce6:	4628      	mov	r0, r5
 80a0ce8:	636c      	str	r4, [r5, #52]	; 0x34
 80a0cea:	872c      	strh	r4, [r5, #56]	; 0x38
 80a0cec:	f002 f942 	bl	80a2f74 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
 80a0cf0:	4b0e      	ldr	r3, [pc, #56]	; (80a0d2c <_GLOBAL__sub_I_Blynk+0x68>)

// Setup Blynk serial output for debug prints and auth
// (get the auth token in the Blynk app project settings)
#define BLYNK_PRINT Serial
char blynkAuth[] = "74dab704d1824061bb43cf03df866244";
BlynkTimer timer;
 80a0cf2:	480f      	ldr	r0, [pc, #60]	; (80a0d30 <_GLOBAL__sub_I_Blynk+0x6c>)
 80a0cf4:	601d      	str	r5, [r3, #0]
 80a0cf6:	605c      	str	r4, [r3, #4]
 80a0cf8:	609c      	str	r4, [r3, #8]
 80a0cfa:	60dc      	str	r4, [r3, #12]
 80a0cfc:	611c      	str	r4, [r3, #16]
 80a0cfe:	615c      	str	r4, [r3, #20]
 80a0d00:	831c      	strh	r4, [r3, #24]
 80a0d02:	835c      	strh	r4, [r3, #26]
 80a0d04:	771c      	strb	r4, [r3, #28]
 80a0d06:	775c      	strb	r4, [r3, #29]
 80a0d08:	f000 fa50 	bl	80a11ac <_ZN10BlynkTimerC1Ev>

// Setup DHT sensor DHT11/21/22/AM2301/AM2302 and digital pin (D0 cannot be used)
#define DHTTYPE DHT11
#define DHTPIN D4
PietteTech_DHT DHT(DHTPIN, DHTTYPE);
 80a0d0c:	4623      	mov	r3, r4

void loop()
{
  Blynk.run();
  timer.run();
}
 80a0d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BlynkTimer timer;

// Setup DHT sensor DHT11/21/22/AM2301/AM2302 and digital pin (D0 cannot be used)
#define DHTTYPE DHT11
#define DHTPIN D4
PietteTech_DHT DHT(DHTPIN, DHTTYPE);
 80a0d12:	220b      	movs	r2, #11
 80a0d14:	2104      	movs	r1, #4
 80a0d16:	4807      	ldr	r0, [pc, #28]	; (80a0d34 <_GLOBAL__sub_I_Blynk+0x70>)
 80a0d18:	f000 b8dc 	b.w	80a0ed4 <_ZN14PietteTech_DHTC1EhhPFvvE>
 80a0d1c:	200003f0 	.word	0x200003f0
 80a0d20:	20000658 	.word	0x20000658
 80a0d24:	20000390 	.word	0x20000390
 80a0d28:	080a01ad 	.word	0x080a01ad
 80a0d2c:	20000638 	.word	0x20000638
 80a0d30:	200003f4 	.word	0x200003f4
 80a0d34:	20000394 	.word	0x20000394

080a0d38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0d38:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0d3a:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0d3c:	6898      	ldr	r0, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0d3e:	f012 0f01 	tst.w	r2, #1
 80a0d42:	ea4f 0262 	mov.w	r2, r2, asr #1
 80a0d46:	bf18      	it	ne
 80a0d48:	5881      	ldrne	r1, [r0, r2]
 80a0d4a:	681b      	ldr	r3, [r3, #0]
 80a0d4c:	4410      	add	r0, r2
 80a0d4e:	bf18      	it	ne
 80a0d50:	58cb      	ldrne	r3, [r1, r3]
 80a0d52:	4718      	bx	r3

080a0d54 <_ZN14PietteTech_DHT12_isrCallbackEv>:
 * NOTE:  isrCallback is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
 80a0d54:	b570      	push	{r4, r5, r6, lr}
 80a0d56:	4604      	mov	r4, r0

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0d58:	f000 fb12 	bl	80a1380 <HAL_Timer_Get_Micro_Seconds>
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
  _us = newUs;

  if (delta > 6000) {
 80a0d5c:	f241 7270 	movw	r2, #6000	; 0x1770
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
 80a0d60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  _us = newUs;
 80a0d62:	63a0      	str	r0, [r4, #56]	; 0x38
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
 80a0d64:	1ac3      	subs	r3, r0, r3
  _us = newUs;

  if (delta > 6000) {
 80a0d66:	4293      	cmp	r3, r2
 80a0d68:	d90b      	bls.n	80a0d82 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
 80a0d6a:	f06f 0301 	mvn.w	r3, #1
 80a0d6e:	62e3      	str	r3, [r4, #44]	; 0x2c
    _state = STOPPED;
 80a0d70:	2303      	movs	r3, #3
 80a0d72:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    detachInterrupt(_sigPin);
 80a0d76:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    }
    break;
  default:
    break;
  }
}
 80a0d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _us = newUs;

  if (delta > 6000) {
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
    _state = STOPPED;
    detachInterrupt(_sigPin);
 80a0d7e:	f001 b809 	b.w	80a1d94 <_Z15detachInterruptt>
    return;
  }
  switch (_state) {
 80a0d82:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80a0d86:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80a0d8a:	b112      	cbz	r2, 80a0d92 <_ZN14PietteTech_DHT12_isrCallbackEv+0x3e>
 80a0d8c:	2901      	cmp	r1, #1
 80a0d8e:	d020      	beq.n	80a0dd2 <_ZN14PietteTech_DHT12_isrCallbackEv+0x7e>
 80a0d90:	bd70      	pop	{r4, r5, r6, pc}
  case RESPONSE:            // Spec: 80us LOW followed by 80us HIGH
    if (delta < 65) {      // Spec: 20-200us to first falling edge of response
 80a0d92:	2b40      	cmp	r3, #64	; 0x40
 80a0d94:	d803      	bhi.n	80a0d9e <_ZN14PietteTech_DHT12_isrCallbackEv+0x4a>
      _us -= delta;
 80a0d96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80a0d98:	1ad3      	subs	r3, r2, r3
 80a0d9a:	63a3      	str	r3, [r4, #56]	; 0x38
      break; //do nothing, it started the response signal
 80a0d9c:	bd70      	pop	{r4, r5, r6, pc}
      
// --------------- issue: https://github.com/particle-iot/device-os/issues/1654 -----------------
//    } if (125 < delta && delta < 200) { // originally 
    } if (125 < delta && delta < 220) {   // account for timing offset with Particle Mesh devices
 80a0d9e:	f1a3 027e 	sub.w	r2, r3, #126	; 0x7e
 80a0da2:	2a5d      	cmp	r2, #93	; 0x5d
 80a0da4:	b2dd      	uxtb	r5, r3
 80a0da6:	d805      	bhi.n	80a0db4 <_ZN14PietteTech_DHT12_isrCallbackEv+0x60>
// ----------------------------------------------------------------------------------------------

#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a0daa:	1c5a      	adds	r2, r3, #1
 80a0dac:	6422      	str	r2, [r4, #64]	; 0x40
 80a0dae:	701d      	strb	r5, [r3, #0]
#endif
      _state = DATA;
 80a0db0:	2301      	movs	r3, #1
 80a0db2:	e071      	b.n	80a0e98 <_ZN14PietteTech_DHT12_isrCallbackEv+0x144>
    }
    else {
      detachInterrupt(_sigPin);
 80a0db4:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0db8:	f000 ffec 	bl	80a1d94 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
      _state = STOPPED;
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0dbc:	6c22      	ldr	r2, [r4, #64]	; 0x40
#endif
      _state = DATA;
    }
    else {
      detachInterrupt(_sigPin);
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 80a0dbe:	f06f 0302 	mvn.w	r3, #2
 80a0dc2:	62e3      	str	r3, [r4, #44]	; 0x2c
      _state = STOPPED;
 80a0dc4:	2303      	movs	r3, #3
 80a0dc6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0dca:	1c53      	adds	r3, r2, #1
 80a0dcc:	6423      	str	r3, [r4, #64]	; 0x40
 80a0dce:	7015      	strb	r5, [r2, #0]
 80a0dd0:	bd70      	pop	{r4, r5, r6, pc}
#endif
    }
    break;
  case DATA:          // Spec: 50us low followed by high of 26-28us = 0, 70us = 1
    if (60 < delta && delta < 155) { //valid in timing
 80a0dd2:	f1a3 023d 	sub.w	r2, r3, #61	; 0x3d
 80a0dd6:	2a5d      	cmp	r2, #93	; 0x5d
 80a0dd8:	d84f      	bhi.n	80a0e7a <_ZN14PietteTech_DHT12_isrCallbackEv+0x126>
      _bits[_idx] <<= 1; // shift the data
 80a0dda:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
      if (delta > 110) //is a one
 80a0dde:	2b6e      	cmp	r3, #110	; 0x6e
#endif
    }
    break;
  case DATA:          // Spec: 50us low followed by high of 26-28us = 0, 70us = 1
    if (60 < delta && delta < 155) { //valid in timing
      _bits[_idx] <<= 1; // shift the data
 80a0de0:	4421      	add	r1, r4
 80a0de2:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 80a0de6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a0dea:	b2d2      	uxtb	r2, r2
 80a0dec:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
      if (delta > 110) //is a one
 80a0df0:	d908      	bls.n	80a0e04 <_ZN14PietteTech_DHT12_isrCallbackEv+0xb0>
        _bits[_idx] |= 1;
 80a0df2:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80a0df6:	4422      	add	r2, r4
 80a0df8:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80a0dfc:	f041 0101 	orr.w	r1, r1, #1
 80a0e00:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0e04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a0e06:	b2db      	uxtb	r3, r3
 80a0e08:	1c51      	adds	r1, r2, #1
 80a0e0a:	6421      	str	r1, [r4, #64]	; 0x40
 80a0e0c:	7013      	strb	r3, [r2, #0]
#endif
      if (_cnt == 0) { // we have completed the byte, go to next
 80a0e0e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a0e12:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a0e16:	bb4b      	cbnz	r3, 80a0e6c <_ZN14PietteTech_DHT12_isrCallbackEv+0x118>
        _cnt = 7; // restart at MSB
 80a0e18:	2307      	movs	r3, #7
 80a0e1a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
 80a0e1e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80a0e22:	3301      	adds	r3, #1
 80a0e24:	b2db      	uxtb	r3, r3
 80a0e26:	2b05      	cmp	r3, #5
 80a0e28:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80a0e2c:	d136      	bne.n	80a0e9c <_ZN14PietteTech_DHT12_isrCallbackEv+0x148>
          detachInterrupt(_sigPin);
 80a0e2e:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0e32:	f000 ffaf 	bl	80a1d94 <_Z15detachInterruptt>
          // Verify checksum
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a0e36:	f894 6030 	ldrb.w	r6, [r4, #48]	; 0x30
 80a0e3a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80a0e3e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
          if (_bits[4] != sum) {
 80a0e42:	4432      	add	r2, r6
      if (_cnt == 0) { // we have completed the byte, go to next
        _cnt = 7; // restart at MSB
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
          detachInterrupt(_sigPin);
          // Verify checksum
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a0e44:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
          if (_bits[4] != sum) {
 80a0e48:	4413      	add	r3, r2
 80a0e4a:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80a0e4e:	4403      	add	r3, r0
 80a0e50:	b2db      	uxtb	r3, r3
 80a0e52:	428b      	cmp	r3, r1
 80a0e54:	d002      	beq.n	80a0e5c <_ZN14PietteTech_DHT12_isrCallbackEv+0x108>
            _status = DHTLIB_ERROR_CHECKSUM;
 80a0e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0e5a:	e01b      	b.n	80a0e94 <_ZN14PietteTech_DHT12_isrCallbackEv+0x140>
            _state = STOPPED;
          }
          else {
            _status = DHTLIB_OK;
            _state = ACQUIRED;
 80a0e5c:	2302      	movs	r3, #2
          if (_bits[4] != sum) {
            _status = DHTLIB_ERROR_CHECKSUM;
            _state = STOPPED;
          }
          else {
            _status = DHTLIB_OK;
 80a0e5e:	62e5      	str	r5, [r4, #44]	; 0x2c
            _state = ACQUIRED;
 80a0e60:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
            _convert = true;
 80a0e64:	2301      	movs	r3, #1
 80a0e66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a0e6a:	bd70      	pop	{r4, r5, r6, pc}
          }
          break;
        }
      }
      else _cnt--;
 80a0e6c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a0e70:	3b01      	subs	r3, #1
 80a0e72:	b2db      	uxtb	r3, r3
 80a0e74:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80a0e78:	bd70      	pop	{r4, r5, r6, pc}
 80a0e7a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    }
    else if (delta < 10) {
 80a0e7c:	2b09      	cmp	r3, #9
      detachInterrupt(_sigPin);
 80a0e7e:	b280      	uxth	r0, r0
          break;
        }
      }
      else _cnt--;
    }
    else if (delta < 10) {
 80a0e80:	d804      	bhi.n	80a0e8c <_ZN14PietteTech_DHT12_isrCallbackEv+0x138>
      detachInterrupt(_sigPin);
 80a0e82:	f000 ff87 	bl	80a1d94 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_DELTA;
 80a0e86:	f06f 0305 	mvn.w	r3, #5
 80a0e8a:	e003      	b.n	80a0e94 <_ZN14PietteTech_DHT12_isrCallbackEv+0x140>
      _state = STOPPED;
    }
    else {
      detachInterrupt(_sigPin);
 80a0e8c:	f000 ff82 	bl	80a1d94 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_DATA_TIMEOUT;
 80a0e90:	f06f 0303 	mvn.w	r3, #3
 80a0e94:	62e3      	str	r3, [r4, #44]	; 0x2c
      _state = STOPPED;
 80a0e96:	2303      	movs	r3, #3
 80a0e98:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80a0e9c:	bd70      	pop	{r4, r5, r6, pc}

080a0e9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0e9e:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0ea0:	b538      	push	{r3, r4, r5, lr}
 80a0ea2:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0ea4:	d005      	beq.n	80a0eb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
 80a0ea6:	2a03      	cmp	r2, #3
 80a0ea8:	d00f      	beq.n	80a0eca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
 80a0eaa:	2a01      	cmp	r2, #1
 80a0eac:	d110      	bne.n	80a0ed0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0eae:	680b      	ldr	r3, [r1, #0]
 80a0eb0:	e009      	b.n	80a0ec6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0eb2:	200c      	movs	r0, #12
 80a0eb4:	680d      	ldr	r5, [r1, #0]
 80a0eb6:	f7ff f8f0 	bl	80a009a <_Znwj>
 80a0eba:	4603      	mov	r3, r0
 80a0ebc:	b118      	cbz	r0, 80a0ec6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
 80a0ebe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a0ec2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a0ec6:	6023      	str	r3, [r4, #0]
 80a0ec8:	e002      	b.n	80a0ed0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0eca:	6800      	ldr	r0, [r0, #0]
 80a0ecc:	f7ff f8e7 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0ed0:	2000      	movs	r0, #0
 80a0ed2:	bd38      	pop	{r3, r4, r5, pc}

080a0ed4 <_ZN14PietteTech_DHTC1EhhPFvvE>:
 *        it is no longer used or needed
 */
PietteTech_DHT::PietteTech_DHT() {
}
PietteTech_DHT::PietteTech_DHT(uint8_t sigPin, uint8_t dht_type, void(*callback_wrapper)()) {
  _sigPin = sigPin;
 80a0ed4:	6441      	str	r1, [r0, #68]	; 0x44
  _type = dht_type;
 80a0ed6:	6482      	str	r2, [r0, #72]	; 0x48
}
 80a0ed8:	4770      	bx	lr

080a0eda <_ZN14PietteTech_DHT5beginEv>:

/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::begin() {
 80a0eda:	b538      	push	{r3, r4, r5, lr}
 80a0edc:	4604      	mov	r4, r0
  _firstreading = true;
  _lastreadtime = 0;
 80a0ede:	2300      	movs	r3, #0
 80a0ee0:	64c3      	str	r3, [r0, #76]	; 0x4c
  _state = STOPPED;
 80a0ee2:	2303      	movs	r3, #3
/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::begin() {
  _firstreading = true;
 80a0ee4:	2501      	movs	r5, #1
  _lastreadtime = 0;
  _state = STOPPED;
 80a0ee6:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _status = DHTLIB_ERROR_NOTSTARTED;
 80a0eea:	f06f 0306 	mvn.w	r3, #6
/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::begin() {
  _firstreading = true;
 80a0eee:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
  _lastreadtime = 0;
  _state = STOPPED;
  _status = DHTLIB_ERROR_NOTSTARTED;
 80a0ef2:	62c3      	str	r3, [r0, #44]	; 0x2c
  pinMode(_sigPin, OUTPUT);
 80a0ef4:	4629      	mov	r1, r5
 80a0ef6:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
 80a0efa:	f001 ff67 	bl	80a2dcc <pinMode>
  digitalWrite(_sigPin, HIGH);
 80a0efe:	4629      	mov	r1, r5
 80a0f00:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
}
 80a0f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  _firstreading = true;
  _lastreadtime = 0;
  _state = STOPPED;
  _status = DHTLIB_ERROR_NOTSTARTED;
  pinMode(_sigPin, OUTPUT);
  digitalWrite(_sigPin, HIGH);
 80a0f08:	f001 bf71 	b.w	80a2dee <digitalWrite>

080a0f0c <_ZN14PietteTech_DHT7acquireEv>:
  _sigPin = sigPin;
  _type = dht_type;
  this->begin();
}

int PietteTech_DHT::acquire() {
 80a0f0c:	b570      	push	{r4, r5, r6, lr}
 80a0f0e:	4604      	mov	r4, r0
 80a0f10:	b086      	sub	sp, #24
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0f12:	f000 fa3d 	bl	80a1390 <HAL_Timer_Get_Milli_Seconds>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading
  unsigned long currenttime = millis();
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a0f16:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80a0f1a:	b923      	cbnz	r3, 80a0f26 <_ZN14PietteTech_DHT7acquireEv+0x1a>
 80a0f1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80a0f1e:	1ac3      	subs	r3, r0, r3
 80a0f20:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a0f24:	d30a      	bcc.n	80a0f3c <_ZN14PietteTech_DHT7acquireEv+0x30>
    // return last correct measurement, (this read time - last read time) < device limit
    return DHTLIB_ACQUIRED;
  }

  if (_state == STOPPED || _state == ACQUIRED) {
 80a0f26:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80a0f2a:	2b03      	cmp	r3, #3
 80a0f2c:	d008      	beq.n	80a0f40 <_ZN14PietteTech_DHT7acquireEv+0x34>
 80a0f2e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80a0f32:	2b02      	cmp	r3, #2
 80a0f34:	d004      	beq.n	80a0f40 <_ZN14PietteTech_DHT7acquireEv+0x34>
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);

    return DHTLIB_ACQUIRING;
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
 80a0f36:	f06f 0004 	mvn.w	r0, #4
 80a0f3a:	e05f      	b.n	80a0ffc <_ZN14PietteTech_DHT7acquireEv+0xf0>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading
  unsigned long currenttime = millis();
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
    // return last correct measurement, (this read time - last read time) < device limit
    return DHTLIB_ACQUIRED;
 80a0f3c:	2002      	movs	r0, #2
 80a0f3e:	e05d      	b.n	80a0ffc <_ZN14PietteTech_DHT7acquireEv+0xf0>

  if (_state == STOPPED || _state == ACQUIRED) {
    /*
     * Setup the initial state machine
     */
    _firstreading = false;
 80a0f40:	2300      	movs	r3, #0

#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a0f42:	461a      	mov	r2, r3

  if (_state == STOPPED || _state == ACQUIRED) {
    /*
     * Setup the initial state machine
     */
    _firstreading = false;
 80a0f44:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    _lastreadtime = currenttime;
 80a0f48:	64e0      	str	r0, [r4, #76]	; 0x4c
    _state = RESPONSE;
 80a0f4a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29

#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a0f4e:	54e2      	strb	r2, [r4, r3]
 80a0f50:	3301      	adds	r3, #1
 80a0f52:	2b29      	cmp	r3, #41	; 0x29
 80a0f54:	f04f 0500 	mov.w	r5, #0
 80a0f58:	d1f9      	bne.n	80a0f4e <_ZN14PietteTech_DHT7acquireEv+0x42>

    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
    _cnt = 7;
 80a0f5a:	2307      	movs	r3, #7
#endif

    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
 80a0f5c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 80a0f60:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 80a0f64:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 80a0f68:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
 80a0f6c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    _cnt = 7;
 80a0f70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    _idx = 0;
    _hum = 0;
 80a0f74:	2300      	movs	r3, #0
 80a0f76:	6563      	str	r3, [r4, #84]	; 0x54
    _temp = 0;
 80a0f78:	65a3      	str	r3, [r4, #88]	; 0x58

    /*
     * Toggle the digital output to trigger the DHT device
     * to send us temperature and humidity data
     */
    pinMode(_sigPin, OUTPUT);
 80a0f7a:	2101      	movs	r1, #1
 80a0f7c:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
    _e = &_edges[0];
 80a0f80:	6424      	str	r4, [r4, #64]	; 0x40
    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
    _cnt = 7;
    _idx = 0;
 80a0f82:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36

    /*
     * Toggle the digital output to trigger the DHT device
     * to send us temperature and humidity data
     */
    pinMode(_sigPin, OUTPUT);
 80a0f86:	f001 ff21 	bl	80a2dcc <pinMode>
    digitalWrite(_sigPin, LOW);
 80a0f8a:	4629      	mov	r1, r5
 80a0f8c:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0f90:	f001 ff2d 	bl	80a2dee <digitalWrite>
    if (_type == DHT11)
 80a0f94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80a0f96:	2b0b      	cmp	r3, #11
 80a0f98:	d103      	bne.n	80a0fa2 <_ZN14PietteTech_DHT7acquireEv+0x96>
      delay(18);                  // DHT11 Spec: 18ms min
 80a0f9a:	2012      	movs	r0, #18
 80a0f9c:	f000 fbf6 	bl	80a178c <delay>
 80a0fa0:	e003      	b.n	80a0faa <_ZN14PietteTech_DHT7acquireEv+0x9e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0fa2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80a0fa6:	f000 f9e3 	bl	80a1370 <HAL_Delay_Microseconds>
    else
      delayMicroseconds(1500);    // DHT22 Spec: 0.8-20ms, 1ms typ
    pinMode(_sigPin, INPUT);        // Note Hi-Z mode with pullup resistor
 80a0faa:	2100      	movs	r1, #0
 80a0fac:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0fb0:	f001 ff0c 	bl	80a2dcc <pinMode>

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0fb4:	f000 f9e4 	bl	80a1380 <HAL_Timer_Get_Micro_Seconds>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0fb8:	2500      	movs	r5, #0
                                    // will keep this high until the DHT responds.
    /*
     * Attach the interrupt handler to receive the data once the DHT
     * starts to send us data
     */
    _us = micros();
 80a0fba:	63a0      	str	r0, [r4, #56]	; 0x38
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0fbc:	200c      	movs	r0, #12
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);
 80a0fbe:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0fc2:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0fc4:	f7ff f869 	bl	80a009a <_Znwj>
 80a0fc8:	b118      	cbz	r0, 80a0fd2 <_ZN14PietteTech_DHT7acquireEv+0xc6>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a0fca:	4b0d      	ldr	r3, [pc, #52]	; (80a1000 <_ZN14PietteTech_DHT7acquireEv+0xf4>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0fcc:	6084      	str	r4, [r0, #8]
 80a0fce:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0fd2:	4b0c      	ldr	r3, [pc, #48]	; (80a1004 <_ZN14PietteTech_DHT7acquireEv+0xf8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0fd4:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0fd6:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a0fd8:	4b0b      	ldr	r3, [pc, #44]	; (80a1008 <_ZN14PietteTech_DHT7acquireEv+0xfc>)
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 80a0fda:	2202      	movs	r2, #2
 80a0fdc:	9304      	str	r3, [sp, #16]
 80a0fde:	2300      	movs	r3, #0
 80a0fe0:	9300      	str	r3, [sp, #0]
 80a0fe2:	a902      	add	r1, sp, #8
 80a0fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0fe8:	4630      	mov	r0, r6
 80a0fea:	f000 ff15 	bl	80a1e18 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0fee:	9b04      	ldr	r3, [sp, #16]
 80a0ff0:	b11b      	cbz	r3, 80a0ffa <_ZN14PietteTech_DHT7acquireEv+0xee>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0ff2:	a902      	add	r1, sp, #8
 80a0ff4:	2203      	movs	r2, #3
 80a0ff6:	4608      	mov	r0, r1
 80a0ff8:	4798      	blx	r3
 80a0ffa:	2001      	movs	r0, #1

    return DHTLIB_ACQUIRING;
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
}
 80a0ffc:	b006      	add	sp, #24
 80a0ffe:	bd70      	pop	{r4, r5, r6, pc}
 80a1000:	080a0d55 	.word	0x080a0d55
 80a1004:	080a0d39 	.word	0x080a0d39
 80a1008:	080a0e9f 	.word	0x080a0e9f
 80a100c:	00000000 	.word	0x00000000

080a1010 <_ZN14PietteTech_DHT7convertEv>:
  default:
    break;
  }
}

void PietteTech_DHT::convert() {
 80a1010:	b510      	push	{r4, lr}
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80a1012:	6c83      	ldr	r3, [r0, #72]	; 0x48
  default:
    break;
  }
}

void PietteTech_DHT::convert() {
 80a1014:	4604      	mov	r4, r0
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80a1016:	2b0b      	cmp	r3, #11
 80a1018:	d030      	beq.n	80a107c <_ZN14PietteTech_DHT7convertEv+0x6c>
 80a101a:	db39      	blt.n	80a1090 <_ZN14PietteTech_DHT7convertEv+0x80>
 80a101c:	3b15      	subs	r3, #21
 80a101e:	2b01      	cmp	r3, #1
 80a1020:	d836      	bhi.n	80a1090 <_ZN14PietteTech_DHT7convertEv+0x80>
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a1022:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 80a1026:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a102a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a102e:	b280      	uxth	r0, r0
 80a1030:	f002 fa42 	bl	80a34b8 <__aeabi_i2d>
 80a1034:	a318      	add	r3, pc, #96	; (adr r3, 80a1098 <_ZN14PietteTech_DHT7convertEv+0x88>)
 80a1036:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a103a:	f002 faa3 	bl	80a3584 <__aeabi_dmul>
 80a103e:	f002 fd99 	bl	80a3b74 <__aeabi_d2f>
    _temp = (_bits[2] & 0x80 ?
 80a1042:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a1046:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a1048:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
      word(_bits[2], _bits[3])) * 0.1;
 80a104c:	f013 0f80 	tst.w	r3, #128	; 0x80
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a1050:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
      word(_bits[2], _bits[3])) * 0.1;
 80a1054:	bf1b      	ittet	ne
 80a1056:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
 80a105a:	eb03 2000 	addne.w	r0, r3, r0, lsl #8
 80a105e:	eb03 2000 	addeq.w	r0, r3, r0, lsl #8
 80a1062:	4240      	negne	r0, r0
 80a1064:	bf08      	it	eq
 80a1066:	b280      	uxtheq	r0, r0
 80a1068:	f002 fa26 	bl	80a34b8 <__aeabi_i2d>
 80a106c:	a30a      	add	r3, pc, #40	; (adr r3, 80a1098 <_ZN14PietteTech_DHT7convertEv+0x88>)
 80a106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1072:	f002 fa87 	bl	80a3584 <__aeabi_dmul>
 80a1076:	f002 fd7d 	bl	80a3b74 <__aeabi_d2f>
 80a107a:	e008      	b.n	80a108e <_ZN14PietteTech_DHT7convertEv+0x7e>

void PietteTech_DHT::convert() {
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
  case DHT11:
    _hum = _bits[0];
 80a107c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 80a1080:	f002 fe7e 	bl	80a3d80 <__aeabi_ui2f>
 80a1084:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = _bits[2];
 80a1086:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 80a108a:	f002 fe79 	bl	80a3d80 <__aeabi_ui2f>
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
      word(_bits[2], _bits[3])) * 0.1;
 80a108e:	65a0      	str	r0, [r4, #88]	; 0x58
    break;
  }
  _convert = false;
 80a1090:	2300      	movs	r3, #0
 80a1092:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a1096:	bd10      	pop	{r4, pc}
 80a1098:	9999999a 	.word	0x9999999a
 80a109c:	3fb99999 	.word	0x3fb99999

080a10a0 <_ZN14PietteTech_DHT9acquiringEv>:
}

bool PietteTech_DHT::acquiring() {
  if (_state != ACQUIRED && _state != STOPPED)
 80a10a0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a10a4:	2b02      	cmp	r3, #2
 80a10a6:	d005      	beq.n	80a10b4 <_ZN14PietteTech_DHT9acquiringEv+0x14>
 80a10a8:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80a10ac:	3803      	subs	r0, #3
 80a10ae:	bf18      	it	ne
 80a10b0:	2001      	movne	r0, #1
 80a10b2:	4770      	bx	lr
    return true;
  return false;
 80a10b4:	2000      	movs	r0, #0
}
 80a10b6:	4770      	bx	lr

080a10b8 <_ZN14PietteTech_DHT14acquireAndWaitEm>:
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
}

int PietteTech_DHT::acquireAndWait(uint32_t timeout) {
 80a10b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10ba:	460d      	mov	r5, r1
 80a10bc:	4604      	mov	r4, r0
  acquire();
 80a10be:	f7ff ff25 	bl	80a0f0c <_ZN14PietteTech_DHT7acquireEv>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a10c2:	f000 f965 	bl	80a1390 <HAL_Timer_Get_Milli_Seconds>
 80a10c6:	4607      	mov	r7, r0
 80a10c8:	4e0c      	ldr	r6, [pc, #48]	; (80a10fc <_ZN14PietteTech_DHT14acquireAndWaitEm+0x44>)
  uint32_t start = millis();
  while (acquiring() && (timeout == 0 || ((millis() - start) < timeout))) Particle.process();
 80a10ca:	4620      	mov	r0, r4
 80a10cc:	f7ff ffe8 	bl	80a10a0 <_ZN14PietteTech_DHT9acquiringEv>
 80a10d0:	b158      	cbz	r0, 80a10ea <_ZN14PietteTech_DHT14acquireAndWaitEm+0x32>
 80a10d2:	b125      	cbz	r5, 80a10de <_ZN14PietteTech_DHT14acquireAndWaitEm+0x26>
 80a10d4:	f000 f95c 	bl	80a1390 <HAL_Timer_Get_Milli_Seconds>
 80a10d8:	1bc0      	subs	r0, r0, r7
 80a10da:	4285      	cmp	r5, r0
 80a10dc:	d905      	bls.n	80a10ea <_ZN14PietteTech_DHT14acquireAndWaitEm+0x32>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a10de:	f000 f957 	bl	80a1390 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a10e2:	6030      	str	r0, [r6, #0]
 80a10e4:	f000 fb02 	bl	80a16ec <spark_process>
 80a10e8:	e7ef      	b.n	80a10ca <_ZN14PietteTech_DHT14acquireAndWaitEm+0x12>
  if (acquiring())
 80a10ea:	4620      	mov	r0, r4
 80a10ec:	f7ff ffd8 	bl	80a10a0 <_ZN14PietteTech_DHT9acquiringEv>
 80a10f0:	b110      	cbz	r0, 80a10f8 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x40>
  {
    _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 80a10f2:	f06f 0302 	mvn.w	r3, #2
 80a10f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    return true;
  return false;
}

int PietteTech_DHT::getStatus() {
  return _status;
 80a10f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if (acquiring())
  {
    _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
  }
  return getStatus();
}
 80a10fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a10fc:	20000b7c 	.word	0x20000b7c

080a1100 <_ZN14PietteTech_DHT10getCelsiusEv>:

int PietteTech_DHT::getStatus() {
  return _status;
}

float PietteTech_DHT::getCelsius() {
 80a1100:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a1102:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29

int PietteTech_DHT::getStatus() {
  return _status;
}

float PietteTech_DHT::getCelsius() {
 80a1106:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a1108:	2b03      	cmp	r3, #3
 80a110a:	d103      	bne.n	80a1114 <_ZN14PietteTech_DHT10getCelsiusEv+0x14>
 80a110c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a110e:	f002 fe3b 	bl	80a3d88 <__aeabi_i2f>
 80a1112:	bd10      	pop	{r4, pc}
 80a1114:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a1118:	2b02      	cmp	r3, #2
 80a111a:	d106      	bne.n	80a112a <_ZN14PietteTech_DHT10getCelsiusEv+0x2a>
 80a111c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a1120:	b10b      	cbz	r3, 80a1126 <_ZN14PietteTech_DHT10getCelsiusEv+0x26>
 80a1122:	f7ff ff75 	bl	80a1010 <_ZN14PietteTech_DHT7convertEv>
  return _temp;
 80a1126:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a1128:	bd10      	pop	{r4, pc}
int PietteTech_DHT::getStatus() {
  return _status;
}

float PietteTech_DHT::getCelsius() {
  DHT_CHECK_STATE;
 80a112a:	4801      	ldr	r0, [pc, #4]	; (80a1130 <_ZN14PietteTech_DHT10getCelsiusEv+0x30>)
  return _temp;
}
 80a112c:	bd10      	pop	{r4, pc}
 80a112e:	bf00      	nop
 80a1130:	c0a00000 	.word	0xc0a00000

080a1134 <_ZN14PietteTech_DHT11getHumidityEv>:

float PietteTech_DHT::getHumidity() {
 80a1134:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a1136:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
float PietteTech_DHT::getCelsius() {
  DHT_CHECK_STATE;
  return _temp;
}

float PietteTech_DHT::getHumidity() {
 80a113a:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a113c:	2b03      	cmp	r3, #3
 80a113e:	d103      	bne.n	80a1148 <_ZN14PietteTech_DHT11getHumidityEv+0x14>
 80a1140:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a1142:	f002 fe21 	bl	80a3d88 <__aeabi_i2f>
 80a1146:	bd10      	pop	{r4, pc}
 80a1148:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a114c:	2b02      	cmp	r3, #2
 80a114e:	d106      	bne.n	80a115e <_ZN14PietteTech_DHT11getHumidityEv+0x2a>
 80a1150:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a1154:	b10b      	cbz	r3, 80a115a <_ZN14PietteTech_DHT11getHumidityEv+0x26>
 80a1156:	f7ff ff5b 	bl	80a1010 <_ZN14PietteTech_DHT7convertEv>
  return _hum;
 80a115a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80a115c:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
  return _temp;
}

float PietteTech_DHT::getHumidity() {
  DHT_CHECK_STATE;
 80a115e:	4801      	ldr	r0, [pc, #4]	; (80a1164 <_ZN14PietteTech_DHT11getHumidityEv+0x30>)
  return _hum;
}
 80a1160:	bd10      	pop	{r4, pc}
 80a1162:	bf00      	nop
 80a1164:	c0a00000 	.word	0xc0a00000

080a1168 <_GLOBAL__sub_I__Z4wordhh>:
 80a1168:	f000 b91a 	b.w	80a13a0 <HAL_Pin_Map>

080a116c <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
 80a116c:	f000 bb0e 	b.w	80a178c <delay>

080a1170 <_Z11BlynkMillisv>:
 80a1170:	f000 b90e 	b.w	80a1390 <HAL_Timer_Get_Milli_Seconds>

080a1174 <_GLOBAL__sub_I__Z10BlynkResetv>:
 80a1174:	f000 b914 	b.w	80a13a0 <HAL_Pin_Map>

080a1178 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
 80a1178:	4770      	bx	lr

080a117a <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
 80a117a:	4770      	bx	lr

080a117c <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
 80a117c:	4770      	bx	lr
	...

080a1180 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
 80a1180:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
 80a1182:	bf9a      	itte	ls
 80a1184:	4b02      	ldrls	r3, [pc, #8]	; (80a1190 <GetReadHandler+0x10>)
 80a1186:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
 80a118a:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
 80a118c:	4770      	bx	lr
 80a118e:	bf00      	nop
 80a1190:	080a477c 	.word	0x080a477c

080a1194 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
 80a1194:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
 80a1196:	bf9a      	itte	ls
 80a1198:	4b02      	ldrls	r3, [pc, #8]	; (80a11a4 <GetWriteHandler+0x10>)
 80a119a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
 80a119e:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
 80a11a0:	4770      	bx	lr
 80a11a2:	bf00      	nop
 80a11a4:	080a457c 	.word	0x080a457c

080a11a8 <_GLOBAL__sub_I_BlynkNoOpCbk>:
 80a11a8:	f000 b8fa 	b.w	80a13a0 <HAL_Pin_Map>

080a11ac <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
 80a11ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a11b0:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
{
}
 80a11b4:	4770      	bx	lr

080a11b6 <_ZN10BlynkTimer4initEv>:

void SimpleTimer::init() {
 80a11b6:	b570      	push	{r4, r5, r6, lr}
 80a11b8:	4605      	mov	r5, r0
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
 80a11ba:	f7ff ffd9 	bl	80a1170 <_Z11BlynkMillisv>
 80a11be:	4606      	mov	r6, r0
 80a11c0:	2400      	movs	r4, #0

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
        memset(&timer[i], 0, sizeof (timer_t));
 80a11c2:	1928      	adds	r0, r5, r4
 80a11c4:	2224      	movs	r2, #36	; 0x24
 80a11c6:	2100      	movs	r1, #0
 80a11c8:	f003 f807 	bl	80a41da <memset>
        timer[i].prev_millis = current_millis;
 80a11cc:	512e      	str	r6, [r5, r4]
 80a11ce:	3424      	adds	r4, #36	; 0x24
}

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
 80a11d0:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
 80a11d4:	d1f5      	bne.n	80a11c2 <_ZN10BlynkTimer4initEv+0xc>
        memset(&timer[i], 0, sizeof (timer_t));
        timer[i].prev_millis = current_millis;
    }

    numTimers = 0;
 80a11d6:	2300      	movs	r3, #0
 80a11d8:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
 80a11dc:	bd70      	pop	{r4, r5, r6, pc}

080a11de <_ZN10BlynkTimer17findFirstFreeSlotEv>:

// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
 80a11de:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
 80a11e2:	2b0f      	cmp	r3, #15
 80a11e4:	dc08      	bgt.n	80a11f8 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x1a>
 80a11e6:	2300      	movs	r3, #0
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].callback == NULL) {
 80a11e8:	2224      	movs	r2, #36	; 0x24
 80a11ea:	fb02 0103 	mla	r1, r2, r3, r0
 80a11ee:	6849      	ldr	r1, [r1, #4]
 80a11f0:	b129      	cbz	r1, 80a11fe <_ZN10BlynkTimer17findFirstFreeSlotEv+0x20>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
 80a11f2:	3301      	adds	r3, #1
 80a11f4:	2b10      	cmp	r3, #16
 80a11f6:	d1f8      	bne.n	80a11ea <_ZN10BlynkTimer17findFirstFreeSlotEv+0xc>
// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
        return -1;
 80a11f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a11fc:	4770      	bx	lr
 80a11fe:	4618      	mov	r0, r3
        }
    }

    // no free slots found
    return -1;
}
 80a1200:	4770      	bx	lr

080a1202 <_ZN10BlynkTimer10setupTimerEmPvS0_bj>:


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
 80a1202:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1206:	4698      	mov	r8, r3
    int freeTimer;

    if (numTimers < 0) {
 80a1208:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
    // no free slots found
    return -1;
}


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
 80a120c:	4605      	mov	r5, r0
    int freeTimer;

    if (numTimers < 0) {
 80a120e:	2b00      	cmp	r3, #0
    // no free slots found
    return -1;
}


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
 80a1210:	4689      	mov	r9, r1
 80a1212:	4617      	mov	r7, r2
    int freeTimer;

    if (numTimers < 0) {
 80a1214:	da01      	bge.n	80a121a <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x18>
        init();
 80a1216:	f7ff ffce 	bl	80a11b6 <_ZN10BlynkTimer4initEv>
    }

    freeTimer = findFirstFreeSlot();
 80a121a:	4628      	mov	r0, r5
 80a121c:	f7ff ffdf 	bl	80a11de <_ZN10BlynkTimer17findFirstFreeSlotEv>
    if (freeTimer < 0) {
 80a1220:	1e04      	subs	r4, r0, #0
 80a1222:	db1a      	blt.n	80a125a <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    if (f == NULL) {
 80a1224:	b1cf      	cbz	r7, 80a125a <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    timer[freeTimer].delay = d;
 80a1226:	2624      	movs	r6, #36	; 0x24
 80a1228:	4366      	muls	r6, r4
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
 80a122a:	f89d 2020 	ldrb.w	r2, [sp, #32]

    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
 80a122e:	19ab      	adds	r3, r5, r6
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
 80a1230:	731a      	strb	r2, [r3, #12]
    timer[freeTimer].maxNumRuns = n;
 80a1232:	9a09      	ldr	r2, [sp, #36]	; 0x24

    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
 80a1234:	f8c3 9010 	str.w	r9, [r3, #16]
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
 80a1238:	615a      	str	r2, [r3, #20]
    timer[freeTimer].enabled = true;
 80a123a:	2201      	movs	r2, #1
    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
    timer[freeTimer].callback = f;
 80a123c:	605f      	str	r7, [r3, #4]
    timer[freeTimer].param = p;
 80a123e:	f8c3 8008 	str.w	r8, [r3, #8]
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
 80a1242:	771a      	strb	r2, [r3, #28]
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
 80a1244:	f7ff ff94 	bl	80a1170 <_Z11BlynkMillisv>
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
    timer[freeTimer].prev_millis = elapsed();
 80a1248:	51a8      	str	r0, [r5, r6]

    numTimers++;
 80a124a:	f8d5 3240 	ldr.w	r3, [r5, #576]	; 0x240

    return freeTimer;
 80a124e:	4620      	mov	r0, r4
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
    timer[freeTimer].prev_millis = elapsed();

    numTimers++;
 80a1250:	3301      	adds	r3, #1
 80a1252:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240

    return freeTimer;
 80a1256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        init();
    }

    freeTimer = findFirstFreeSlot();
    if (freeTimer < 0) {
        return -1;
 80a125a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    timer[freeTimer].prev_millis = elapsed();

    numTimers++;

    return freeTimer;
}
 80a125e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a1262 <_ZN10BlynkTimer11setIntervalEmPFvvE>:

int SimpleTimer::setTimer(unsigned long d, timer_callback_p f, void* p, unsigned n) {
  return setupTimer(d, (void *)f, p, true, n);
}

int SimpleTimer::setInterval(unsigned long d, timer_callback f) {
 80a1262:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_FOREVER);
 80a1264:	2300      	movs	r3, #0
 80a1266:	9301      	str	r3, [sp, #4]
 80a1268:	9300      	str	r3, [sp, #0]
 80a126a:	f7ff ffca 	bl	80a1202 <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
 80a126e:	b003      	add	sp, #12
 80a1270:	f85d fb04 	ldr.w	pc, [sp], #4

080a1274 <_ZN10BlynkTimer11deleteTimerEj>:
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
    if (timerId >= MAX_TIMERS) {
 80a1274:	290f      	cmp	r1, #15
    }
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
 80a1276:	b538      	push	{r3, r4, r5, lr}
 80a1278:	4604      	mov	r4, r0
    if (timerId >= MAX_TIMERS) {
 80a127a:	d813      	bhi.n	80a12a4 <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
 80a127c:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
 80a1280:	b183      	cbz	r3, 80a12a4 <_ZN10BlynkTimer11deleteTimerEj+0x30>
 80a1282:	2224      	movs	r2, #36	; 0x24
 80a1284:	fb02 f501 	mul.w	r5, r2, r1
 80a1288:	4428      	add	r0, r5
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
 80a128a:	6843      	ldr	r3, [r0, #4]
 80a128c:	b153      	cbz	r3, 80a12a4 <_ZN10BlynkTimer11deleteTimerEj+0x30>
        memset(&timer[timerId], 0, sizeof (timer_t));
 80a128e:	2100      	movs	r1, #0
 80a1290:	f002 ffa3 	bl	80a41da <memset>
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
 80a1294:	f7ff ff6c 	bl	80a1170 <_Z11BlynkMillisv>

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
        memset(&timer[timerId], 0, sizeof (timer_t));
        timer[timerId].prev_millis = elapsed();
 80a1298:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
 80a129a:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
 80a129e:	3b01      	subs	r3, #1
 80a12a0:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
 80a12a4:	bd38      	pop	{r3, r4, r5, pc}

080a12a6 <_ZN10BlynkTimer3runEv>:

    numTimers = 0;
}


void SimpleTimer::run() {
 80a12a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a12aa:	4605      	mov	r5, r0
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
 80a12ac:	2601      	movs	r6, #1
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
 80a12ae:	f7ff ff5f 	bl	80a1170 <_Z11BlynkMillisv>
 80a12b2:	f505 7711 	add.w	r7, r5, #580	; 0x244
 80a12b6:	1d2b      	adds	r3, r5, #4
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
 80a12b8:	f04f 0e00 	mov.w	lr, #0
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
 80a12bc:	f04f 0c02 	mov.w	ip, #2
    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
 80a12c0:	681a      	ldr	r2, [r3, #0]
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
 80a12c2:	f8c3 e01c 	str.w	lr, [r3, #28]

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
 80a12c6:	b1e2      	cbz	r2, 80a1302 <_ZN10BlynkTimer3runEv+0x5c>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
 80a12c8:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80a12cc:	68dc      	ldr	r4, [r3, #12]
 80a12ce:	ebc8 0200 	rsb	r2, r8, r0
 80a12d2:	42a2      	cmp	r2, r4
 80a12d4:	d315      	bcc.n	80a1302 <_ZN10BlynkTimer3runEv+0x5c>

                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
                // update time
                timer[i].prev_millis += timer[i].delay * skipTimes;
 80a12d6:	fbb2 f1f4 	udiv	r1, r2, r4
 80a12da:	fb04 8201 	mla	r2, r4, r1, r8
 80a12de:	f843 2c04 	str.w	r2, [r3, #-4]

                // check if the timer callback has to be executed
                if (timer[i].enabled) {
 80a12e2:	7e1a      	ldrb	r2, [r3, #24]
 80a12e4:	b16a      	cbz	r2, 80a1302 <_ZN10BlynkTimer3runEv+0x5c>

                    // "run forever" timers must always be executed
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
 80a12e6:	6919      	ldr	r1, [r3, #16]
 80a12e8:	b909      	cbnz	r1, 80a12ee <_ZN10BlynkTimer3runEv+0x48>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
 80a12ea:	61de      	str	r6, [r3, #28]
 80a12ec:	e009      	b.n	80a1302 <_ZN10BlynkTimer3runEv+0x5c>
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
 80a12ee:	695a      	ldr	r2, [r3, #20]
 80a12f0:	4291      	cmp	r1, r2
 80a12f2:	d906      	bls.n	80a1302 <_ZN10BlynkTimer3runEv+0x5c>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;
 80a12f4:	3201      	adds	r2, #1

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
 80a12f6:	4291      	cmp	r1, r2
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
 80a12f8:	61de      	str	r6, [r3, #28]
                        timer[i].numRuns++;
 80a12fa:	615a      	str	r2, [r3, #20]

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
 80a12fc:	bf98      	it	ls
 80a12fe:	f8c3 c01c 	strls.w	ip, [r3, #28]
 80a1302:	3324      	adds	r3, #36	; 0x24
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
 80a1304:	42bb      	cmp	r3, r7
 80a1306:	d1db      	bne.n	80a12c0 <_ZN10BlynkTimer3runEv+0x1a>
 80a1308:	462c      	mov	r4, r5
 80a130a:	2600      	movs	r6, #0
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
 80a130c:	6a23      	ldr	r3, [r4, #32]
 80a130e:	b16b      	cbz	r3, 80a132c <_ZN10BlynkTimer3runEv+0x86>
            continue;

        if (timer[i].hasParam)
 80a1310:	7b22      	ldrb	r2, [r4, #12]
 80a1312:	6863      	ldr	r3, [r4, #4]
 80a1314:	b112      	cbz	r2, 80a131c <_ZN10BlynkTimer3runEv+0x76>
            (*(timer_callback_p)timer[i].callback)(timer[i].param);
 80a1316:	68a0      	ldr	r0, [r4, #8]
 80a1318:	4798      	blx	r3
 80a131a:	e000      	b.n	80a131e <_ZN10BlynkTimer3runEv+0x78>
        else
            (*(timer_callback)timer[i].callback)();
 80a131c:	4798      	blx	r3

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
 80a131e:	6a23      	ldr	r3, [r4, #32]
 80a1320:	2b02      	cmp	r3, #2
 80a1322:	d103      	bne.n	80a132c <_ZN10BlynkTimer3runEv+0x86>
            deleteTimer(i);
 80a1324:	4631      	mov	r1, r6
 80a1326:	4628      	mov	r0, r5
 80a1328:	f7ff ffa4 	bl	80a1274 <_ZN10BlynkTimer11deleteTimerEj>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
 80a132c:	3601      	adds	r6, #1
 80a132e:	2e10      	cmp	r6, #16
 80a1330:	f104 0424 	add.w	r4, r4, #36	; 0x24
 80a1334:	d1ea      	bne.n	80a130c <_ZN10BlynkTimer3runEv+0x66>
            (*(timer_callback)timer[i].callback)();

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
            deleteTimer(i);
    }
}
 80a1336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a133a <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
 80a133a:	f000 b831 	b.w	80a13a0 <HAL_Pin_Map>
	...

080a1340 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1340:	b508      	push	{r3, lr}
 80a1342:	4b02      	ldr	r3, [pc, #8]	; (80a134c <os_mutex_create+0xc>)
 80a1344:	681b      	ldr	r3, [r3, #0]
 80a1346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1348:	9301      	str	r3, [sp, #4]
 80a134a:	bd08      	pop	{r3, pc}
 80a134c:	080601d0 	.word	0x080601d0

080a1350 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a1350:	b508      	push	{r3, lr}
 80a1352:	4b02      	ldr	r3, [pc, #8]	; (80a135c <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a1354:	681b      	ldr	r3, [r3, #0]
 80a1356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1358:	9301      	str	r3, [sp, #4]
 80a135a:	bd08      	pop	{r3, pc}
 80a135c:	080601b8 	.word	0x080601b8

080a1360 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1360:	b508      	push	{r3, lr}
 80a1362:	4b02      	ldr	r3, [pc, #8]	; (80a136c <HAL_RNG_GetRandomNumber+0xc>)
 80a1364:	681b      	ldr	r3, [r3, #0]
 80a1366:	685b      	ldr	r3, [r3, #4]
 80a1368:	9301      	str	r3, [sp, #4]
 80a136a:	bd08      	pop	{r3, pc}
 80a136c:	0806019c 	.word	0x0806019c

080a1370 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1370:	b508      	push	{r3, lr}
 80a1372:	4b02      	ldr	r3, [pc, #8]	; (80a137c <HAL_Delay_Microseconds+0xc>)
 80a1374:	681b      	ldr	r3, [r3, #0]
 80a1376:	68db      	ldr	r3, [r3, #12]
 80a1378:	9301      	str	r3, [sp, #4]
 80a137a:	bd08      	pop	{r3, pc}
 80a137c:	0806019c 	.word	0x0806019c

080a1380 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1380:	b508      	push	{r3, lr}
 80a1382:	4b02      	ldr	r3, [pc, #8]	; (80a138c <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1384:	681b      	ldr	r3, [r3, #0]
 80a1386:	691b      	ldr	r3, [r3, #16]
 80a1388:	9301      	str	r3, [sp, #4]
 80a138a:	bd08      	pop	{r3, pc}
 80a138c:	0806019c 	.word	0x0806019c

080a1390 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1390:	b508      	push	{r3, lr}
 80a1392:	4b02      	ldr	r3, [pc, #8]	; (80a139c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1394:	681b      	ldr	r3, [r3, #0]
 80a1396:	695b      	ldr	r3, [r3, #20]
 80a1398:	9301      	str	r3, [sp, #4]
 80a139a:	bd08      	pop	{r3, pc}
 80a139c:	0806019c 	.word	0x0806019c

080a13a0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a13a0:	b508      	push	{r3, lr}
 80a13a2:	4b02      	ldr	r3, [pc, #8]	; (80a13ac <HAL_Pin_Map+0xc>)
 80a13a4:	681b      	ldr	r3, [r3, #0]
 80a13a6:	681b      	ldr	r3, [r3, #0]
 80a13a8:	9301      	str	r3, [sp, #4]
 80a13aa:	bd08      	pop	{r3, pc}
 80a13ac:	080601b0 	.word	0x080601b0

080a13b0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a13b0:	b508      	push	{r3, lr}
 80a13b2:	4b02      	ldr	r3, [pc, #8]	; (80a13bc <HAL_Validate_Pin_Function+0xc>)
 80a13b4:	681b      	ldr	r3, [r3, #0]
 80a13b6:	685b      	ldr	r3, [r3, #4]
 80a13b8:	9301      	str	r3, [sp, #4]
 80a13ba:	bd08      	pop	{r3, pc}
 80a13bc:	080601b0 	.word	0x080601b0

080a13c0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a13c0:	b508      	push	{r3, lr}
 80a13c2:	4b02      	ldr	r3, [pc, #8]	; (80a13cc <HAL_Pin_Mode+0xc>)
 80a13c4:	681b      	ldr	r3, [r3, #0]
 80a13c6:	689b      	ldr	r3, [r3, #8]
 80a13c8:	9301      	str	r3, [sp, #4]
 80a13ca:	bd08      	pop	{r3, pc}
 80a13cc:	080601b0 	.word	0x080601b0

080a13d0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a13d0:	b508      	push	{r3, lr}
 80a13d2:	4b02      	ldr	r3, [pc, #8]	; (80a13dc <HAL_Get_Pin_Mode+0xc>)
 80a13d4:	681b      	ldr	r3, [r3, #0]
 80a13d6:	68db      	ldr	r3, [r3, #12]
 80a13d8:	9301      	str	r3, [sp, #4]
 80a13da:	bd08      	pop	{r3, pc}
 80a13dc:	080601b0 	.word	0x080601b0

080a13e0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a13e0:	b508      	push	{r3, lr}
 80a13e2:	4b02      	ldr	r3, [pc, #8]	; (80a13ec <HAL_GPIO_Write+0xc>)
 80a13e4:	681b      	ldr	r3, [r3, #0]
 80a13e6:	691b      	ldr	r3, [r3, #16]
 80a13e8:	9301      	str	r3, [sp, #4]
 80a13ea:	bd08      	pop	{r3, pc}
 80a13ec:	080601b0 	.word	0x080601b0

080a13f0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a13f0:	b508      	push	{r3, lr}
 80a13f2:	4b02      	ldr	r3, [pc, #8]	; (80a13fc <HAL_GPIO_Read+0xc>)
 80a13f4:	681b      	ldr	r3, [r3, #0]
 80a13f6:	695b      	ldr	r3, [r3, #20]
 80a13f8:	9301      	str	r3, [sp, #4]
 80a13fa:	bd08      	pop	{r3, pc}
 80a13fc:	080601b0 	.word	0x080601b0

080a1400 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a1400:	b508      	push	{r3, lr}
 80a1402:	4b02      	ldr	r3, [pc, #8]	; (80a140c <HAL_Interrupts_Attach+0xc>)
 80a1404:	681b      	ldr	r3, [r3, #0]
 80a1406:	699b      	ldr	r3, [r3, #24]
 80a1408:	9301      	str	r3, [sp, #4]
 80a140a:	bd08      	pop	{r3, pc}
 80a140c:	080601b0 	.word	0x080601b0

080a1410 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a1410:	b508      	push	{r3, lr}
 80a1412:	4b02      	ldr	r3, [pc, #8]	; (80a141c <HAL_Interrupts_Detach+0xc>)
 80a1414:	681b      	ldr	r3, [r3, #0]
 80a1416:	69db      	ldr	r3, [r3, #28]
 80a1418:	9301      	str	r3, [sp, #4]
 80a141a:	bd08      	pop	{r3, pc}
 80a141c:	080601b0 	.word	0x080601b0

080a1420 <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a1420:	b508      	push	{r3, lr}
 80a1422:	4b02      	ldr	r3, [pc, #8]	; (80a142c <HAL_DAC_Write+0xc>)
 80a1424:	681b      	ldr	r3, [r3, #0]
 80a1426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1428:	9301      	str	r3, [sp, #4]
 80a142a:	bd08      	pop	{r3, pc}
 80a142c:	080601b0 	.word	0x080601b0

080a1430 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a1430:	b508      	push	{r3, lr}
 80a1432:	4b02      	ldr	r3, [pc, #8]	; (80a143c <HAL_ADC_Read+0xc>)
 80a1434:	681b      	ldr	r3, [r3, #0]
 80a1436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1438:	9301      	str	r3, [sp, #4]
 80a143a:	bd08      	pop	{r3, pc}
 80a143c:	080601b0 	.word	0x080601b0

080a1440 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 80a1440:	b508      	push	{r3, lr}
 80a1442:	4b02      	ldr	r3, [pc, #8]	; (80a144c <HAL_PWM_Write_Ext+0xc>)
 80a1444:	681b      	ldr	r3, [r3, #0]
 80a1446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a1448:	9301      	str	r3, [sp, #4]
 80a144a:	bd08      	pop	{r3, pc}
 80a144c:	080601b0 	.word	0x080601b0

080a1450 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1450:	b508      	push	{r3, lr}
 80a1452:	4b02      	ldr	r3, [pc, #8]	; (80a145c <HAL_I2C_Write_Data+0xc>)
 80a1454:	681b      	ldr	r3, [r3, #0]
 80a1456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1458:	9301      	str	r3, [sp, #4]
 80a145a:	bd08      	pop	{r3, pc}
 80a145c:	080601ac 	.word	0x080601ac

080a1460 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1460:	b508      	push	{r3, lr}
 80a1462:	4b02      	ldr	r3, [pc, #8]	; (80a146c <HAL_I2C_Available_Data+0xc>)
 80a1464:	681b      	ldr	r3, [r3, #0]
 80a1466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1468:	9301      	str	r3, [sp, #4]
 80a146a:	bd08      	pop	{r3, pc}
 80a146c:	080601ac 	.word	0x080601ac

080a1470 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1470:	b508      	push	{r3, lr}
 80a1472:	4b02      	ldr	r3, [pc, #8]	; (80a147c <HAL_I2C_Read_Data+0xc>)
 80a1474:	681b      	ldr	r3, [r3, #0]
 80a1476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1478:	9301      	str	r3, [sp, #4]
 80a147a:	bd08      	pop	{r3, pc}
 80a147c:	080601ac 	.word	0x080601ac

080a1480 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1480:	b508      	push	{r3, lr}
 80a1482:	4b02      	ldr	r3, [pc, #8]	; (80a148c <HAL_I2C_Peek_Data+0xc>)
 80a1484:	681b      	ldr	r3, [r3, #0]
 80a1486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1488:	9301      	str	r3, [sp, #4]
 80a148a:	bd08      	pop	{r3, pc}
 80a148c:	080601ac 	.word	0x080601ac

080a1490 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1490:	b508      	push	{r3, lr}
 80a1492:	4b02      	ldr	r3, [pc, #8]	; (80a149c <HAL_I2C_Flush_Data+0xc>)
 80a1494:	681b      	ldr	r3, [r3, #0]
 80a1496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1498:	9301      	str	r3, [sp, #4]
 80a149a:	bd08      	pop	{r3, pc}
 80a149c:	080601ac 	.word	0x080601ac

080a14a0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a14a0:	b508      	push	{r3, lr}
 80a14a2:	4b02      	ldr	r3, [pc, #8]	; (80a14ac <HAL_I2C_Is_Enabled+0xc>)
 80a14a4:	681b      	ldr	r3, [r3, #0]
 80a14a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a14a8:	9301      	str	r3, [sp, #4]
 80a14aa:	bd08      	pop	{r3, pc}
 80a14ac:	080601ac 	.word	0x080601ac

080a14b0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a14b0:	b508      	push	{r3, lr}
 80a14b2:	4b03      	ldr	r3, [pc, #12]	; (80a14c0 <HAL_I2C_Init+0x10>)
 80a14b4:	681b      	ldr	r3, [r3, #0]
 80a14b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a14ba:	9301      	str	r3, [sp, #4]
 80a14bc:	bd08      	pop	{r3, pc}
 80a14be:	0000      	.short	0x0000
 80a14c0:	080601ac 	.word	0x080601ac

080a14c4 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a14c4:	b508      	push	{r3, lr}
 80a14c6:	4b02      	ldr	r3, [pc, #8]	; (80a14d0 <socket_active_status+0xc>)
 80a14c8:	681b      	ldr	r3, [r3, #0]
 80a14ca:	681b      	ldr	r3, [r3, #0]
 80a14cc:	9301      	str	r3, [sp, #4]
 80a14ce:	bd08      	pop	{r3, pc}
 80a14d0:	080601bc 	.word	0x080601bc

080a14d4 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a14d4:	b508      	push	{r3, lr}
 80a14d6:	4b02      	ldr	r3, [pc, #8]	; (80a14e0 <socket_handle_valid+0xc>)
 80a14d8:	681b      	ldr	r3, [r3, #0]
 80a14da:	685b      	ldr	r3, [r3, #4]
 80a14dc:	9301      	str	r3, [sp, #4]
 80a14de:	bd08      	pop	{r3, pc}
 80a14e0:	080601bc 	.word	0x080601bc

080a14e4 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a14e4:	b508      	push	{r3, lr}
 80a14e6:	4b02      	ldr	r3, [pc, #8]	; (80a14f0 <socket_create+0xc>)
 80a14e8:	681b      	ldr	r3, [r3, #0]
 80a14ea:	689b      	ldr	r3, [r3, #8]
 80a14ec:	9301      	str	r3, [sp, #4]
 80a14ee:	bd08      	pop	{r3, pc}
 80a14f0:	080601bc 	.word	0x080601bc

080a14f4 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a14f4:	b508      	push	{r3, lr}
 80a14f6:	4b02      	ldr	r3, [pc, #8]	; (80a1500 <socket_connect+0xc>)
 80a14f8:	681b      	ldr	r3, [r3, #0]
 80a14fa:	68db      	ldr	r3, [r3, #12]
 80a14fc:	9301      	str	r3, [sp, #4]
 80a14fe:	bd08      	pop	{r3, pc}
 80a1500:	080601bc 	.word	0x080601bc

080a1504 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a1504:	b508      	push	{r3, lr}
 80a1506:	4b02      	ldr	r3, [pc, #8]	; (80a1510 <socket_receive+0xc>)
 80a1508:	681b      	ldr	r3, [r3, #0]
 80a150a:	691b      	ldr	r3, [r3, #16]
 80a150c:	9301      	str	r3, [sp, #4]
 80a150e:	bd08      	pop	{r3, pc}
 80a1510:	080601bc 	.word	0x080601bc

080a1514 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1514:	b508      	push	{r3, lr}
 80a1516:	4b02      	ldr	r3, [pc, #8]	; (80a1520 <socket_close+0xc>)
 80a1518:	681b      	ldr	r3, [r3, #0]
 80a151a:	6a1b      	ldr	r3, [r3, #32]
 80a151c:	9301      	str	r3, [sp, #4]
 80a151e:	bd08      	pop	{r3, pc}
 80a1520:	080601bc 	.word	0x080601bc

080a1524 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1524:	b508      	push	{r3, lr}
 80a1526:	4b02      	ldr	r3, [pc, #8]	; (80a1530 <socket_handle_invalid+0xc>)
 80a1528:	681b      	ldr	r3, [r3, #0]
 80a152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a152c:	9301      	str	r3, [sp, #4]
 80a152e:	bd08      	pop	{r3, pc}
 80a1530:	080601bc 	.word	0x080601bc

080a1534 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a1534:	b508      	push	{r3, lr}
 80a1536:	4b02      	ldr	r3, [pc, #8]	; (80a1540 <socket_send_ex+0xc>)
 80a1538:	681b      	ldr	r3, [r3, #0]
 80a153a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a153c:	9301      	str	r3, [sp, #4]
 80a153e:	bd08      	pop	{r3, pc}
 80a1540:	080601bc 	.word	0x080601bc

080a1544 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1544:	b508      	push	{r3, lr}
 80a1546:	4b02      	ldr	r3, [pc, #8]	; (80a1550 <HAL_SPI_Init+0xc>)
 80a1548:	681b      	ldr	r3, [r3, #0]
 80a154a:	69db      	ldr	r3, [r3, #28]
 80a154c:	9301      	str	r3, [sp, #4]
 80a154e:	bd08      	pop	{r3, pc}
 80a1550:	080601b4 	.word	0x080601b4

080a1554 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1554:	b508      	push	{r3, lr}
 80a1556:	4b02      	ldr	r3, [pc, #8]	; (80a1560 <HAL_SPI_Is_Enabled+0xc>)
 80a1558:	681b      	ldr	r3, [r3, #0]
 80a155a:	6a1b      	ldr	r3, [r3, #32]
 80a155c:	9301      	str	r3, [sp, #4]
 80a155e:	bd08      	pop	{r3, pc}
 80a1560:	080601b4 	.word	0x080601b4

080a1564 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1564:	b508      	push	{r3, lr}
 80a1566:	4b02      	ldr	r3, [pc, #8]	; (80a1570 <HAL_USART_Init+0xc>)
 80a1568:	681b      	ldr	r3, [r3, #0]
 80a156a:	699b      	ldr	r3, [r3, #24]
 80a156c:	9301      	str	r3, [sp, #4]
 80a156e:	bd08      	pop	{r3, pc}
 80a1570:	080601c4 	.word	0x080601c4

080a1574 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1574:	b508      	push	{r3, lr}
 80a1576:	4b02      	ldr	r3, [pc, #8]	; (80a1580 <HAL_USART_Write_Data+0xc>)
 80a1578:	681b      	ldr	r3, [r3, #0]
 80a157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a157c:	9301      	str	r3, [sp, #4]
 80a157e:	bd08      	pop	{r3, pc}
 80a1580:	080601c4 	.word	0x080601c4

080a1584 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1584:	b508      	push	{r3, lr}
 80a1586:	4b02      	ldr	r3, [pc, #8]	; (80a1590 <HAL_USART_Available_Data+0xc>)
 80a1588:	681b      	ldr	r3, [r3, #0]
 80a158a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a158c:	9301      	str	r3, [sp, #4]
 80a158e:	bd08      	pop	{r3, pc}
 80a1590:	080601c4 	.word	0x080601c4

080a1594 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1594:	b508      	push	{r3, lr}
 80a1596:	4b02      	ldr	r3, [pc, #8]	; (80a15a0 <HAL_USART_Read_Data+0xc>)
 80a1598:	681b      	ldr	r3, [r3, #0]
 80a159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a159c:	9301      	str	r3, [sp, #4]
 80a159e:	bd08      	pop	{r3, pc}
 80a15a0:	080601c4 	.word	0x080601c4

080a15a4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a15a4:	b508      	push	{r3, lr}
 80a15a6:	4b02      	ldr	r3, [pc, #8]	; (80a15b0 <HAL_USART_Peek_Data+0xc>)
 80a15a8:	681b      	ldr	r3, [r3, #0]
 80a15aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a15ac:	9301      	str	r3, [sp, #4]
 80a15ae:	bd08      	pop	{r3, pc}
 80a15b0:	080601c4 	.word	0x080601c4

080a15b4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a15b4:	b508      	push	{r3, lr}
 80a15b6:	4b02      	ldr	r3, [pc, #8]	; (80a15c0 <HAL_USART_Flush_Data+0xc>)
 80a15b8:	681b      	ldr	r3, [r3, #0]
 80a15ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a15bc:	9301      	str	r3, [sp, #4]
 80a15be:	bd08      	pop	{r3, pc}
 80a15c0:	080601c4 	.word	0x080601c4

080a15c4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a15c4:	b508      	push	{r3, lr}
 80a15c6:	4b02      	ldr	r3, [pc, #8]	; (80a15d0 <HAL_USART_Is_Enabled+0xc>)
 80a15c8:	681b      	ldr	r3, [r3, #0]
 80a15ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a15cc:	9301      	str	r3, [sp, #4]
 80a15ce:	bd08      	pop	{r3, pc}
 80a15d0:	080601c4 	.word	0x080601c4

080a15d4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a15d4:	b508      	push	{r3, lr}
 80a15d6:	4b02      	ldr	r3, [pc, #8]	; (80a15e0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a15d8:	681b      	ldr	r3, [r3, #0]
 80a15da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a15dc:	9301      	str	r3, [sp, #4]
 80a15de:	bd08      	pop	{r3, pc}
 80a15e0:	080601c4 	.word	0x080601c4

080a15e4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a15e4:	b508      	push	{r3, lr}
 80a15e6:	4b02      	ldr	r3, [pc, #8]	; (80a15f0 <HAL_USB_USART_Init+0xc>)
 80a15e8:	681b      	ldr	r3, [r3, #0]
 80a15ea:	681b      	ldr	r3, [r3, #0]
 80a15ec:	9301      	str	r3, [sp, #4]
 80a15ee:	bd08      	pop	{r3, pc}
 80a15f0:	080601d8 	.word	0x080601d8

080a15f4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a15f4:	b508      	push	{r3, lr}
 80a15f6:	4b02      	ldr	r3, [pc, #8]	; (80a1600 <HAL_USB_USART_Begin+0xc>)
 80a15f8:	681b      	ldr	r3, [r3, #0]
 80a15fa:	685b      	ldr	r3, [r3, #4]
 80a15fc:	9301      	str	r3, [sp, #4]
 80a15fe:	bd08      	pop	{r3, pc}
 80a1600:	080601d8 	.word	0x080601d8

080a1604 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1604:	b508      	push	{r3, lr}
 80a1606:	4b02      	ldr	r3, [pc, #8]	; (80a1610 <HAL_USB_USART_Available_Data+0xc>)
 80a1608:	681b      	ldr	r3, [r3, #0]
 80a160a:	691b      	ldr	r3, [r3, #16]
 80a160c:	9301      	str	r3, [sp, #4]
 80a160e:	bd08      	pop	{r3, pc}
 80a1610:	080601d8 	.word	0x080601d8

080a1614 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1614:	b508      	push	{r3, lr}
 80a1616:	4b02      	ldr	r3, [pc, #8]	; (80a1620 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1618:	681b      	ldr	r3, [r3, #0]
 80a161a:	695b      	ldr	r3, [r3, #20]
 80a161c:	9301      	str	r3, [sp, #4]
 80a161e:	bd08      	pop	{r3, pc}
 80a1620:	080601d8 	.word	0x080601d8

080a1624 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1624:	b508      	push	{r3, lr}
 80a1626:	4b02      	ldr	r3, [pc, #8]	; (80a1630 <HAL_USB_USART_Receive_Data+0xc>)
 80a1628:	681b      	ldr	r3, [r3, #0]
 80a162a:	699b      	ldr	r3, [r3, #24]
 80a162c:	9301      	str	r3, [sp, #4]
 80a162e:	bd08      	pop	{r3, pc}
 80a1630:	080601d8 	.word	0x080601d8

080a1634 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1634:	b508      	push	{r3, lr}
 80a1636:	4b02      	ldr	r3, [pc, #8]	; (80a1640 <HAL_USB_USART_Send_Data+0xc>)
 80a1638:	681b      	ldr	r3, [r3, #0]
 80a163a:	69db      	ldr	r3, [r3, #28]
 80a163c:	9301      	str	r3, [sp, #4]
 80a163e:	bd08      	pop	{r3, pc}
 80a1640:	080601d8 	.word	0x080601d8

080a1644 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1644:	b508      	push	{r3, lr}
 80a1646:	4b02      	ldr	r3, [pc, #8]	; (80a1650 <HAL_USB_USART_Flush_Data+0xc>)
 80a1648:	681b      	ldr	r3, [r3, #0]
 80a164a:	6a1b      	ldr	r3, [r3, #32]
 80a164c:	9301      	str	r3, [sp, #4]
 80a164e:	bd08      	pop	{r3, pc}
 80a1650:	080601d8 	.word	0x080601d8

080a1654 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, void(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a1654:	b508      	push	{r3, lr}
 80a1656:	4b02      	ldr	r3, [pc, #8]	; (80a1660 <HAL_NET_SetNetWatchDog+0xc>)
 80a1658:	681b      	ldr	r3, [r3, #0]
 80a165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a165c:	9301      	str	r3, [sp, #4]
 80a165e:	bd08      	pop	{r3, pc}
 80a1660:	080601c0 	.word	0x080601c0

080a1664 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1664:	b508      	push	{r3, lr}
 80a1666:	4b02      	ldr	r3, [pc, #8]	; (80a1670 <inet_gethostbyname+0xc>)
 80a1668:	681b      	ldr	r3, [r3, #0]
 80a166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a166c:	9301      	str	r3, [sp, #4]
 80a166e:	bd08      	pop	{r3, pc}
 80a1670:	080601c0 	.word	0x080601c0

080a1674 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a1674:	b508      	push	{r3, lr}
 80a1676:	4b02      	ldr	r3, [pc, #8]	; (80a1680 <log_message+0xc>)
 80a1678:	681b      	ldr	r3, [r3, #0]
 80a167a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a167c:	9301      	str	r3, [sp, #4]
 80a167e:	bd08      	pop	{r3, pc}
 80a1680:	080201a8 	.word	0x080201a8

080a1684 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1684:	b508      	push	{r3, lr}
 80a1686:	4b02      	ldr	r3, [pc, #8]	; (80a1690 <set_system_mode+0xc>)
 80a1688:	681b      	ldr	r3, [r3, #0]
 80a168a:	685b      	ldr	r3, [r3, #4]
 80a168c:	9301      	str	r3, [sp, #4]
 80a168e:	bd08      	pop	{r3, pc}
 80a1690:	080601a4 	.word	0x080601a4

080a1694 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1694:	b508      	push	{r3, lr}
 80a1696:	4b02      	ldr	r3, [pc, #8]	; (80a16a0 <system_delay_ms+0xc>)
 80a1698:	681b      	ldr	r3, [r3, #0]
 80a169a:	695b      	ldr	r3, [r3, #20]
 80a169c:	9301      	str	r3, [sp, #4]
 80a169e:	bd08      	pop	{r3, pc}
 80a16a0:	080601a4 	.word	0x080601a4

080a16a4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a16a4:	b508      	push	{r3, lr}
 80a16a6:	4b02      	ldr	r3, [pc, #8]	; (80a16b0 <application_thread_current+0xc>)
 80a16a8:	681b      	ldr	r3, [r3, #0]
 80a16aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a16ac:	9301      	str	r3, [sp, #4]
 80a16ae:	bd08      	pop	{r3, pc}
 80a16b0:	080601a4 	.word	0x080601a4

080a16b4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a16b4:	b508      	push	{r3, lr}
 80a16b6:	4b02      	ldr	r3, [pc, #8]	; (80a16c0 <application_thread_invoke+0xc>)
 80a16b8:	681b      	ldr	r3, [r3, #0]
 80a16ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a16bc:	9301      	str	r3, [sp, #4]
 80a16be:	bd08      	pop	{r3, pc}
 80a16c0:	080601a4 	.word	0x080601a4

080a16c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a16c4:	b508      	push	{r3, lr}
 80a16c6:	4b03      	ldr	r3, [pc, #12]	; (80a16d4 <system_ctrl_set_app_request_handler+0x10>)
 80a16c8:	681b      	ldr	r3, [r3, #0]
 80a16ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a16ce:	9301      	str	r3, [sp, #4]
 80a16d0:	bd08      	pop	{r3, pc}
 80a16d2:	0000      	.short	0x0000
 80a16d4:	080601a4 	.word	0x080601a4

080a16d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a16d8:	b508      	push	{r3, lr}
 80a16da:	4b03      	ldr	r3, [pc, #12]	; (80a16e8 <system_ctrl_set_result+0x10>)
 80a16dc:	681b      	ldr	r3, [r3, #0]
 80a16de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a16e2:	9301      	str	r3, [sp, #4]
 80a16e4:	bd08      	pop	{r3, pc}
 80a16e6:	0000      	.short	0x0000
 80a16e8:	080601a4 	.word	0x080601a4

080a16ec <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a16ec:	b508      	push	{r3, lr}
 80a16ee:	4b02      	ldr	r3, [pc, #8]	; (80a16f8 <spark_process+0xc>)
 80a16f0:	681b      	ldr	r3, [r3, #0]
 80a16f2:	689b      	ldr	r3, [r3, #8]
 80a16f4:	9301      	str	r3, [sp, #4]
 80a16f6:	bd08      	pop	{r3, pc}
 80a16f8:	080601cc 	.word	0x080601cc

080a16fc <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a16fc:	b508      	push	{r3, lr}
 80a16fe:	4b02      	ldr	r3, [pc, #8]	; (80a1708 <spark_send_event+0xc>)
 80a1700:	681b      	ldr	r3, [r3, #0]
 80a1702:	6a1b      	ldr	r3, [r3, #32]
 80a1704:	9301      	str	r3, [sp, #4]
 80a1706:	bd08      	pop	{r3, pc}
 80a1708:	080601cc 	.word	0x080601cc

080a170c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a170c:	b508      	push	{r3, lr}
 80a170e:	4b02      	ldr	r3, [pc, #8]	; (80a1718 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1710:	681b      	ldr	r3, [r3, #0]
 80a1712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1714:	9301      	str	r3, [sp, #4]
 80a1716:	bd08      	pop	{r3, pc}
 80a1718:	080601cc 	.word	0x080601cc

080a171c <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a171c:	b508      	push	{r3, lr}
 80a171e:	4b02      	ldr	r3, [pc, #8]	; (80a1728 <network_ready+0xc>)
 80a1720:	681b      	ldr	r3, [r3, #0]
 80a1722:	691b      	ldr	r3, [r3, #16]
 80a1724:	9301      	str	r3, [sp, #4]
 80a1726:	bd08      	pop	{r3, pc}
 80a1728:	080601c8 	.word	0x080601c8

080a172c <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a172c:	b508      	push	{r3, lr}
 80a172e:	4b02      	ldr	r3, [pc, #8]	; (80a1738 <malloc+0xc>)
 80a1730:	681b      	ldr	r3, [r3, #0]
 80a1732:	681b      	ldr	r3, [r3, #0]
 80a1734:	9301      	str	r3, [sp, #4]
 80a1736:	bd08      	pop	{r3, pc}
 80a1738:	080601a0 	.word	0x080601a0

080a173c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a173c:	b508      	push	{r3, lr}
 80a173e:	4b02      	ldr	r3, [pc, #8]	; (80a1748 <free+0xc>)
 80a1740:	681b      	ldr	r3, [r3, #0]
 80a1742:	685b      	ldr	r3, [r3, #4]
 80a1744:	9301      	str	r3, [sp, #4]
 80a1746:	bd08      	pop	{r3, pc}
 80a1748:	080601a0 	.word	0x080601a0

080a174c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a174c:	b508      	push	{r3, lr}
 80a174e:	4b02      	ldr	r3, [pc, #8]	; (80a1758 <realloc+0xc>)
 80a1750:	681b      	ldr	r3, [r3, #0]
 80a1752:	689b      	ldr	r3, [r3, #8]
 80a1754:	9301      	str	r3, [sp, #4]
 80a1756:	bd08      	pop	{r3, pc}
 80a1758:	080601a0 	.word	0x080601a0

080a175c <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a175c:	b508      	push	{r3, lr}
 80a175e:	4b02      	ldr	r3, [pc, #8]	; (80a1768 <snprintf+0xc>)
 80a1760:	681b      	ldr	r3, [r3, #0]
 80a1762:	69db      	ldr	r3, [r3, #28]
 80a1764:	9301      	str	r3, [sp, #4]
 80a1766:	bd08      	pop	{r3, pc}
 80a1768:	080601a0 	.word	0x080601a0

080a176c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a176c:	b508      	push	{r3, lr}
 80a176e:	4b02      	ldr	r3, [pc, #8]	; (80a1778 <abort+0xc>)
 80a1770:	681b      	ldr	r3, [r3, #0]
 80a1772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1774:	9301      	str	r3, [sp, #4]
 80a1776:	bd08      	pop	{r3, pc}
 80a1778:	080601a0 	.word	0x080601a0

080a177c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a177c:	b508      	push	{r3, lr}
 80a177e:	4b02      	ldr	r3, [pc, #8]	; (80a1788 <_malloc_r+0xc>)
 80a1780:	681b      	ldr	r3, [r3, #0]
 80a1782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1784:	9301      	str	r3, [sp, #4]
 80a1786:	bd08      	pop	{r3, pc}
 80a1788:	080601a0 	.word	0x080601a0

080a178c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a178c:	2100      	movs	r1, #0
 80a178e:	f7ff bf81 	b.w	80a1694 <system_delay_ms>

080a1792 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1792:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1794:	6883      	ldr	r3, [r0, #8]
 80a1796:	4604      	mov	r4, r0
 80a1798:	b90b      	cbnz	r3, 80a179e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a179a:	f001 fbf0 	bl	80a2f7e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a179e:	68c3      	ldr	r3, [r0, #12]
 80a17a0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a17a2:	68a3      	ldr	r3, [r4, #8]
 80a17a4:	b11b      	cbz	r3, 80a17ae <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a17a6:	2203      	movs	r2, #3
 80a17a8:	4621      	mov	r1, r4
 80a17aa:	4620      	mov	r0, r4
 80a17ac:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a17ae:	4620      	mov	r0, r4
}
 80a17b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a17b4:	f7fe bc73 	b.w	80a009e <_ZdlPv>

080a17b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a17b8:	4770      	bx	lr

080a17ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a17ba:	2000      	movs	r0, #0
 80a17bc:	4770      	bx	lr

080a17be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a17be:	b510      	push	{r4, lr}
 80a17c0:	4604      	mov	r4, r0
 80a17c2:	f7fe fc6c 	bl	80a009e <_ZdlPv>
 80a17c6:	4620      	mov	r0, r4
 80a17c8:	bd10      	pop	{r4, pc}

080a17ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a17ca:	b508      	push	{r3, lr}
      { delete this; }
 80a17cc:	b108      	cbz	r0, 80a17d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a17ce:	f7ff fff6 	bl	80a17be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a17d2:	bd08      	pop	{r3, pc}

080a17d4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a17d4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a17d6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a17d8:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a17da:	b113      	cbz	r3, 80a17e2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a17dc:	2203      	movs	r2, #3
 80a17de:	4601      	mov	r1, r0
 80a17e0:	4798      	blx	r3
    }
 80a17e2:	4620      	mov	r0, r4
 80a17e4:	bd10      	pop	{r4, pc}

080a17e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a17e6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a17e8:	68c4      	ldr	r4, [r0, #12]
 80a17ea:	b1d4      	cbz	r4, 80a1822 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a17ec:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a17ee:	2b02      	cmp	r3, #2
 80a17f0:	d102      	bne.n	80a17f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a17f2:	68e0      	ldr	r0, [r4, #12]
 80a17f4:	f7ff ffa2 	bl	80a173c <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a17f8:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a17fa:	b12d      	cbz	r5, 80a1808 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a17fc:	4628      	mov	r0, r5
 80a17fe:	f7ff ffe9 	bl	80a17d4 <_ZNSt14_Function_baseD1Ev>
 80a1802:	4628      	mov	r0, r5
 80a1804:	f7fe fc4b 	bl	80a009e <_ZdlPv>
 80a1808:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a180a:	b12d      	cbz	r5, 80a1818 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 80a180c:	4628      	mov	r0, r5
 80a180e:	f7ff ffe1 	bl	80a17d4 <_ZNSt14_Function_baseD1Ev>
 80a1812:	4628      	mov	r0, r5
 80a1814:	f7fe fc43 	bl	80a009e <_ZdlPv>
 80a1818:	4620      	mov	r0, r4
 80a181a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a181e:	f7fe bc3e 	b.w	80a009e <_ZdlPv>
 80a1822:	bd38      	pop	{r3, r4, r5, pc}

080a1824 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1824:	b513      	push	{r0, r1, r4, lr}
 80a1826:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1828:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a182c:	2300      	movs	r3, #0
 80a182e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1830:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1832:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1834:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1836:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1838:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a183a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a183c:	f7fe fca0 	bl	80a0180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1840:	4620      	mov	r0, r4
 80a1842:	b002      	add	sp, #8
 80a1844:	bd10      	pop	{r4, pc}

080a1846 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1846:	680b      	ldr	r3, [r1, #0]
 80a1848:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a184a:	b113      	cbz	r3, 80a1852 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a184c:	685a      	ldr	r2, [r3, #4]
 80a184e:	3201      	adds	r2, #1
 80a1850:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1852:	4770      	bx	lr

080a1854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1856:	460c      	mov	r4, r1
 80a1858:	4606      	mov	r6, r0
 80a185a:	460f      	mov	r7, r1
 80a185c:	f854 3b04 	ldr.w	r3, [r4], #4
 80a1860:	ad02      	add	r5, sp, #8
 80a1862:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1866:	4621      	mov	r1, r4
 80a1868:	a801      	add	r0, sp, #4
 80a186a:	f7ff ffec 	bl	80a1846 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a186e:	4629      	mov	r1, r5
 80a1870:	4630      	mov	r0, r6
 80a1872:	f7ff ffd7 	bl	80a1824 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1876:	a801      	add	r0, sp, #4
 80a1878:	f7fe fc82 	bl	80a0180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a187c:	4620      	mov	r0, r4
 80a187e:	f7fe fc7f 	bl	80a0180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1882:	4638      	mov	r0, r7
 80a1884:	f7fe fc0b 	bl	80a009e <_ZdlPv>
        return p;
    }
 80a1888:	4630      	mov	r0, r6
 80a188a:	b003      	add	sp, #12
 80a188c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a188e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a188e:	b513      	push	{r0, r1, r4, lr}
 80a1890:	460b      	mov	r3, r1
 80a1892:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1894:	c803      	ldmia	r0, {r0, r1}
 80a1896:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a189a:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a189e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a18a2:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a18a6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a18aa:	b002      	add	sp, #8
 80a18ac:	bd10      	pop	{r4, pc}

080a18ae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a18ae:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a18b0:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a18b2:	b90a      	cbnz	r2, 80a18b8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a18b4:	f001 fb63 	bl	80a2f7e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a18b8:	68c3      	ldr	r3, [r0, #12]
    }
 80a18ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a18be:	4718      	bx	r3

080a18c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a18c0:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a18c2:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a18c4:	f100 0110 	add.w	r1, r0, #16
 80a18c8:	f7ff fff1 	bl	80a18ae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a18cc:	bd08      	pop	{r3, pc}

080a18ce <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a18ce:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a18d0:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a18d2:	b90a      	cbnz	r2, 80a18d8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a18d4:	f001 fb53 	bl	80a2f7e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a18d8:	68c3      	ldr	r3, [r0, #12]
    }
 80a18da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a18de:	4718      	bx	r3

080a18e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a18e0:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a18e2:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a18e4:	f100 0110 	add.w	r1, r0, #16
 80a18e8:	f7ff fff1 	bl	80a18ce <_ZNKSt8functionIFvRKbEEclES1_>
 80a18ec:	bd08      	pop	{r3, pc}

080a18ee <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a18ee:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a18f0:	2300      	movs	r3, #0
 80a18f2:	6083      	str	r3, [r0, #8]
 80a18f4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a18f6:	4604      	mov	r4, r0
 80a18f8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a18fa:	b12b      	cbz	r3, 80a1908 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a18fc:	2202      	movs	r2, #2
 80a18fe:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1900:	68eb      	ldr	r3, [r5, #12]
 80a1902:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1904:	68ab      	ldr	r3, [r5, #8]
 80a1906:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1908:	4620      	mov	r0, r4
 80a190a:	bd38      	pop	{r3, r4, r5, pc}

080a190c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a190c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a1910:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1914:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1916:	f04f 0002 	mov.w	r0, #2
 80a191a:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a191c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1920:	808b      	strh	r3, [r1, #4]
 80a1922:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1924:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1926:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a192a:	600b      	str	r3, [r1, #0]
 80a192c:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a1930:	4299      	cmp	r1, r3
 80a1932:	d103      	bne.n	80a193c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a1934:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a1938:	2d00      	cmp	r5, #0
 80a193a:	d1f7      	bne.n	80a192c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a193c:	d002      	beq.n	80a1944 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a193e:	f88d 1000 	strb.w	r1, [sp]
 80a1942:	e06b      	b.n	80a1a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1944:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1948:	bf1c      	itt	ne
 80a194a:	60e7      	strne	r7, [r4, #12]
 80a194c:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a194e:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a1952:	bf18      	it	ne
 80a1954:	461f      	movne	r7, r3
 80a1956:	2301      	movs	r3, #1
 80a1958:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a195a:	f3bf 8f5f 	dmb	sy
 80a195e:	f104 0308 	add.w	r3, r4, #8
 80a1962:	2000      	movs	r0, #0
 80a1964:	e853 6f00 	ldrex	r6, [r3]
 80a1968:	e843 0200 	strex	r2, r0, [r3]
 80a196c:	2a00      	cmp	r2, #0
 80a196e:	d1f9      	bne.n	80a1964 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a1970:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1974:	2e00      	cmp	r6, #0
 80a1976:	d051      	beq.n	80a1a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1978:	f7ff fe94 	bl	80a16a4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a197c:	b120      	cbz	r0, 80a1988 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a197e:	4629      	mov	r1, r5
 80a1980:	4630      	mov	r0, r6
 80a1982:	f7ff ff94 	bl	80a18ae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1986:	e043      	b.n	80a1a10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1988:	4631      	mov	r1, r6
 80a198a:	4668      	mov	r0, sp
 80a198c:	f7ff ffaf 	bl	80a18ee <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1990:	68e0      	ldr	r0, [r4, #12]
 80a1992:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1996:	b108      	cbz	r0, 80a199c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a1998:	f002 fc5a 	bl	80a4250 <strdup>
 80a199c:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a199e:	2010      	movs	r0, #16
 80a19a0:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a19a4:	f7fe fb79 	bl	80a009a <_Znwj>
 80a19a8:	4605      	mov	r5, r0
 80a19aa:	b330      	cbz	r0, 80a19fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a19ac:	f04f 0800 	mov.w	r8, #0
 80a19b0:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a19b4:	2018      	movs	r0, #24
 80a19b6:	f7fe fb70 	bl	80a009a <_Znwj>
 80a19ba:	4604      	mov	r4, r0
 80a19bc:	b1c0      	cbz	r0, 80a19f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a19be:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a19c2:	4601      	mov	r1, r0
 80a19c4:	4668      	mov	r0, sp
 80a19c6:	f7ff ff62 	bl	80a188e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19ca:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a19cc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a19ce:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19d0:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a19d2:	9202      	str	r2, [sp, #8]
 80a19d4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a19d6:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a19d8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a19dc:	9203      	str	r2, [sp, #12]
 80a19de:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a19e0:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a19e4:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a19e8:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a19ea:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a19ee:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a19f0:	4b0d      	ldr	r3, [pc, #52]	; (80a1a28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a19f2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a19f4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a19f6:	4b0d      	ldr	r3, [pc, #52]	; (80a1a2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80a19f8:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a19fa:	9804      	ldr	r0, [sp, #16]
 80a19fc:	f7ff fe9e 	bl	80a173c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1a00:	4668      	mov	r0, sp
 80a1a02:	f7ff fee7 	bl	80a17d4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1a06:	2200      	movs	r2, #0
 80a1a08:	4629      	mov	r1, r5
 80a1a0a:	4809      	ldr	r0, [pc, #36]	; (80a1a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a1a0c:	f7ff fe52 	bl	80a16b4 <application_thread_invoke>
 80a1a10:	4630      	mov	r0, r6
 80a1a12:	f7ff fedf 	bl	80a17d4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1a16:	4630      	mov	r0, r6
 80a1a18:	f7fe fb41 	bl	80a009e <_ZdlPv>
 80a1a1c:	4638      	mov	r0, r7
 80a1a1e:	f7ff fe8d 	bl	80a173c <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a1a22:	b006      	add	sp, #24
 80a1a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1a28:	080a18c1 	.word	0x080a18c1
 80a1a2c:	080a1b1d 	.word	0x080a1b1d
 80a1a30:	080a1793 	.word	0x080a1793

080a1a34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1a38:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1a3a:	ad07      	add	r5, sp, #28
 80a1a3c:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1a40:	4606      	mov	r6, r0
 80a1a42:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1a44:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1a46:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1a48:	460f      	mov	r7, r1
 80a1a4a:	4690      	mov	r8, r2
 80a1a4c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1a50:	f8c5 b004 	str.w	fp, [r5, #4]
 80a1a54:	f8c5 b008 	str.w	fp, [r5, #8]
 80a1a58:	9307      	str	r3, [sp, #28]
 80a1a5a:	f7fe fb1e 	bl	80a009a <_Znwj>
 80a1a5e:	4604      	mov	r4, r0
 80a1a60:	b138      	cbz	r0, 80a1a72 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1a62:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1a66:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1a6a:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1a6e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1a72:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1a74:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1a76:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1a78:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1a7a:	f7fe fb0e 	bl	80a009a <_Znwj>
 80a1a7e:	b128      	cbz	r0, 80a1a8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1a80:	2301      	movs	r3, #1
 80a1a82:	6043      	str	r3, [r0, #4]
 80a1a84:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a1a86:	4b23      	ldr	r3, [pc, #140]	; (80a1b14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a1a88:	60c4      	str	r4, [r0, #12]
 80a1a8a:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1a8c:	4b22      	ldr	r3, [pc, #136]	; (80a1b18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1a8e:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1a90:	2008      	movs	r0, #8
 80a1a92:	9308      	str	r3, [sp, #32]
 80a1a94:	f7fe fb01 	bl	80a009a <_Znwj>
 80a1a98:	4604      	mov	r4, r0
 80a1a9a:	b128      	cbz	r0, 80a1aa8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1a9c:	9b03      	ldr	r3, [sp, #12]
 80a1a9e:	a904      	add	r1, sp, #16
 80a1aa0:	f840 3b04 	str.w	r3, [r0], #4
 80a1aa4:	f7ff fecf 	bl	80a1846 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1aa8:	9500      	str	r5, [sp, #0]
 80a1aaa:	fa5f f38a 	uxtb.w	r3, sl
 80a1aae:	464a      	mov	r2, r9
 80a1ab0:	4641      	mov	r1, r8
 80a1ab2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1ab4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1ab6:	f7ff fe21 	bl	80a16fc <spark_send_event>
 80a1aba:	b9b8      	cbnz	r0, 80a1aec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1abc:	9b03      	ldr	r3, [sp, #12]
 80a1abe:	785b      	ldrb	r3, [r3, #1]
 80a1ac0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1ac4:	b993      	cbnz	r3, 80a1aec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1ac6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1aca:	a905      	add	r1, sp, #20
 80a1acc:	a803      	add	r0, sp, #12
 80a1ace:	9205      	str	r2, [sp, #20]
 80a1ad0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1ad4:	f7ff ff1a 	bl	80a190c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1ad8:	9805      	ldr	r0, [sp, #20]
 80a1ada:	f7ff fe2f 	bl	80a173c <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1ade:	a805      	add	r0, sp, #20
 80a1ae0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1ae2:	f7ff feb7 	bl	80a1854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1ae6:	a806      	add	r0, sp, #24
 80a1ae8:	f7fe fb4a 	bl	80a0180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1aec:	9b03      	ldr	r3, [sp, #12]
 80a1aee:	a904      	add	r1, sp, #16
 80a1af0:	a806      	add	r0, sp, #24
 80a1af2:	9305      	str	r3, [sp, #20]
 80a1af4:	f7ff fea7 	bl	80a1846 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1af8:	a905      	add	r1, sp, #20
 80a1afa:	4630      	mov	r0, r6
 80a1afc:	f7ff fe92 	bl	80a1824 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1b00:	a806      	add	r0, sp, #24
 80a1b02:	f7fe fb3d 	bl	80a0180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1b06:	a804      	add	r0, sp, #16
 80a1b08:	f7fe fb3a 	bl	80a0180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a1b0c:	4630      	mov	r0, r6
 80a1b0e:	b00b      	add	sp, #44	; 0x2c
 80a1b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1b14:	080a4984 	.word	0x080a4984
 80a1b18:	080a1c85 	.word	0x080a1c85

080a1b1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b1c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b20:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b22:	d006      	beq.n	80a1b32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1b24:	2a03      	cmp	r2, #3
 80a1b26:	d017      	beq.n	80a1b58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1b28:	2a01      	cmp	r2, #1
 80a1b2a:	d120      	bne.n	80a1b6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1b2c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1b2e:	6003      	str	r3, [r0, #0]
	      break;
 80a1b30:	e01d      	b.n	80a1b6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b32:	2018      	movs	r0, #24
 80a1b34:	680e      	ldr	r6, [r1, #0]
 80a1b36:	f7fe fab0 	bl	80a009a <_Znwj>
 80a1b3a:	4605      	mov	r5, r0
 80a1b3c:	b150      	cbz	r0, 80a1b54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1b3e:	4631      	mov	r1, r6
 80a1b40:	f7ff fed5 	bl	80a18ee <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1b44:	6930      	ldr	r0, [r6, #16]
 80a1b46:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1b4a:	b108      	cbz	r0, 80a1b50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1b4c:	f002 fb80 	bl	80a4250 <strdup>
 80a1b50:	6128      	str	r0, [r5, #16]
 80a1b52:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b54:	6025      	str	r5, [r4, #0]
 80a1b56:	e00a      	b.n	80a1b6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b58:	6804      	ldr	r4, [r0, #0]
 80a1b5a:	b144      	cbz	r4, 80a1b6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1b5c:	6920      	ldr	r0, [r4, #16]
 80a1b5e:	f7ff fded 	bl	80a173c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1b62:	4620      	mov	r0, r4
 80a1b64:	f7ff fe36 	bl	80a17d4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b68:	4620      	mov	r0, r4
 80a1b6a:	f7fe fa98 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1b6e:	2000      	movs	r0, #0
 80a1b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1b72 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1b72:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1b74:	2300      	movs	r3, #0
 80a1b76:	6083      	str	r3, [r0, #8]
 80a1b78:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1b7a:	4604      	mov	r4, r0
 80a1b7c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1b7e:	b12b      	cbz	r3, 80a1b8c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1b80:	2202      	movs	r2, #2
 80a1b82:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1b84:	68eb      	ldr	r3, [r5, #12]
 80a1b86:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1b88:	68ab      	ldr	r3, [r5, #8]
 80a1b8a:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1b8c:	4620      	mov	r0, r4
 80a1b8e:	bd38      	pop	{r3, r4, r5, pc}

080a1b90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b90:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1b92:	b570      	push	{r4, r5, r6, lr}
 80a1b94:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b96:	d006      	beq.n	80a1ba6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1b98:	2a03      	cmp	r2, #3
 80a1b9a:	d011      	beq.n	80a1bc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1b9c:	2a01      	cmp	r2, #1
 80a1b9e:	d117      	bne.n	80a1bd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1ba0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1ba2:	6003      	str	r3, [r0, #0]
	      break;
 80a1ba4:	e014      	b.n	80a1bd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1ba6:	2014      	movs	r0, #20
 80a1ba8:	680e      	ldr	r6, [r1, #0]
 80a1baa:	f7fe fa76 	bl	80a009a <_Znwj>
 80a1bae:	4605      	mov	r5, r0
 80a1bb0:	b120      	cbz	r0, 80a1bbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1bb2:	4631      	mov	r1, r6
 80a1bb4:	f7ff ffdd 	bl	80a1b72 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1bb8:	7c33      	ldrb	r3, [r6, #16]
 80a1bba:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1bbc:	6025      	str	r5, [r4, #0]
 80a1bbe:	e007      	b.n	80a1bd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1bc0:	6804      	ldr	r4, [r0, #0]
 80a1bc2:	b12c      	cbz	r4, 80a1bd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1bc4:	4620      	mov	r0, r4
 80a1bc6:	f7ff fe05 	bl	80a17d4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1bca:	4620      	mov	r0, r4
 80a1bcc:	f7fe fa67 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1bd0:	2000      	movs	r0, #0
 80a1bd2:	bd70      	pop	{r4, r5, r6, pc}

080a1bd4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1bd6:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1bd8:	f3bf 8f5f 	dmb	sy
 80a1bdc:	b087      	sub	sp, #28
 80a1bde:	2300      	movs	r3, #0
 80a1be0:	e850 6f00 	ldrex	r6, [r0]
 80a1be4:	e840 3200 	strex	r2, r3, [r0]
 80a1be8:	2a00      	cmp	r2, #0
 80a1bea:	d1f9      	bne.n	80a1be0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1bec:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1bf0:	2e00      	cmp	r6, #0
 80a1bf2:	d03e      	beq.n	80a1c72 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1bf4:	4618      	mov	r0, r3
 80a1bf6:	f7ff fd55 	bl	80a16a4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1bfa:	4607      	mov	r7, r0
 80a1bfc:	b120      	cbz	r0, 80a1c08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1bfe:	4621      	mov	r1, r4
 80a1c00:	4630      	mov	r0, r6
 80a1c02:	f7ff fe64 	bl	80a18ce <_ZNKSt8functionIFvRKbEEclES1_>
 80a1c06:	e02e      	b.n	80a1c66 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1c08:	4631      	mov	r1, r6
 80a1c0a:	a801      	add	r0, sp, #4
 80a1c0c:	f7ff ffb1 	bl	80a1b72 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1c10:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1c12:	2010      	movs	r0, #16
 80a1c14:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1c18:	f7fe fa3f 	bl	80a009a <_Znwj>
 80a1c1c:	4605      	mov	r5, r0
 80a1c1e:	b1d0      	cbz	r0, 80a1c56 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1c20:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1c22:	2014      	movs	r0, #20
 80a1c24:	f7fe fa39 	bl	80a009a <_Znwj>
 80a1c28:	4604      	mov	r4, r0
 80a1c2a:	b178      	cbz	r0, 80a1c4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1c2c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1c2e:	4601      	mov	r1, r0
 80a1c30:	a801      	add	r0, sp, #4
 80a1c32:	f7ff fe2c 	bl	80a188e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1c36:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1c38:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c3a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1c3c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1c3e:	9203      	str	r2, [sp, #12]
 80a1c40:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c42:	60e3      	str	r3, [r4, #12]
 80a1c44:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1c48:	9204      	str	r2, [sp, #16]
 80a1c4a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1c4c:	4b0a      	ldr	r3, [pc, #40]	; (80a1c78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1c4e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1c50:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1c52:	4b0a      	ldr	r3, [pc, #40]	; (80a1c7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1c54:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1c56:	a801      	add	r0, sp, #4
 80a1c58:	f7ff fdbc 	bl	80a17d4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1c5c:	2200      	movs	r2, #0
 80a1c5e:	4629      	mov	r1, r5
 80a1c60:	4807      	ldr	r0, [pc, #28]	; (80a1c80 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1c62:	f7ff fd27 	bl	80a16b4 <application_thread_invoke>
 80a1c66:	4630      	mov	r0, r6
 80a1c68:	f7ff fdb4 	bl	80a17d4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1c6c:	4630      	mov	r0, r6
 80a1c6e:	f7fe fa16 	bl	80a009e <_ZdlPv>
        }
    }
 80a1c72:	b007      	add	sp, #28
 80a1c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1c76:	bf00      	nop
 80a1c78:	080a18e1 	.word	0x080a18e1
 80a1c7c:	080a1b91 	.word	0x080a1b91
 80a1c80:	080a1793 	.word	0x080a1793

080a1c84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1c84:	b530      	push	{r4, r5, lr}
 80a1c86:	4604      	mov	r4, r0
 80a1c88:	b085      	sub	sp, #20
 80a1c8a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1c8c:	4668      	mov	r0, sp
 80a1c8e:	4611      	mov	r1, r2
 80a1c90:	f7ff fde0 	bl	80a1854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1c94:	b17c      	cbz	r4, 80a1cb6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1c96:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1c98:	4628      	mov	r0, r5
 80a1c9a:	b10d      	cbz	r5, 80a1ca0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1c9c:	f002 fad8 	bl	80a4250 <strdup>
 80a1ca0:	9002      	str	r0, [sp, #8]
 80a1ca2:	a902      	add	r1, sp, #8
 80a1ca4:	4668      	mov	r0, sp
 80a1ca6:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1caa:	f7ff fe2f 	bl	80a190c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1cae:	9802      	ldr	r0, [sp, #8]
 80a1cb0:	f7ff fd44 	bl	80a173c <free>
 80a1cb4:	e01d      	b.n	80a1cf2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1cb6:	f04f 0201 	mov.w	r2, #1
 80a1cba:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1cbc:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1cc0:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1cc4:	42a3      	cmp	r3, r4
 80a1cc6:	d103      	bne.n	80a1cd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1cc8:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1ccc:	2900      	cmp	r1, #0
 80a1cce:	d1f7      	bne.n	80a1cc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1cd0:	d002      	beq.n	80a1cd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1cd2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1cd6:	e00c      	b.n	80a1cf2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1cd8:	f110 010c 	adds.w	r1, r0, #12
 80a1cdc:	f04f 0301 	mov.w	r3, #1
 80a1ce0:	bf18      	it	ne
 80a1ce2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1ce4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1ce8:	3004      	adds	r0, #4
 80a1cea:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1cee:	f7ff ff71 	bl	80a1bd4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a1cf2:	a801      	add	r0, sp, #4
 80a1cf4:	f7fe fa44 	bl	80a0180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1cf8:	b005      	add	sp, #20
 80a1cfa:	bd30      	pop	{r4, r5, pc}

080a1cfc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1cfc:	4770      	bx	lr

080a1cfe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1d00:	4606      	mov	r6, r0
 80a1d02:	4615      	mov	r5, r2
 80a1d04:	460c      	mov	r4, r1
 80a1d06:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1d08:	42bc      	cmp	r4, r7
 80a1d0a:	d006      	beq.n	80a1d1a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1d0c:	6833      	ldr	r3, [r6, #0]
 80a1d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1d12:	689b      	ldr	r3, [r3, #8]
 80a1d14:	4630      	mov	r0, r6
 80a1d16:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1d18:	e7f6      	b.n	80a1d08 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1d1a:	4628      	mov	r0, r5
 80a1d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1d1e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1d1e:	2200      	movs	r2, #0
 80a1d20:	7c00      	ldrb	r0, [r0, #16]
 80a1d22:	f7ff bb95 	b.w	80a1450 <HAL_I2C_Write_Data>

080a1d26 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1d26:	2100      	movs	r1, #0
 80a1d28:	7c00      	ldrb	r0, [r0, #16]
 80a1d2a:	f7ff bb99 	b.w	80a1460 <HAL_I2C_Available_Data>

080a1d2e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1d2e:	2100      	movs	r1, #0
 80a1d30:	7c00      	ldrb	r0, [r0, #16]
 80a1d32:	f7ff bb9d 	b.w	80a1470 <HAL_I2C_Read_Data>

080a1d36 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1d36:	2100      	movs	r1, #0
 80a1d38:	7c00      	ldrb	r0, [r0, #16]
 80a1d3a:	f7ff bba1 	b.w	80a1480 <HAL_I2C_Peek_Data>

080a1d3e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1d3e:	2100      	movs	r1, #0
 80a1d40:	7c00      	ldrb	r0, [r0, #16]
 80a1d42:	f7ff bba5 	b.w	80a1490 <HAL_I2C_Flush_Data>

080a1d46 <_ZN7TwoWireD0Ev>:
 80a1d46:	b510      	push	{r4, lr}
 80a1d48:	4604      	mov	r4, r0
 80a1d4a:	f7fe f9a8 	bl	80a009e <_ZdlPv>
 80a1d4e:	4620      	mov	r0, r4
 80a1d50:	bd10      	pop	{r4, pc}
	...

080a1d54 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1d54:	b510      	push	{r4, lr}
 80a1d56:	4604      	mov	r4, r0
 80a1d58:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1d5e:	60a3      	str	r3, [r4, #8]
 80a1d60:	4b04      	ldr	r3, [pc, #16]	; (80a1d74 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1d62:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1d64:	7420      	strb	r0, [r4, #16]
 80a1d66:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1d68:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1d6a:	f7ff fba1 	bl	80a14b0 <HAL_I2C_Init>

}
 80a1d6e:	4620      	mov	r0, r4
 80a1d70:	bd10      	pop	{r4, pc}
 80a1d72:	bf00      	nop
 80a1d74:	080a49a0 	.word	0x080a49a0

080a1d78 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1d78:	2100      	movs	r1, #0
 80a1d7a:	7c00      	ldrb	r0, [r0, #16]
 80a1d7c:	f7ff bb90 	b.w	80a14a0 <HAL_I2C_Is_Enabled>

080a1d80 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1d80:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 80a1d82:	b510      	push	{r4, lr}
 80a1d84:	b90a      	cbnz	r2, 80a1d8a <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80a1d86:	f001 f8fa 	bl	80a2f7e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1d8a:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 80a1d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1d90:	4718      	bx	r3
	...

080a1d94 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void detachInterrupt(uint16_t pin)
{
 80a1d94:	b570      	push	{r4, r5, r6, lr}
 80a1d96:	4606      	mov	r6, r0
#if Wiring_Cellular == 1
    /* safety check that prevents users from detaching an interrupt from
     * BATT_INT_PC13 for power management which is shared with D7 */
    if (pin == D7) return;
#endif
    HAL_Interrupts_Detach(pin);
 80a1d98:	f7ff fb3a 	bl	80a1410 <HAL_Interrupts_Detach>
    delete handlers[pin];
 80a1d9c:	4b07      	ldr	r3, [pc, #28]	; (80a1dbc <_Z15detachInterruptt+0x28>)
 80a1d9e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 80a1da2:	461c      	mov	r4, r3
 80a1da4:	b12d      	cbz	r5, 80a1db2 <_Z15detachInterruptt+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1da6:	4628      	mov	r0, r5
 80a1da8:	f7ff fd14 	bl	80a17d4 <_ZNSt14_Function_baseD1Ev>
 80a1dac:	4628      	mov	r0, r5
 80a1dae:	f7fe f976 	bl	80a009e <_ZdlPv>
    handlers[pin] = NULL;
 80a1db2:	2300      	movs	r3, #0
 80a1db4:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
 80a1db8:	bd70      	pop	{r4, r5, r6, pc}
 80a1dba:	bf00      	nop
 80a1dbc:	20000694 	.word	0x20000694

080a1dc0 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1dc0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1dc2:	2300      	movs	r3, #0
 80a1dc4:	6083      	str	r3, [r0, #8]
 80a1dc6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1dc8:	4604      	mov	r4, r0
 80a1dca:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1dcc:	b12b      	cbz	r3, 80a1dda <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1dce:	2202      	movs	r2, #2
 80a1dd0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1dd2:	68eb      	ldr	r3, [r5, #12]
 80a1dd4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1dd6:	68ab      	ldr	r3, [r5, #8]
 80a1dd8:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1dda:	4620      	mov	r0, r4
 80a1ddc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1de0 <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a1de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 80a1de2:	4b0c      	ldr	r3, [pc, #48]	; (80a1e14 <_Z16allocate_handlertRSt8functionIFvvEE+0x34>)
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a1de4:	4606      	mov	r6, r0
    delete handlers[pin];
 80a1de6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a1dea:	460f      	mov	r7, r1
 80a1dec:	461c      	mov	r4, r3
    delete handlers[pin];
 80a1dee:	b12d      	cbz	r5, 80a1dfc <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1df0:	4628      	mov	r0, r5
 80a1df2:	f7ff fcef 	bl	80a17d4 <_ZNSt14_Function_baseD1Ev>
 80a1df6:	4628      	mov	r0, r5
 80a1df8:	f7fe f951 	bl	80a009e <_ZdlPv>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 80a1dfc:	2010      	movs	r0, #16
 80a1dfe:	f7fe f94c 	bl	80a009a <_Znwj>
 80a1e02:	4605      	mov	r5, r0
 80a1e04:	b110      	cbz	r0, 80a1e0c <_Z16allocate_handlertRSt8functionIFvvEE+0x2c>
 80a1e06:	4639      	mov	r1, r7
 80a1e08:	f7ff ffda 	bl	80a1dc0 <_ZNSt8functionIFvvEEC1ERKS1_>
 80a1e0c:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 80a1e10:	4628      	mov	r0, r5
 80a1e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1e14:	20000694 	.word	0x20000694

080a1e18 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a1e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1e1a:	460c      	mov	r4, r1
 80a1e1c:	4605      	mov	r5, r0
 80a1e1e:	b085      	sub	sp, #20
 80a1e20:	4617      	mov	r7, r2
 80a1e22:	461e      	mov	r6, r3
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a1e24:	f7ff faf4 	bl	80a1410 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 80a1e28:	4621      	mov	r1, r4
 80a1e2a:	4628      	mov	r0, r5
 80a1e2c:	f7ff ffd8 	bl	80a1de0 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 80a1e30:	4604      	mov	r4, r0
 80a1e32:	b1b8      	cbz	r0, 80a1e64 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x4c>
        HAL_InterruptExtraConfiguration extra = {0};
 80a1e34:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1e36:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a1e38:	428e      	cmp	r6, r1
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
 80a1e3a:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1e3c:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a1e40:	bfb4      	ite	lt
 80a1e42:	460b      	movlt	r3, r1
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1e44:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1e48:	4602      	mov	r2, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1e4a:	bfa4      	itt	ge
 80a1e4c:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a1e50:	ab03      	addge	r3, sp, #12
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1e52:	9300      	str	r3, [sp, #0]
 80a1e54:	4906      	ldr	r1, [pc, #24]	; (80a1e70 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>)
 80a1e56:	463b      	mov	r3, r7
 80a1e58:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a1e5a:	bfa8      	it	ge
 80a1e5c:	f88d 600d 	strbge.w	r6, [sp, #13]
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1e60:	f7ff face 	bl	80a1400 <HAL_Interrupts_Attach>
    }
    return handler!=NULL;
}
 80a1e64:	1c20      	adds	r0, r4, #0
 80a1e66:	bf18      	it	ne
 80a1e68:	2001      	movne	r0, #1
 80a1e6a:	b005      	add	sp, #20
 80a1e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1e6e:	bf00      	nop
 80a1e70:	080a1d81 	.word	0x080a1d81

080a1e74 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1e74:	4770      	bx	lr

080a1e76 <_ZN9IPAddressD0Ev>:
 80a1e76:	b510      	push	{r4, lr}
 80a1e78:	4604      	mov	r4, r0
 80a1e7a:	f7fe f910 	bl	80a009e <_ZdlPv>
 80a1e7e:	4620      	mov	r0, r4
 80a1e80:	bd10      	pop	{r4, pc}

080a1e82 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e84:	460f      	mov	r7, r1
 80a1e86:	f100 0608 	add.w	r6, r0, #8
 80a1e8a:	1d05      	adds	r5, r0, #4
 80a1e8c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1e8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1e92:	220a      	movs	r2, #10
 80a1e94:	4638      	mov	r0, r7
 80a1e96:	f000 f8aa 	bl	80a1fee <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1e9a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1e9c:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1e9e:	d007      	beq.n	80a1eb0 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1ea0:	2c00      	cmp	r4, #0
 80a1ea2:	d0f4      	beq.n	80a1e8e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1ea4:	212e      	movs	r1, #46	; 0x2e
 80a1ea6:	4638      	mov	r0, r7
 80a1ea8:	f000 f85e 	bl	80a1f68 <_ZN5Print5printEc>
 80a1eac:	4404      	add	r4, r0
 80a1eae:	e7ee      	b.n	80a1e8e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1eb0:	4620      	mov	r0, r4
 80a1eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1eb4 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 80a1eb4:	b510      	push	{r4, lr}
 80a1eb6:	4604      	mov	r4, r0
 80a1eb8:	4b04      	ldr	r3, [pc, #16]	; (80a1ecc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1eba:	2211      	movs	r2, #17
 80a1ebc:	f840 3b04 	str.w	r3, [r0], #4
 80a1ec0:	2100      	movs	r1, #0
 80a1ec2:	f002 f98a 	bl	80a41da <memset>
{
    clear();
}
 80a1ec6:	4620      	mov	r0, r4
 80a1ec8:	bd10      	pop	{r4, pc}
 80a1eca:	bf00      	nop
 80a1ecc:	080a49c8 	.word	0x080a49c8

080a1ed0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1ed0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1ed2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1ed6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1eda:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1ede:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1ee2:	2304      	movs	r3, #4
 80a1ee4:	6041      	str	r1, [r0, #4]
 80a1ee6:	7503      	strb	r3, [r0, #20]
 80a1ee8:	bd10      	pop	{r4, pc}
	...

080a1eec <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1eee:	4d04      	ldr	r5, [pc, #16]	; (80a1f00 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1ef0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1ef2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1ef6:	9500      	str	r5, [sp, #0]
 80a1ef8:	f7ff ffea 	bl	80a1ed0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1efc:	b003      	add	sp, #12
 80a1efe:	bd30      	pop	{r4, r5, pc}
 80a1f00:	080a49c8 	.word	0x080a49c8

080a1f04 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1f04:	4a01      	ldr	r2, [pc, #4]	; (80a1f0c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1f06:	4b02      	ldr	r3, [pc, #8]	; (80a1f10 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1f08:	601a      	str	r2, [r3, #0]
 80a1f0a:	4770      	bx	lr
 80a1f0c:	080a4a8a 	.word	0x080a4a8a
 80a1f10:	200006f4 	.word	0x200006f4

080a1f14 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f16:	4606      	mov	r6, r0
 80a1f18:	460d      	mov	r5, r1
 80a1f1a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1f1c:	2400      	movs	r4, #0
  while (size--) {
 80a1f1e:	42bd      	cmp	r5, r7
 80a1f20:	d00c      	beq.n	80a1f3c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1f22:	6833      	ldr	r3, [r6, #0]
 80a1f24:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1f28:	689b      	ldr	r3, [r3, #8]
 80a1f2a:	4630      	mov	r0, r6
 80a1f2c:	4798      	blx	r3
     if (chunk>=0)
 80a1f2e:	2800      	cmp	r0, #0
 80a1f30:	db01      	blt.n	80a1f36 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1f32:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1f34:	e7f3      	b.n	80a1f1e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1f36:	2c00      	cmp	r4, #0
 80a1f38:	bf08      	it	eq
 80a1f3a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1f3c:	4620      	mov	r0, r4
 80a1f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1f40 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1f40:	b570      	push	{r4, r5, r6, lr}
 80a1f42:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1f44:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1f46:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1f48:	b149      	cbz	r1, 80a1f5e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1f4a:	f002 f99c 	bl	80a4286 <strlen>
 80a1f4e:	682b      	ldr	r3, [r5, #0]
 80a1f50:	4602      	mov	r2, r0
 80a1f52:	4621      	mov	r1, r4
 80a1f54:	4628      	mov	r0, r5
    }
 80a1f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1f5a:	68db      	ldr	r3, [r3, #12]
 80a1f5c:	4718      	bx	r3
    }
 80a1f5e:	bd70      	pop	{r4, r5, r6, pc}

080a1f60 <_ZN5Print5printEPKc>:
 80a1f60:	b508      	push	{r3, lr}
 80a1f62:	f7ff ffed 	bl	80a1f40 <_ZN5Print5writeEPKc>
 80a1f66:	bd08      	pop	{r3, pc}

080a1f68 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1f68:	6803      	ldr	r3, [r0, #0]
 80a1f6a:	689b      	ldr	r3, [r3, #8]
 80a1f6c:	4718      	bx	r3

080a1f6e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1f6e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1f70:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1f72:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1f74:	f7ff fff8 	bl	80a1f68 <_ZN5Print5printEc>
  n += print('\n');
 80a1f78:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1f7a:	4604      	mov	r4, r0
  n += print('\n');
 80a1f7c:	4628      	mov	r0, r5
 80a1f7e:	f7ff fff3 	bl	80a1f68 <_ZN5Print5printEc>
  return n;
}
 80a1f82:	4420      	add	r0, r4
 80a1f84:	bd38      	pop	{r3, r4, r5, pc}

080a1f86 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1f86:	b538      	push	{r3, r4, r5, lr}
 80a1f88:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1f8a:	f7ff ffd9 	bl	80a1f40 <_ZN5Print5writeEPKc>
 80a1f8e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1f90:	4628      	mov	r0, r5
 80a1f92:	f7ff ffec 	bl	80a1f6e <_ZN5Print7printlnEv>
  return n;
}
 80a1f96:	4420      	add	r0, r4
 80a1f98:	bd38      	pop	{r3, r4, r5, pc}

080a1f9a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1f9a:	2a01      	cmp	r2, #1
 80a1f9c:	bf98      	it	ls
 80a1f9e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1fa0:	b530      	push	{r4, r5, lr}
 80a1fa2:	460b      	mov	r3, r1
 80a1fa4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1fa6:	2100      	movs	r1, #0
 80a1fa8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1fac:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1fb0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1fb4:	fb05 3312 	mls	r3, r5, r2, r3
 80a1fb8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1fba:	2b09      	cmp	r3, #9
 80a1fbc:	bf94      	ite	ls
 80a1fbe:	3330      	addls	r3, #48	; 0x30
 80a1fc0:	3337      	addhi	r3, #55	; 0x37
 80a1fc2:	b2db      	uxtb	r3, r3
 80a1fc4:	4621      	mov	r1, r4
 80a1fc6:	f804 3901 	strb.w	r3, [r4], #-1
 80a1fca:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1fcc:	2d00      	cmp	r5, #0
 80a1fce:	d1ef      	bne.n	80a1fb0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1fd0:	f7ff ffb6 	bl	80a1f40 <_ZN5Print5writeEPKc>
}
 80a1fd4:	b00b      	add	sp, #44	; 0x2c
 80a1fd6:	bd30      	pop	{r4, r5, pc}

080a1fd8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1fd8:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1fda:	b922      	cbnz	r2, 80a1fe6 <_ZN5Print5printEmi+0xe>
 80a1fdc:	6803      	ldr	r3, [r0, #0]
 80a1fde:	b2c9      	uxtb	r1, r1
 80a1fe0:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1fe2:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1fe4:	4718      	bx	r3
  else return printNumber(n, base);
 80a1fe6:	b2d2      	uxtb	r2, r2
}
 80a1fe8:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1fea:	f7ff bfd6 	b.w	80a1f9a <_ZN5Print11printNumberEmh>

080a1fee <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1fee:	f7ff bff3 	b.w	80a1fd8 <_ZN5Print5printEmi>

080a1ff2 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a1ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1ff6:	4607      	mov	r7, r0
 80a1ff8:	460e      	mov	r6, r1
  if (base == 0) {
 80a1ffa:	4615      	mov	r5, r2
 80a1ffc:	b92a      	cbnz	r2, 80a200a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a2002:	6803      	ldr	r3, [r0, #0]
 80a2004:	b2c9      	uxtb	r1, r1
 80a2006:	689b      	ldr	r3, [r3, #8]
 80a2008:	4718      	bx	r3
  } else if (base == 10) {
 80a200a:	2a0a      	cmp	r2, #10
 80a200c:	d102      	bne.n	80a2014 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a200e:	2900      	cmp	r1, #0
 80a2010:	da01      	bge.n	80a2016 <_ZN5Print5printEli+0x24>
 80a2012:	e004      	b.n	80a201e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a2014:	b2d2      	uxtb	r2, r2
  }
}
 80a2016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a201a:	f7ff bfbe 	b.w	80a1f9a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a201e:	212d      	movs	r1, #45	; 0x2d
 80a2020:	f7ff ffa2 	bl	80a1f68 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a2024:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a2026:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a2028:	4271      	negs	r1, r6
 80a202a:	4638      	mov	r0, r7
 80a202c:	f7ff ffb5 	bl	80a1f9a <_ZN5Print11printNumberEmh>
 80a2030:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a2032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a2038 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a203c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a203e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2040:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2042:	4617      	mov	r7, r2
 80a2044:	461e      	mov	r6, r3
 80a2046:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a204a:	f001 fd35 	bl	80a3ab8 <__aeabi_dcmpun>
 80a204e:	b108      	cbz	r0, 80a2054 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2050:	4947      	ldr	r1, [pc, #284]	; (80a2170 <_ZN5Print10printFloatEdh+0x138>)
 80a2052:	e012      	b.n	80a207a <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2054:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a2058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a205c:	4b45      	ldr	r3, [pc, #276]	; (80a2174 <_ZN5Print10printFloatEdh+0x13c>)
 80a205e:	4638      	mov	r0, r7
 80a2060:	4621      	mov	r1, r4
 80a2062:	f001 fd29 	bl	80a3ab8 <__aeabi_dcmpun>
 80a2066:	b968      	cbnz	r0, 80a2084 <_ZN5Print10printFloatEdh+0x4c>
 80a2068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a206c:	4b41      	ldr	r3, [pc, #260]	; (80a2174 <_ZN5Print10printFloatEdh+0x13c>)
 80a206e:	4638      	mov	r0, r7
 80a2070:	4621      	mov	r1, r4
 80a2072:	f001 fd03 	bl	80a3a7c <__aeabi_dcmple>
 80a2076:	b928      	cbnz	r0, 80a2084 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2078:	493f      	ldr	r1, [pc, #252]	; (80a2178 <_ZN5Print10printFloatEdh+0x140>)
 80a207a:	4640      	mov	r0, r8
 80a207c:	f7ff ff60 	bl	80a1f40 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a2084:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2088:	4b3c      	ldr	r3, [pc, #240]	; (80a217c <_ZN5Print10printFloatEdh+0x144>)
 80a208a:	4638      	mov	r0, r7
 80a208c:	4631      	mov	r1, r6
 80a208e:	f001 fd09 	bl	80a3aa4 <__aeabi_dcmpgt>
 80a2092:	b108      	cbz	r0, 80a2098 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2094:	493a      	ldr	r1, [pc, #232]	; (80a2180 <_ZN5Print10printFloatEdh+0x148>)
 80a2096:	e7f0      	b.n	80a207a <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a2098:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a209c:	4b39      	ldr	r3, [pc, #228]	; (80a2184 <_ZN5Print10printFloatEdh+0x14c>)
 80a209e:	4638      	mov	r0, r7
 80a20a0:	4631      	mov	r1, r6
 80a20a2:	f001 fce1 	bl	80a3a68 <__aeabi_dcmplt>
 80a20a6:	2800      	cmp	r0, #0
 80a20a8:	d1f4      	bne.n	80a2094 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a20aa:	2200      	movs	r2, #0
 80a20ac:	2300      	movs	r3, #0
 80a20ae:	4638      	mov	r0, r7
 80a20b0:	4631      	mov	r1, r6
 80a20b2:	f001 fcd9 	bl	80a3a68 <__aeabi_dcmplt>
 80a20b6:	b138      	cbz	r0, 80a20c8 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a20b8:	212d      	movs	r1, #45	; 0x2d
 80a20ba:	4640      	mov	r0, r8
 80a20bc:	f7ff ff54 	bl	80a1f68 <_ZN5Print5printEc>
     number = -number;
 80a20c0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a20c4:	4604      	mov	r4, r0
 80a20c6:	e000      	b.n	80a20ca <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a20c8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a20ca:	492f      	ldr	r1, [pc, #188]	; (80a2188 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a20cc:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a20d0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a20d2:	fa5f f389 	uxtb.w	r3, r9
 80a20d6:	429d      	cmp	r5, r3
 80a20d8:	d906      	bls.n	80a20e8 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a20da:	2200      	movs	r2, #0
 80a20dc:	4b2b      	ldr	r3, [pc, #172]	; (80a218c <_ZN5Print10printFloatEdh+0x154>)
 80a20de:	f001 fb7b 	bl	80a37d8 <__aeabi_ddiv>
 80a20e2:	f109 0901 	add.w	r9, r9, #1
 80a20e6:	e7f4      	b.n	80a20d2 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a20e8:	463a      	mov	r2, r7
 80a20ea:	4633      	mov	r3, r6
 80a20ec:	f001 f898 	bl	80a3220 <__adddf3>
 80a20f0:	460f      	mov	r7, r1
 80a20f2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a20f4:	f001 fd1e 	bl	80a3b34 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a20f8:	220a      	movs	r2, #10
 80a20fa:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a20fc:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a20fe:	4640      	mov	r0, r8
 80a2100:	f7ff ff4b 	bl	80a1f9a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2104:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a2106:	b37d      	cbz	r5, 80a2168 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a2108:	4648      	mov	r0, r9
 80a210a:	f001 f9c5 	bl	80a3498 <__aeabi_ui2d>
 80a210e:	4602      	mov	r2, r0
 80a2110:	460b      	mov	r3, r1
 80a2112:	4630      	mov	r0, r6
 80a2114:	4639      	mov	r1, r7
 80a2116:	f001 f881 	bl	80a321c <__aeabi_dsub>
 80a211a:	4606      	mov	r6, r0
 80a211c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a211e:	4640      	mov	r0, r8
 80a2120:	491b      	ldr	r1, [pc, #108]	; (80a2190 <_ZN5Print10printFloatEdh+0x158>)
 80a2122:	f7ff ff0d 	bl	80a1f40 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a2126:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a2128:	4b18      	ldr	r3, [pc, #96]	; (80a218c <_ZN5Print10printFloatEdh+0x154>)
 80a212a:	2200      	movs	r2, #0
 80a212c:	4630      	mov	r0, r6
 80a212e:	4639      	mov	r1, r7
 80a2130:	f001 fa28 	bl	80a3584 <__aeabi_dmul>
 80a2134:	460f      	mov	r7, r1
 80a2136:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a2138:	f001 fcd4 	bl	80a3ae4 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a213c:	220a      	movs	r2, #10
 80a213e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a2140:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2142:	4640      	mov	r0, r8
 80a2144:	f7ff ff55 	bl	80a1ff2 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a2148:	4404      	add	r4, r0
    remainder -= toPrint;
 80a214a:	4648      	mov	r0, r9
 80a214c:	f001 f9b4 	bl	80a34b8 <__aeabi_i2d>
 80a2150:	4602      	mov	r2, r0
 80a2152:	460b      	mov	r3, r1
 80a2154:	4630      	mov	r0, r6
 80a2156:	4639      	mov	r1, r7
 80a2158:	f001 f860 	bl	80a321c <__aeabi_dsub>
 80a215c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a215e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a2162:	4606      	mov	r6, r0
 80a2164:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a2166:	d1df      	bne.n	80a2128 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2168:	4620      	mov	r0, r4
 80a216a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a216e:	bf00      	nop
 80a2170:	080a4aa9 	.word	0x080a4aa9
 80a2174:	7fefffff 	.word	0x7fefffff
 80a2178:	080a4ab3 	.word	0x080a4ab3
 80a217c:	41efffff 	.word	0x41efffff
 80a2180:	080a4aad 	.word	0x080a4aad
 80a2184:	c1efffff 	.word	0xc1efffff
 80a2188:	3fe00000 	.word	0x3fe00000
 80a218c:	40240000 	.word	0x40240000
 80a2190:	080a4ab1 	.word	0x080a4ab1

080a2194 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a2194:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a2196:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a219a:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a219c:	9100      	str	r1, [sp, #0]
 80a219e:	f7ff ff4b 	bl	80a2038 <_ZN5Print10printFloatEdh>
 80a21a2:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a21a4:	4628      	mov	r0, r5
 80a21a6:	f7ff fee2 	bl	80a1f6e <_ZN5Print7printlnEv>
  return n;
}
 80a21aa:	4420      	add	r0, r4
 80a21ac:	b003      	add	sp, #12
 80a21ae:	bd30      	pop	{r4, r5, pc}

080a21b0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a21b0:	b510      	push	{r4, lr}
 80a21b2:	4604      	mov	r4, r0
 80a21b4:	f7ff fb0e 	bl	80a17d4 <_ZNSt14_Function_baseD1Ev>
 80a21b8:	4620      	mov	r0, r4
 80a21ba:	bd10      	pop	{r4, pc}

080a21bc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a21bc:	4803      	ldr	r0, [pc, #12]	; (80a21cc <_GLOBAL__sub_I_RGB+0x10>)
 80a21be:	2300      	movs	r3, #0
 80a21c0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a21c2:	4a03      	ldr	r2, [pc, #12]	; (80a21d0 <_GLOBAL__sub_I_RGB+0x14>)
 80a21c4:	4903      	ldr	r1, [pc, #12]	; (80a21d4 <_GLOBAL__sub_I_RGB+0x18>)
 80a21c6:	f000 bed5 	b.w	80a2f74 <__aeabi_atexit>
 80a21ca:	bf00      	nop
 80a21cc:	200006f8 	.word	0x200006f8
 80a21d0:	20000390 	.word	0x20000390
 80a21d4:	080a21b1 	.word	0x080a21b1

080a21d8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a21d8:	4770      	bx	lr

080a21da <_ZN8SPIClassD0Ev>:
 80a21da:	b510      	push	{r4, lr}
 80a21dc:	4604      	mov	r4, r0
 80a21de:	f7fd ff5e 	bl	80a009e <_ZdlPv>
 80a21e2:	4620      	mov	r0, r4
 80a21e4:	bd10      	pop	{r4, pc}
	...

080a21e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a21e8:	b570      	push	{r4, r5, r6, lr}
 80a21ea:	4604      	mov	r4, r0
 80a21ec:	460e      	mov	r6, r1
 80a21ee:	4b07      	ldr	r3, [pc, #28]	; (80a220c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a21f0:	2500      	movs	r5, #0
 80a21f2:	6003      	str	r3, [r0, #0]
 80a21f4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a21f8:	f7ff f8a2 	bl	80a1340 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a21fc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a21fe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2200:	f7ff f9a0 	bl	80a1544 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a2204:	60a5      	str	r5, [r4, #8]
}
 80a2206:	4620      	mov	r0, r4
 80a2208:	bd70      	pop	{r4, r5, r6, pc}
 80a220a:	bf00      	nop
 80a220c:	080a4ac0 	.word	0x080a4ac0

080a2210 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a2210:	7900      	ldrb	r0, [r0, #4]
 80a2212:	f7ff b99f 	b.w	80a1554 <HAL_SPI_Is_Enabled>

080a2216 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 80a2216:	b510      	push	{r4, lr}
 80a2218:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a221a:	f7ff f8b9 	bl	80a1390 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 80a221e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 80a2220:	6823      	ldr	r3, [r4, #0]
 80a2222:	4620      	mov	r0, r4
 80a2224:	695b      	ldr	r3, [r3, #20]
 80a2226:	4798      	blx	r3
    if (c >= 0) return c;
 80a2228:	2800      	cmp	r0, #0
 80a222a:	da08      	bge.n	80a223e <_ZN6Stream9timedReadEv+0x28>
 80a222c:	f7ff f8b0 	bl	80a1390 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 80a2230:	68e3      	ldr	r3, [r4, #12]
 80a2232:	1ac0      	subs	r0, r0, r3
 80a2234:	68a3      	ldr	r3, [r4, #8]
 80a2236:	4298      	cmp	r0, r3
 80a2238:	d3f2      	bcc.n	80a2220 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 80a223a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a223e:	bd10      	pop	{r4, pc}

080a2240 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 80a2240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2244:	4680      	mov	r8, r0
 80a2246:	460d      	mov	r5, r1
 80a2248:	460c      	mov	r4, r1
 80a224a:	188f      	adds	r7, r1, r2
  size_t count = 0;
  while (count < length) {
 80a224c:	42bc      	cmp	r4, r7
 80a224e:	eba4 0605 	sub.w	r6, r4, r5
 80a2252:	d007      	beq.n	80a2264 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 80a2254:	4640      	mov	r0, r8
 80a2256:	f7ff ffde 	bl	80a2216 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 80a225a:	2800      	cmp	r0, #0
 80a225c:	db02      	blt.n	80a2264 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 80a225e:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
 80a2262:	e7f3      	b.n	80a224c <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
 80a2264:	4630      	mov	r0, r6
 80a2266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a226c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a226c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2270:	4680      	mov	r8, r0
 80a2272:	460d      	mov	r5, r1
 80a2274:	4617      	mov	r7, r2
 80a2276:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a2278:	2200      	movs	r2, #0
 80a227a:	2300      	movs	r3, #0
 80a227c:	4640      	mov	r0, r8
 80a227e:	4629      	mov	r1, r5
 80a2280:	f001 fbf2 	bl	80a3a68 <__aeabi_dcmplt>
 80a2284:	b120      	cbz	r0, 80a2290 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a2286:	232d      	movs	r3, #45	; 0x2d
 80a2288:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a228a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a228e:	3601      	adds	r6, #1
 80a2290:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a2292:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a2294:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a2296:	b2d9      	uxtb	r1, r3
 80a2298:	428f      	cmp	r7, r1
 80a229a:	d902      	bls.n	80a22a2 <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a229c:	4354      	muls	r4, r2
 80a229e:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a22a0:	e7f9      	b.n	80a2296 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a22a2:	4620      	mov	r0, r4
 80a22a4:	f001 f908 	bl	80a34b8 <__aeabi_i2d>
 80a22a8:	4642      	mov	r2, r8
 80a22aa:	462b      	mov	r3, r5
 80a22ac:	f001 f96a 	bl	80a3584 <__aeabi_dmul>
 80a22b0:	4682      	mov	sl, r0
 80a22b2:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a22b4:	f001 fdd4 	bl	80a3e60 <__aeabi_d2ulz>
 80a22b8:	4680      	mov	r8, r0
 80a22ba:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a22bc:	f001 f92c 	bl	80a3518 <__aeabi_ul2d>
 80a22c0:	4602      	mov	r2, r0
 80a22c2:	460b      	mov	r3, r1
 80a22c4:	4650      	mov	r0, sl
 80a22c6:	4659      	mov	r1, fp
 80a22c8:	f000 ffa8 	bl	80a321c <__aeabi_dsub>
 80a22cc:	2200      	movs	r2, #0
 80a22ce:	4b17      	ldr	r3, [pc, #92]	; (80a232c <_Z4dtoadhPc+0xc0>)
 80a22d0:	f001 fbde 	bl	80a3a90 <__aeabi_dcmpge>
 80a22d4:	b118      	cbz	r0, 80a22de <_Z4dtoadhPc+0x72>
        fixed++;
 80a22d6:	f118 0801 	adds.w	r8, r8, #1
 80a22da:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a22de:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a22e0:	4622      	mov	r2, r4
 80a22e2:	462b      	mov	r3, r5
 80a22e4:	4640      	mov	r0, r8
 80a22e6:	4649      	mov	r1, r9
 80a22e8:	f001 fda2 	bl	80a3e30 <__aeabi_uldivmod>
 80a22ec:	2301      	movs	r3, #1
 80a22ee:	220a      	movs	r2, #10
 80a22f0:	4631      	mov	r1, r6
 80a22f2:	f000 fc82 	bl	80a2bfa <ultoa>
    if (prec) {
 80a22f6:	b1af      	cbz	r7, 80a2324 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a22f8:	4630      	mov	r0, r6
 80a22fa:	f001 ffc4 	bl	80a4286 <strlen>
        *sout++ = '.';
 80a22fe:	232e      	movs	r3, #46	; 0x2e
 80a2300:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a2302:	3001      	adds	r0, #1
 80a2304:	4406      	add	r6, r0
 80a2306:	4622      	mov	r2, r4
 80a2308:	462b      	mov	r3, r5
 80a230a:	4640      	mov	r0, r8
 80a230c:	4649      	mov	r1, r9
 80a230e:	f001 fd8f 	bl	80a3e30 <__aeabi_uldivmod>
 80a2312:	463b      	mov	r3, r7
 80a2314:	4610      	mov	r0, r2
 80a2316:	4631      	mov	r1, r6
 80a2318:	220a      	movs	r2, #10
    }
}
 80a231a:	b001      	add	sp, #4
 80a231c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a2320:	f000 bc6b 	b.w	80a2bfa <ultoa>
    }
}
 80a2324:	b001      	add	sp, #4
 80a2326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a232a:	bf00      	nop
 80a232c:	3fe00000 	.word	0x3fe00000

080a2330 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2330:	b510      	push	{r4, lr}
 80a2332:	4604      	mov	r4, r0
{
	free(buffer);
 80a2334:	6800      	ldr	r0, [r0, #0]
 80a2336:	f7ff fa01 	bl	80a173c <free>
}
 80a233a:	4620      	mov	r0, r4
 80a233c:	bd10      	pop	{r4, pc}

080a233e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a233e:	b510      	push	{r4, lr}
 80a2340:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2342:	6800      	ldr	r0, [r0, #0]
 80a2344:	b108      	cbz	r0, 80a234a <_ZN6String10invalidateEv+0xc>
 80a2346:	f7ff f9f9 	bl	80a173c <free>
	buffer = NULL;
 80a234a:	2300      	movs	r3, #0
 80a234c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a234e:	60a3      	str	r3, [r4, #8]
 80a2350:	6063      	str	r3, [r4, #4]
 80a2352:	bd10      	pop	{r4, pc}

080a2354 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2354:	b538      	push	{r3, r4, r5, lr}
 80a2356:	4604      	mov	r4, r0
 80a2358:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a235a:	6800      	ldr	r0, [r0, #0]
 80a235c:	3101      	adds	r1, #1
 80a235e:	f7ff f9f5 	bl	80a174c <realloc>
	if (newbuffer) {
 80a2362:	b110      	cbz	r0, 80a236a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2364:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2368:	2001      	movs	r0, #1
	}
	return 0;
}
 80a236a:	bd38      	pop	{r3, r4, r5, pc}

080a236c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a236c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a236e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2370:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2372:	b113      	cbz	r3, 80a237a <_ZN6String7reserveEj+0xe>
 80a2374:	6843      	ldr	r3, [r0, #4]
 80a2376:	428b      	cmp	r3, r1
 80a2378:	d207      	bcs.n	80a238a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a237a:	4620      	mov	r0, r4
 80a237c:	f7ff ffea 	bl	80a2354 <_ZN6String12changeBufferEj>
 80a2380:	b120      	cbz	r0, 80a238c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a2382:	68a3      	ldr	r3, [r4, #8]
 80a2384:	b90b      	cbnz	r3, 80a238a <_ZN6String7reserveEj+0x1e>
 80a2386:	6822      	ldr	r2, [r4, #0]
 80a2388:	7013      	strb	r3, [r2, #0]
 80a238a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a238c:	bd10      	pop	{r4, pc}

080a238e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a238e:	b570      	push	{r4, r5, r6, lr}
 80a2390:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2392:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2394:	4604      	mov	r4, r0
 80a2396:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2398:	f7ff ffe8 	bl	80a236c <_ZN6String7reserveEj>
 80a239c:	b918      	cbnz	r0, 80a23a6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a239e:	4620      	mov	r0, r4
 80a23a0:	f7ff ffcd 	bl	80a233e <_ZN6String10invalidateEv>
		return *this;
 80a23a4:	e009      	b.n	80a23ba <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a23a6:	462a      	mov	r2, r5
 80a23a8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a23aa:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a23ac:	6820      	ldr	r0, [r4, #0]
 80a23ae:	f001 ff09 	bl	80a41c4 <memcpy>
	buffer[len] = 0;
 80a23b2:	6822      	ldr	r2, [r4, #0]
 80a23b4:	68a3      	ldr	r3, [r4, #8]
 80a23b6:	2100      	movs	r1, #0
 80a23b8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a23ba:	4620      	mov	r0, r4
 80a23bc:	bd70      	pop	{r4, r5, r6, pc}

080a23be <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a23be:	b538      	push	{r3, r4, r5, lr}
 80a23c0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a23c2:	460c      	mov	r4, r1
 80a23c4:	b141      	cbz	r1, 80a23d8 <_ZN6StringaSEPKc+0x1a>
 80a23c6:	4608      	mov	r0, r1
 80a23c8:	f001 ff5d 	bl	80a4286 <strlen>
 80a23cc:	4621      	mov	r1, r4
 80a23ce:	4602      	mov	r2, r0
 80a23d0:	4628      	mov	r0, r5
 80a23d2:	f7ff ffdc 	bl	80a238e <_ZN6String4copyEPKcj>
 80a23d6:	e001      	b.n	80a23dc <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a23d8:	f7ff ffb1 	bl	80a233e <_ZN6String10invalidateEv>

	return *this;
}
 80a23dc:	4628      	mov	r0, r5
 80a23de:	bd38      	pop	{r3, r4, r5, pc}

080a23e0 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a23e0:	b530      	push	{r4, r5, lr}
 80a23e2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a23e4:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a23e6:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a23e8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a23ea:	6043      	str	r3, [r0, #4]
	len = 0;
 80a23ec:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a23ee:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a23f0:	b2d5      	uxtb	r5, r2
 80a23f2:	4608      	mov	r0, r1
 80a23f4:	f001 f872 	bl	80a34dc <__aeabi_f2d>
 80a23f8:	ab01      	add	r3, sp, #4
 80a23fa:	462a      	mov	r2, r5
 80a23fc:	f7ff ff36 	bl	80a226c <_Z4dtoadhPc>
        *this = buf;
 80a2400:	a901      	add	r1, sp, #4
 80a2402:	4620      	mov	r0, r4
 80a2404:	f7ff ffdb 	bl	80a23be <_ZN6StringaSEPKc>
}
 80a2408:	4620      	mov	r0, r4
 80a240a:	b00b      	add	sp, #44	; 0x2c
 80a240c:	bd30      	pop	{r4, r5, pc}
	...

080a2410 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2410:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a2414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2416:	4c0d      	ldr	r4, [pc, #52]	; (80a244c <_GLOBAL__sub_I_System+0x3c>)
 80a2418:	2500      	movs	r5, #0
 80a241a:	8063      	strh	r3, [r4, #2]
 80a241c:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2420:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2422:	80a3      	strh	r3, [r4, #4]
 80a2424:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2426:	f7ff f92d 	bl	80a1684 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a242a:	a802      	add	r0, sp, #8
 80a242c:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a2430:	462a      	mov	r2, r5
 80a2432:	4629      	mov	r1, r5
 80a2434:	f7fe ff8c 	bl	80a1350 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a2438:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a243a:	2b1e      	cmp	r3, #30
 80a243c:	d104      	bne.n	80a2448 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a243e:	2303      	movs	r3, #3
 80a2440:	7023      	strb	r3, [r4, #0]
 80a2442:	2311      	movs	r3, #17
 80a2444:	8065      	strh	r5, [r4, #2]
 80a2446:	80a3      	strh	r3, [r4, #4]
 80a2448:	b003      	add	sp, #12
 80a244a:	bd30      	pop	{r4, r5, pc}
 80a244c:	20000708 	.word	0x20000708

080a2450 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2452:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2454:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2456:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a245a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a245c:	2201      	movs	r2, #1
 80a245e:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2462:	4621      	mov	r1, r4
 80a2464:	47a8      	blx	r5
}
 80a2466:	b003      	add	sp, #12
 80a2468:	bd30      	pop	{r4, r5, pc}

080a246a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a246a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a246c:	6803      	ldr	r3, [r0, #0]
 80a246e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2470:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2474:	46a4      	mov	ip, r4
}
 80a2476:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2478:	4760      	bx	ip

080a247a <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a247a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a247c:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a247e:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a2480:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a2484:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a2486:	4621      	mov	r1, r4
 80a2488:	4613      	mov	r3, r2
 80a248a:	2201      	movs	r2, #1
 80a248c:	47a8      	blx	r5
}
 80a248e:	b003      	add	sp, #12
 80a2490:	bd30      	pop	{r4, r5, pc}

080a2492 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a2492:	4770      	bx	lr

080a2494 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a2494:	4770      	bx	lr

080a2496 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a2496:	2000      	movs	r0, #0
 80a2498:	4770      	bx	lr

080a249a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a249a:	b510      	push	{r4, lr}
 80a249c:	4604      	mov	r4, r0
 80a249e:	f7fd fdfe 	bl	80a009e <_ZdlPv>
 80a24a2:	4620      	mov	r0, r4
 80a24a4:	bd10      	pop	{r4, pc}

080a24a6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a24a6:	f7fd bdfa 	b.w	80a009e <_ZdlPv>
	...

080a24ac <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a24ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a24b0:	461f      	mov	r7, r3
    stop();
 80a24b2:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a24b4:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a24b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a24b8:	4606      	mov	r6, r0
 80a24ba:	460c      	mov	r4, r1
 80a24bc:	4690      	mov	r8, r2
    stop();
 80a24be:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 80a24c0:	4b13      	ldr	r3, [pc, #76]	; (80a2510 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a24c2:	6818      	ldr	r0, [r3, #0]
 80a24c4:	6803      	ldr	r3, [r0, #0]
 80a24c6:	681b      	ldr	r3, [r3, #0]
 80a24c8:	4798      	blx	r3
 80a24ca:	b1f0      	cbz	r0, 80a250a <_ZN9TCPClient7connectEPKctm+0x5e>
      {
        IPAddress ip_addr;
 80a24cc:	a802      	add	r0, sp, #8
 80a24ce:	f7ff fcf1 	bl	80a1eb4 <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 80a24d2:	4620      	mov	r0, r4
 80a24d4:	f001 fed7 	bl	80a4286 <strlen>
 80a24d8:	2300      	movs	r3, #0
 80a24da:	9300      	str	r3, [sp, #0]
 80a24dc:	b281      	uxth	r1, r0
 80a24de:	463b      	mov	r3, r7
 80a24e0:	aa03      	add	r2, sp, #12
 80a24e2:	4620      	mov	r0, r4
 80a24e4:	f7ff f8be 	bl	80a1664 <inet_gethostbyname>
 80a24e8:	b978      	cbnz	r0, 80a250a <_ZN9TCPClient7connectEPKctm+0x5e>
        {
                return connect(ip_addr, port, nif);
 80a24ea:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a24ec:	ad09      	add	r5, sp, #36	; 0x24
 80a24ee:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a24f2:	4b08      	ldr	r3, [pc, #32]	; (80a2514 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a24f4:	ac03      	add	r4, sp, #12
 80a24f6:	9308      	str	r3, [sp, #32]
 80a24f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a24fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a24fc:	6823      	ldr	r3, [r4, #0]
 80a24fe:	4642      	mov	r2, r8
 80a2500:	702b      	strb	r3, [r5, #0]
 80a2502:	a908      	add	r1, sp, #32
 80a2504:	463b      	mov	r3, r7
 80a2506:	4630      	mov	r0, r6
 80a2508:	47c8      	blx	r9
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 80a250a:	b00f      	add	sp, #60	; 0x3c
 80a250c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2510:	080a4be0 	.word	0x080a4be0
 80a2514:	080a49c8 	.word	0x080a49c8

080a2518 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a2518:	b510      	push	{r4, lr}
 80a251a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a251c:	6803      	ldr	r3, [r0, #0]
 80a251e:	689b      	ldr	r3, [r3, #8]
 80a2520:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2522:	68a3      	ldr	r3, [r4, #8]
 80a2524:	3b01      	subs	r3, #1
 80a2526:	60a3      	str	r3, [r4, #8]
 80a2528:	b92b      	cbnz	r3, 80a2536 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30+0x1e>
            _M_destroy();
 80a252a:	6823      	ldr	r3, [r4, #0]
 80a252c:	4620      	mov	r0, r4
        }
    }
 80a252e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a2532:	68db      	ldr	r3, [r3, #12]
 80a2534:	4718      	bx	r3
 80a2536:	bd10      	pop	{r4, pc}

080a2538 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a2538:	b570      	push	{r4, r5, r6, lr}
 80a253a:	4604      	mov	r4, r0
 80a253c:	4606      	mov	r6, r0
 80a253e:	694d      	ldr	r5, [r1, #20]
 80a2540:	4b04      	ldr	r3, [pc, #16]	; (80a2554 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a2542:	358c      	adds	r5, #140	; 0x8c
 80a2544:	f844 3b04 	str.w	r3, [r4], #4
 80a2548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a254a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a254c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a254e:	4630      	mov	r0, r6
 80a2550:	7023      	strb	r3, [r4, #0]
 80a2552:	bd70      	pop	{r4, r5, r6, pc}
 80a2554:	080a49c8 	.word	0x080a49c8

080a2558 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a2558:	b510      	push	{r4, lr}
 80a255a:	6943      	ldr	r3, [r0, #20]
 80a255c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a255e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2562:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2566:	429a      	cmp	r2, r3
 80a2568:	d005      	beq.n	80a2576 <_ZN9TCPClient4peekEv+0x1e>
 80a256a:	6962      	ldr	r2, [r4, #20]
 80a256c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a2570:	4413      	add	r3, r2
 80a2572:	7918      	ldrb	r0, [r3, #4]
 80a2574:	bd10      	pop	{r4, pc}
 80a2576:	6803      	ldr	r3, [r0, #0]
 80a2578:	691b      	ldr	r3, [r3, #16]
 80a257a:	4798      	blx	r3
 80a257c:	2800      	cmp	r0, #0
 80a257e:	d1f4      	bne.n	80a256a <_ZN9TCPClient4peekEv+0x12>
 80a2580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a2584:	bd10      	pop	{r4, pc}

080a2586 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a2586:	b510      	push	{r4, lr}
 80a2588:	6943      	ldr	r3, [r0, #20]
 80a258a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a258c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2590:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2594:	429a      	cmp	r2, r3
 80a2596:	d008      	beq.n	80a25aa <_ZN9TCPClient4readEv+0x24>
 80a2598:	6962      	ldr	r2, [r4, #20]
 80a259a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a259e:	1c59      	adds	r1, r3, #1
 80a25a0:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a25a4:	4413      	add	r3, r2
 80a25a6:	7918      	ldrb	r0, [r3, #4]
 80a25a8:	bd10      	pop	{r4, pc}
 80a25aa:	6803      	ldr	r3, [r0, #0]
 80a25ac:	691b      	ldr	r3, [r3, #16]
 80a25ae:	4798      	blx	r3
 80a25b0:	2800      	cmp	r0, #0
 80a25b2:	d1f1      	bne.n	80a2598 <_ZN9TCPClient4readEv+0x12>
 80a25b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a25b8:	bd10      	pop	{r4, pc}

080a25ba <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a25ba:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a25bc:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 80a25be:	6820      	ldr	r0, [r4, #0]
 80a25c0:	f7fe ff88 	bl	80a14d4 <socket_handle_valid>
 80a25c4:	b110      	cbz	r0, 80a25cc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 80a25c6:	6820      	ldr	r0, [r4, #0]
 80a25c8:	f7fe ffa4 	bl	80a1514 <socket_close>
 80a25cc:	4620      	mov	r0, r4
 80a25ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a25d2:	f7fd bd64 	b.w	80a009e <_ZdlPv>
	...

080a25d8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a25d8:	b510      	push	{r4, lr}
 80a25da:	4b06      	ldr	r3, [pc, #24]	; (80a25f4 <_ZN9TCPClientD1Ev+0x1c>)
 80a25dc:	4604      	mov	r4, r0
 80a25de:	6003      	str	r3, [r0, #0]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a25e0:	6980      	ldr	r0, [r0, #24]
 80a25e2:	b128      	cbz	r0, 80a25f0 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a25e4:	6843      	ldr	r3, [r0, #4]
 80a25e6:	3b01      	subs	r3, #1
 80a25e8:	6043      	str	r3, [r0, #4]
 80a25ea:	b90b      	cbnz	r3, 80a25f0 <_ZN9TCPClientD1Ev+0x18>
 80a25ec:	f7ff ff94 	bl	80a2518 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>
 80a25f0:	4620      	mov	r0, r4
 80a25f2:	bd10      	pop	{r4, pc}
 80a25f4:	080a4aec 	.word	0x080a4aec

080a25f8 <_ZN9TCPClientD0Ev>:
 80a25f8:	b510      	push	{r4, lr}
 80a25fa:	4604      	mov	r4, r0
 80a25fc:	f7ff ffec 	bl	80a25d8 <_ZN9TCPClientD1Ev>
 80a2600:	4620      	mov	r0, r4
 80a2602:	f7fd fd4c 	bl	80a009e <_ZdlPv>
 80a2606:	4620      	mov	r0, r4
 80a2608:	bd10      	pop	{r4, pc}

080a260a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a260a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a260c:	6943      	ldr	r3, [r0, #20]
 80a260e:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a2610:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2614:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2618:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a261a:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a261c:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a261e:	d106      	bne.n	80a262e <_ZN9TCPClient4readEPhj+0x24>
 80a2620:	6803      	ldr	r3, [r0, #0]
 80a2622:	691b      	ldr	r3, [r3, #16]
 80a2624:	4798      	blx	r3
 80a2626:	b910      	cbnz	r0, 80a262e <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a2628:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a262c:	e014      	b.n	80a2658 <_ZN9TCPClient4readEPhj+0x4e>
 80a262e:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2630:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a2632:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a2636:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a263a:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a263c:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a263e:	42bc      	cmp	r4, r7
 80a2640:	bf28      	it	cs
 80a2642:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2644:	3104      	adds	r1, #4
 80a2646:	4622      	mov	r2, r4
 80a2648:	f001 fdbc 	bl	80a41c4 <memcpy>
 80a264c:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a264e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a2652:	4423      	add	r3, r4
 80a2654:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a2658:	4620      	mov	r0, r4
 80a265a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a265c <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a265c:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a265e:	2300      	movs	r3, #0
 80a2660:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a2664:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a2666:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a266a:	4770      	bx	lr

080a266c <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a266c:	b538      	push	{r3, r4, r5, lr}
 80a266e:	6942      	ldr	r2, [r0, #20]
 80a2670:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a2672:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2676:	b11b      	cbz	r3, 80a2680 <_ZN9TCPClient9availableEv+0x14>
 80a2678:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a267c:	429a      	cmp	r2, r3
 80a267e:	d00b      	beq.n	80a2698 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 80a2680:	4b18      	ldr	r3, [pc, #96]	; (80a26e4 <_ZN9TCPClient9availableEv+0x78>)
 80a2682:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a2684:	6803      	ldr	r3, [r0, #0]
 80a2686:	681b      	ldr	r3, [r3, #0]
 80a2688:	4798      	blx	r3
 80a268a:	b318      	cbz	r0, 80a26d4 <_ZN9TCPClient9availableEv+0x68>
 80a268c:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a268e:	6818      	ldr	r0, [r3, #0]
 80a2690:	f7fe ff20 	bl	80a14d4 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a2694:	b918      	cbnz	r0, 80a269e <_ZN9TCPClient9availableEv+0x32>
 80a2696:	e01d      	b.n	80a26d4 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a2698:	f7ff ffe0 	bl	80a265c <_ZN9TCPClient12flush_bufferEv>
 80a269c:	e7f0      	b.n	80a2680 <_ZN9TCPClient9availableEv+0x14>
 80a269e:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a26a0:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a26a4:	297f      	cmp	r1, #127	; 0x7f
 80a26a6:	d815      	bhi.n	80a26d4 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a26a8:	1d05      	adds	r5, r0, #4
 80a26aa:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a26ae:	2300      	movs	r3, #0
 80a26b0:	4429      	add	r1, r5
 80a26b2:	6800      	ldr	r0, [r0, #0]
 80a26b4:	f7fe ff26 	bl	80a1504 <socket_receive>
            if (ret > 0)
 80a26b8:	2800      	cmp	r0, #0
 80a26ba:	dd0b      	ble.n	80a26d4 <_ZN9TCPClient9availableEv+0x68>
 80a26bc:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a26be:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a26c2:	b90a      	cbnz	r2, 80a26c8 <_ZN9TCPClient9availableEv+0x5c>
 80a26c4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a26c8:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a26ca:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a26ce:	4418      	add	r0, r3
 80a26d0:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a26d4:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a26d6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a26da:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a26de:	1a18      	subs	r0, r3, r0
}
 80a26e0:	bd38      	pop	{r3, r4, r5, pc}
 80a26e2:	bf00      	nop
 80a26e4:	080a4be0 	.word	0x080a4be0

080a26e8 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a26e8:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a26ea:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a26ec:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a26ee:	6818      	ldr	r0, [r3, #0]
 80a26f0:	f7fe fef0 	bl	80a14d4 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a26f4:	b118      	cbz	r0, 80a26fe <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a26f6:	6963      	ldr	r3, [r4, #20]
 80a26f8:	6818      	ldr	r0, [r3, #0]
 80a26fa:	f7fe ff0b 	bl	80a1514 <socket_close>
 80a26fe:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a2700:	f7fe ff10 	bl	80a1524 <socket_handle_invalid>
 80a2704:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2706:	6960      	ldr	r0, [r4, #20]
 80a2708:	2211      	movs	r2, #17
 80a270a:	2100      	movs	r1, #0
 80a270c:	308c      	adds	r0, #140	; 0x8c
 80a270e:	f001 fd64 	bl	80a41da <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a2712:	4620      	mov	r0, r4
}
 80a2714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a2718:	f7ff bfa0 	b.w	80a265c <_ZN9TCPClient12flush_bufferEv>

080a271c <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a271e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2722:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a2724:	4b17      	ldr	r3, [pc, #92]	; (80a2784 <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2726:	2600      	movs	r6, #0
 80a2728:	6046      	str	r6, [r0, #4]
 80a272a:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a272c:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a272e:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a2730:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a2732:	20a0      	movs	r0, #160	; 0xa0
 80a2734:	460f      	mov	r7, r1
 80a2736:	f7fd fcb0 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a273a:	4605      	mov	r5, r0
 80a273c:	b138      	cbz	r0, 80a274e <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 80a273e:	6007      	str	r7, [r0, #0]
 80a2740:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 80a2744:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 80a2748:	3088      	adds	r0, #136	; 0x88
 80a274a:	f7ff fbb3 	bl	80a1eb4 <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a274e:	2014      	movs	r0, #20
 80a2750:	f7fd fca3 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a2754:	4603      	mov	r3, r0
 80a2756:	b128      	cbz	r0, 80a2764 <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2758:	2201      	movs	r2, #1
 80a275a:	6042      	str	r2, [r0, #4]
 80a275c:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a275e:	4a0a      	ldr	r2, [pc, #40]	; (80a2788 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a2760:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a2762:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a2764:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a2766:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a2768:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a276a:	b128      	cbz	r0, 80a2778 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a276c:	6843      	ldr	r3, [r0, #4]
 80a276e:	3b01      	subs	r3, #1
 80a2770:	6043      	str	r3, [r0, #4]
 80a2772:	b90b      	cbnz	r3, 80a2778 <_ZN9TCPClientC1Em+0x5c>
 80a2774:	f7ff fed0 	bl	80a2518 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a2778:	4620      	mov	r0, r4
 80a277a:	f7ff ff6f 	bl	80a265c <_ZN9TCPClient12flush_bufferEv>
}
 80a277e:	4620      	mov	r0, r4
 80a2780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2782:	bf00      	nop
 80a2784:	080a4aec 	.word	0x080a4aec
 80a2788:	080a4ad0 	.word	0x080a4ad0

080a278c <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a278c:	b510      	push	{r4, lr}
 80a278e:	4604      	mov	r4, r0
 80a2790:	f7fe fec8 	bl	80a1524 <socket_handle_invalid>
 80a2794:	4601      	mov	r1, r0
 80a2796:	4620      	mov	r0, r4
 80a2798:	f7ff ffc0 	bl	80a271c <_ZN9TCPClientC1Em>
{
}
 80a279c:	4620      	mov	r0, r4
 80a279e:	bd10      	pop	{r4, pc}

080a27a0 <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a27a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a27a4:	4698      	mov	r8, r3
    stop();
 80a27a6:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a27a8:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a27aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a27ac:	4606      	mov	r6, r0
 80a27ae:	460c      	mov	r4, r1
 80a27b0:	4615      	mov	r5, r2
    stop();
 80a27b2:	4798      	blx	r3
 80a27b4:	4b2f      	ldr	r3, [pc, #188]	; (80a2874 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>)
 80a27b6:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 80a27b8:	6803      	ldr	r3, [r0, #0]
 80a27ba:	681b      	ldr	r3, [r3, #0]
 80a27bc:	4798      	blx	r3
 80a27be:	2800      	cmp	r0, #0
 80a27c0:	d055      	beq.n	80a286e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a27c2:	462b      	mov	r3, r5
 80a27c4:	2206      	movs	r2, #6
 80a27c6:	2101      	movs	r1, #1
 80a27c8:	f8cd 8000 	str.w	r8, [sp]
 80a27cc:	2002      	movs	r0, #2
 80a27ce:	6977      	ldr	r7, [r6, #20]
 80a27d0:	f7fe fe88 	bl	80a14e4 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a27d4:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a27d6:	6038      	str	r0, [r7, #0]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a27d8:	9302      	str	r3, [sp, #8]
 80a27da:	2700      	movs	r7, #0
 80a27dc:	6973      	ldr	r3, [r6, #20]
 80a27de:	9703      	str	r7, [sp, #12]
 80a27e0:	681b      	ldr	r3, [r3, #0]
 80a27e2:	2001      	movs	r0, #1
 80a27e4:	9301      	str	r3, [sp, #4]
 80a27e6:	4b24      	ldr	r3, [pc, #144]	; (80a2878 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a27e8:	aa02      	add	r2, sp, #8
 80a27ea:	9300      	str	r3, [sp, #0]
 80a27ec:	4923      	ldr	r1, [pc, #140]	; (80a287c <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a27ee:	463b      	mov	r3, r7
 80a27f0:	f7fe ff40 	bl	80a1674 <log_message>

          if (socket_handle_valid(d_->sock))
 80a27f4:	6973      	ldr	r3, [r6, #20]
 80a27f6:	6818      	ldr	r0, [r3, #0]
 80a27f8:	f7fe fe6c 	bl	80a14d4 <socket_handle_valid>
 80a27fc:	2800      	cmp	r0, #0
 80a27fe:	d036      	beq.n	80a286e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          {
            flush_buffer();
 80a2800:	4630      	mov	r0, r6
 80a2802:	f7ff ff2b 	bl	80a265c <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a2806:	2302      	movs	r3, #2
 80a2808:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a280c:	0a2b      	lsrs	r3, r5, #8
 80a280e:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a2812:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2814:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a2818:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a281c:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a281e:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a2822:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a2826:	7963      	ldrb	r3, [r4, #5]
 80a2828:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a282c:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a2830:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2834:	f7fe ff0e 	bl	80a1654 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a2838:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a283a:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a283c:	2210      	movs	r2, #16
 80a283e:	a902      	add	r1, sp, #8
 80a2840:	6818      	ldr	r0, [r3, #0]
 80a2842:	f7fe fe57 	bl	80a14f4 <socket_connect>
 80a2846:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a2848:	4628      	mov	r0, r5
 80a284a:	f7fe ff03 	bl	80a1654 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a284e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2850:	6975      	ldr	r5, [r6, #20]
 80a2852:	358c      	adds	r5, #140	; 0x8c
 80a2854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2856:	6823      	ldr	r3, [r4, #0]
 80a2858:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a285a:	f1b8 0f00 	cmp.w	r8, #0
 80a285e:	d005      	beq.n	80a286c <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
            {
                stop();
 80a2860:	6833      	ldr	r3, [r6, #0]
 80a2862:	4630      	mov	r0, r6
 80a2864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2866:	4798      	blx	r3
 80a2868:	4638      	mov	r0, r7
 80a286a:	e000      	b.n	80a286e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a286c:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a286e:	b00a      	add	sp, #40	; 0x28
 80a2870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2874:	080a4be0 	.word	0x080a4be0
 80a2878:	080a4b37 	.word	0x080a4b37
 80a287c:	080a4b30 	.word	0x080a4b30

080a2880 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a2880:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a2882:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a2884:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2886:	6818      	ldr	r0, [r3, #0]
 80a2888:	f7fe fe24 	bl	80a14d4 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a288c:	b908      	cbnz	r0, 80a2892 <_ZN9TCPClient6statusEv+0x12>
 80a288e:	2000      	movs	r0, #0
 80a2890:	bd10      	pop	{r4, pc}
 80a2892:	4b07      	ldr	r3, [pc, #28]	; (80a28b0 <_ZN9TCPClient6statusEv+0x30>)
 80a2894:	6818      	ldr	r0, [r3, #0]
 80a2896:	6803      	ldr	r3, [r0, #0]
 80a2898:	681b      	ldr	r3, [r3, #0]
 80a289a:	4798      	blx	r3
 80a289c:	2800      	cmp	r0, #0
 80a289e:	d0f6      	beq.n	80a288e <_ZN9TCPClient6statusEv+0xe>
 80a28a0:	6963      	ldr	r3, [r4, #20]
 80a28a2:	6818      	ldr	r0, [r3, #0]
 80a28a4:	f7fe fe0e 	bl	80a14c4 <socket_active_status>
 80a28a8:	fab0 f080 	clz	r0, r0
 80a28ac:	0940      	lsrs	r0, r0, #5
}
 80a28ae:	bd10      	pop	{r4, pc}
 80a28b0:	080a4be0 	.word	0x080a4be0

080a28b4 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a28b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a28b8:	2500      	movs	r5, #0
 80a28ba:	6045      	str	r5, [r0, #4]
 80a28bc:	4604      	mov	r4, r0
 80a28be:	460e      	mov	r6, r1
 80a28c0:	4617      	mov	r7, r2
 80a28c2:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a28c4:	f7ff ffdc 	bl	80a2880 <_ZN9TCPClient6statusEv>
 80a28c8:	b160      	cbz	r0, 80a28e4 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a28ca:	6960      	ldr	r0, [r4, #20]
 80a28cc:	9501      	str	r5, [sp, #4]
 80a28ce:	f8cd 8000 	str.w	r8, [sp]
 80a28d2:	462b      	mov	r3, r5
 80a28d4:	463a      	mov	r2, r7
 80a28d6:	4631      	mov	r1, r6
 80a28d8:	6800      	ldr	r0, [r0, #0]
 80a28da:	f7fe fe2b 	bl	80a1534 <socket_send_ex>
    if (ret < 0) {
 80a28de:	2800      	cmp	r0, #0
 80a28e0:	da03      	bge.n	80a28ea <_ZN9TCPClient5writeEPKhjm+0x36>
 80a28e2:	e001      	b.n	80a28e8 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a28e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a28e8:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a28ea:	b002      	add	sp, #8
 80a28ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a28f0 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a28f0:	b538      	push	{r3, r4, r5, lr}
 80a28f2:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a28f4:	f7ff ffc4 	bl	80a2880 <_ZN9TCPClient6statusEv>
 80a28f8:	bb00      	cbnz	r0, 80a293c <_ZN9TCPClient9connectedEv+0x4c>
 80a28fa:	6963      	ldr	r3, [r4, #20]
 80a28fc:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a2900:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a2904:	4291      	cmp	r1, r2
 80a2906:	d119      	bne.n	80a293c <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2908:	6818      	ldr	r0, [r3, #0]
 80a290a:	f7fe fde3 	bl	80a14d4 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a290e:	b128      	cbz	r0, 80a291c <_ZN9TCPClient9connectedEv+0x2c>
 80a2910:	6963      	ldr	r3, [r4, #20]
 80a2912:	6818      	ldr	r0, [r3, #0]
 80a2914:	f7fe fdd6 	bl	80a14c4 <socket_active_status>
 80a2918:	2801      	cmp	r0, #1
 80a291a:	d001      	beq.n	80a2920 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a291c:	2500      	movs	r5, #0
 80a291e:	e00e      	b.n	80a293e <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a2920:	6823      	ldr	r3, [r4, #0]
 80a2922:	4620      	mov	r0, r4
 80a2924:	691b      	ldr	r3, [r3, #16]
 80a2926:	4798      	blx	r3
 80a2928:	2800      	cmp	r0, #0
 80a292a:	bf14      	ite	ne
 80a292c:	2501      	movne	r5, #1
 80a292e:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a2930:	d105      	bne.n	80a293e <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 80a2932:	6823      	ldr	r3, [r4, #0]
 80a2934:	4620      	mov	r0, r4
 80a2936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2938:	4798      	blx	r3
 80a293a:	e000      	b.n	80a293e <_ZN9TCPClient9connectedEv+0x4e>
 80a293c:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a293e:	4628      	mov	r0, r5
 80a2940:	bd38      	pop	{r3, r4, r5, pc}

080a2942 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a2942:	b508      	push	{r3, lr}
   return (status()!=0);
 80a2944:	f7ff ff9c 	bl	80a2880 <_ZN9TCPClient6statusEv>
}
 80a2948:	3000      	adds	r0, #0
 80a294a:	bf18      	it	ne
 80a294c:	2001      	movne	r0, #1
 80a294e:	bd08      	pop	{r3, pc}

080a2950 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2950:	4b02      	ldr	r3, [pc, #8]	; (80a295c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2952:	681a      	ldr	r2, [r3, #0]
 80a2954:	4b02      	ldr	r3, [pc, #8]	; (80a2960 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2956:	601a      	str	r2, [r3, #0]
 80a2958:	4770      	bx	lr
 80a295a:	bf00      	nop
 80a295c:	20000324 	.word	0x20000324
 80a2960:	20000710 	.word	0x20000710

080a2964 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2964:	4770      	bx	lr

080a2966 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2966:	7441      	strb	r1, [r0, #17]
 80a2968:	4770      	bx	lr

080a296a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a296a:	7c00      	ldrb	r0, [r0, #16]
 80a296c:	f7fe be32 	b.w	80a15d4 <HAL_USART_Available_Data_For_Write>

080a2970 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a2970:	7c00      	ldrb	r0, [r0, #16]
 80a2972:	f7fe be07 	b.w	80a1584 <HAL_USART_Available_Data>

080a2976 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a2976:	7c00      	ldrb	r0, [r0, #16]
 80a2978:	f7fe be14 	b.w	80a15a4 <HAL_USART_Peek_Data>

080a297c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a297c:	7c00      	ldrb	r0, [r0, #16]
 80a297e:	f7fe be09 	b.w	80a1594 <HAL_USART_Read_Data>

080a2982 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2982:	7c00      	ldrb	r0, [r0, #16]
 80a2984:	f7fe be16 	b.w	80a15b4 <HAL_USART_Flush_Data>

080a2988 <_ZN11USARTSerialD0Ev>:
 80a2988:	b510      	push	{r4, lr}
 80a298a:	4604      	mov	r4, r0
 80a298c:	f7fd fb87 	bl	80a009e <_ZdlPv>
 80a2990:	4620      	mov	r0, r4
 80a2992:	bd10      	pop	{r4, pc}

080a2994 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2994:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2996:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2998:	4604      	mov	r4, r0
 80a299a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a299c:	b925      	cbnz	r5, 80a29a8 <_ZN11USARTSerial5writeEh+0x14>
 80a299e:	7c00      	ldrb	r0, [r0, #16]
 80a29a0:	f7fe fe18 	bl	80a15d4 <HAL_USART_Available_Data_For_Write>
 80a29a4:	2800      	cmp	r0, #0
 80a29a6:	dd05      	ble.n	80a29b4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a29a8:	4631      	mov	r1, r6
 80a29aa:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a29ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a29b0:	f7fe bde0 	b.w	80a1574 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a29b4:	4628      	mov	r0, r5
 80a29b6:	bd70      	pop	{r4, r5, r6, pc}

080a29b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a29b8:	b510      	push	{r4, lr}
 80a29ba:	4604      	mov	r4, r0
 80a29bc:	4608      	mov	r0, r1
 80a29be:	4611      	mov	r1, r2
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a29c0:	2200      	movs	r2, #0
 80a29c2:	6062      	str	r2, [r4, #4]
 80a29c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a29c8:	60a2      	str	r2, [r4, #8]
 80a29ca:	4a05      	ldr	r2, [pc, #20]	; (80a29e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a29cc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a29ce:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a29d0:	2201      	movs	r2, #1
 80a29d2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a29d4:	461a      	mov	r2, r3
 80a29d6:	f7fe fdc5 	bl	80a1564 <HAL_USART_Init>
}
 80a29da:	4620      	mov	r0, r4
 80a29dc:	bd10      	pop	{r4, pc}
 80a29de:	bf00      	nop
 80a29e0:	080a4b7c 	.word	0x080a4b7c

080a29e4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a29e4:	7c00      	ldrb	r0, [r0, #16]
 80a29e6:	f7fe bded 	b.w	80a15c4 <HAL_USART_Is_Enabled>
	...

080a29ec <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a29ec:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a29ee:	4d0c      	ldr	r5, [pc, #48]	; (80a2a20 <_Z22__fetch_global_Serial1v+0x34>)
 80a29f0:	6829      	ldr	r1, [r5, #0]
 80a29f2:	f011 0401 	ands.w	r4, r1, #1
 80a29f6:	d111      	bne.n	80a2a1c <_Z22__fetch_global_Serial1v+0x30>
 80a29f8:	4628      	mov	r0, r5
 80a29fa:	f7fd fb52 	bl	80a00a2 <__cxa_guard_acquire>
 80a29fe:	b168      	cbz	r0, 80a2a1c <_Z22__fetch_global_Serial1v+0x30>
 80a2a00:	4a08      	ldr	r2, [pc, #32]	; (80a2a24 <_Z22__fetch_global_Serial1v+0x38>)
 80a2a02:	4621      	mov	r1, r4
 80a2a04:	4b08      	ldr	r3, [pc, #32]	; (80a2a28 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2a06:	4809      	ldr	r0, [pc, #36]	; (80a2a2c <_Z22__fetch_global_Serial1v+0x40>)
 80a2a08:	f7ff ffd6 	bl	80a29b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2a0c:	4628      	mov	r0, r5
 80a2a0e:	f7fd fb4d 	bl	80a00ac <__cxa_guard_release>
 80a2a12:	4a07      	ldr	r2, [pc, #28]	; (80a2a30 <_Z22__fetch_global_Serial1v+0x44>)
 80a2a14:	4907      	ldr	r1, [pc, #28]	; (80a2a34 <_Z22__fetch_global_Serial1v+0x48>)
 80a2a16:	4805      	ldr	r0, [pc, #20]	; (80a2a2c <_Z22__fetch_global_Serial1v+0x40>)
 80a2a18:	f000 faac 	bl	80a2f74 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2a1c:	4803      	ldr	r0, [pc, #12]	; (80a2a2c <_Z22__fetch_global_Serial1v+0x40>)
 80a2a1e:	bd38      	pop	{r3, r4, r5, pc}
 80a2a20:	200007ac 	.word	0x200007ac
 80a2a24:	200007b0 	.word	0x200007b0
 80a2a28:	20000728 	.word	0x20000728
 80a2a2c:	20000714 	.word	0x20000714
 80a2a30:	20000390 	.word	0x20000390
 80a2a34:	080a2965 	.word	0x080a2965

080a2a38 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2a38:	7441      	strb	r1, [r0, #17]
 80a2a3a:	4770      	bx	lr

080a2a3c <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a2a3c:	4770      	bx	lr

080a2a3e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a2a3e:	2100      	movs	r1, #0
 80a2a40:	7c00      	ldrb	r0, [r0, #16]
 80a2a42:	f7fe bdef 	b.w	80a1624 <HAL_USB_USART_Receive_Data>

080a2a46 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a2a46:	2101      	movs	r1, #1
 80a2a48:	7c00      	ldrb	r0, [r0, #16]
 80a2a4a:	f7fe bdeb 	b.w	80a1624 <HAL_USB_USART_Receive_Data>

080a2a4e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a2a4e:	7c00      	ldrb	r0, [r0, #16]
 80a2a50:	f7fe bde0 	b.w	80a1614 <HAL_USB_USART_Available_Data_For_Write>

080a2a54 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a2a54:	7c00      	ldrb	r0, [r0, #16]
 80a2a56:	f7fe bdd5 	b.w	80a1604 <HAL_USB_USART_Available_Data>

080a2a5a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a2a5a:	b538      	push	{r3, r4, r5, lr}
 80a2a5c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2a5e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a2a60:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2a62:	f7fe fdd7 	bl	80a1614 <HAL_USB_USART_Available_Data_For_Write>
 80a2a66:	2800      	cmp	r0, #0
 80a2a68:	dc01      	bgt.n	80a2a6e <_ZN9USBSerial5writeEh+0x14>
 80a2a6a:	7c60      	ldrb	r0, [r4, #17]
 80a2a6c:	b120      	cbz	r0, 80a2a78 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a2a6e:	4629      	mov	r1, r5
 80a2a70:	7c20      	ldrb	r0, [r4, #16]
 80a2a72:	f7fe fddf 	bl	80a1634 <HAL_USB_USART_Send_Data>
    return 1;
 80a2a76:	2001      	movs	r0, #1
  }
  return 0;
}
 80a2a78:	bd38      	pop	{r3, r4, r5, pc}

080a2a7a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2a7a:	7c00      	ldrb	r0, [r0, #16]
 80a2a7c:	f7fe bde2 	b.w	80a1644 <HAL_USB_USART_Flush_Data>

080a2a80 <_ZN9USBSerialD0Ev>:
 80a2a80:	b510      	push	{r4, lr}
 80a2a82:	4604      	mov	r4, r0
 80a2a84:	f7fd fb0b 	bl	80a009e <_ZdlPv>
 80a2a88:	4620      	mov	r0, r4
 80a2a8a:	bd10      	pop	{r4, pc}

080a2a8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2a8c:	b510      	push	{r4, lr}
 80a2a8e:	4604      	mov	r4, r0
 80a2a90:	2300      	movs	r3, #0
 80a2a92:	6063      	str	r3, [r4, #4]
 80a2a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2a98:	60a3      	str	r3, [r4, #8]
 80a2a9a:	4b05      	ldr	r3, [pc, #20]	; (80a2ab0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2a9c:	4608      	mov	r0, r1
 80a2a9e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2aa0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2aa2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2aa4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2aa6:	4611      	mov	r1, r2
 80a2aa8:	f7fe fd9c 	bl	80a15e4 <HAL_USB_USART_Init>
}
 80a2aac:	4620      	mov	r0, r4
 80a2aae:	bd10      	pop	{r4, pc}
 80a2ab0:	080a4bac 	.word	0x080a4bac

080a2ab4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2ab4:	2200      	movs	r2, #0
 80a2ab6:	7c00      	ldrb	r0, [r0, #16]
 80a2ab8:	f7fe bd9c 	b.w	80a15f4 <HAL_USB_USART_Begin>

080a2abc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2abc:	b510      	push	{r4, lr}
 80a2abe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2ac0:	2214      	movs	r2, #20
 80a2ac2:	2100      	movs	r1, #0
 80a2ac4:	f001 fb89 	bl	80a41da <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2ac8:	4b05      	ldr	r3, [pc, #20]	; (80a2ae0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2aca:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2acc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2ace:	4b05      	ldr	r3, [pc, #20]	; (80a2ae4 <_Z19acquireSerialBufferv+0x28>)
 80a2ad0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2ad2:	f240 1301 	movw	r3, #257	; 0x101
 80a2ad6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2ad8:	2381      	movs	r3, #129	; 0x81
 80a2ada:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2adc:	bd10      	pop	{r4, pc}
 80a2ade:	bf00      	nop
 80a2ae0:	200008b9 	.word	0x200008b9
 80a2ae4:	20000838 	.word	0x20000838

080a2ae8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2ae8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2aea:	4d0e      	ldr	r5, [pc, #56]	; (80a2b24 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2aec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2aee:	a801      	add	r0, sp, #4
 80a2af0:	f7ff ffe4 	bl	80a2abc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2af4:	6829      	ldr	r1, [r5, #0]
 80a2af6:	f011 0401 	ands.w	r4, r1, #1
 80a2afa:	d110      	bne.n	80a2b1e <_Z16_fetch_usbserialv+0x36>
 80a2afc:	4628      	mov	r0, r5
 80a2afe:	f7fd fad0 	bl	80a00a2 <__cxa_guard_acquire>
 80a2b02:	b160      	cbz	r0, 80a2b1e <_Z16_fetch_usbserialv+0x36>
 80a2b04:	aa01      	add	r2, sp, #4
 80a2b06:	4621      	mov	r1, r4
 80a2b08:	4807      	ldr	r0, [pc, #28]	; (80a2b28 <_Z16_fetch_usbserialv+0x40>)
 80a2b0a:	f7ff ffbf 	bl	80a2a8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2b0e:	4628      	mov	r0, r5
 80a2b10:	f7fd facc 	bl	80a00ac <__cxa_guard_release>
 80a2b14:	4a05      	ldr	r2, [pc, #20]	; (80a2b2c <_Z16_fetch_usbserialv+0x44>)
 80a2b16:	4906      	ldr	r1, [pc, #24]	; (80a2b30 <_Z16_fetch_usbserialv+0x48>)
 80a2b18:	4803      	ldr	r0, [pc, #12]	; (80a2b28 <_Z16_fetch_usbserialv+0x40>)
 80a2b1a:	f000 fa2b 	bl	80a2f74 <__aeabi_atexit>
	return _usbserial;
}
 80a2b1e:	4802      	ldr	r0, [pc, #8]	; (80a2b28 <_Z16_fetch_usbserialv+0x40>)
 80a2b20:	b007      	add	sp, #28
 80a2b22:	bd30      	pop	{r4, r5, pc}
 80a2b24:	20000834 	.word	0x20000834
 80a2b28:	200009bc 	.word	0x200009bc
 80a2b2c:	20000390 	.word	0x20000390
 80a2b30:	080a2a3d 	.word	0x080a2a3d

080a2b34 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2b34:	b510      	push	{r4, lr}
 80a2b36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2b38:	2214      	movs	r2, #20
 80a2b3a:	2100      	movs	r1, #0
 80a2b3c:	f001 fb4d 	bl	80a41da <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2b40:	4b05      	ldr	r3, [pc, #20]	; (80a2b58 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2b42:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2b44:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2b46:	4b05      	ldr	r3, [pc, #20]	; (80a2b5c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2b48:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2b4a:	f240 1301 	movw	r3, #257	; 0x101
 80a2b4e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2b50:	2381      	movs	r3, #129	; 0x81
 80a2b52:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2b54:	bd10      	pop	{r4, pc}
 80a2b56:	bf00      	nop
 80a2b58:	20000a6c 	.word	0x20000a6c
 80a2b5c:	200009d4 	.word	0x200009d4

080a2b60 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2b60:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2b62:	4c0e      	ldr	r4, [pc, #56]	; (80a2b9c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2b64:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2b66:	a801      	add	r0, sp, #4
 80a2b68:	f7ff ffe4 	bl	80a2b34 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2b6c:	6823      	ldr	r3, [r4, #0]
 80a2b6e:	07db      	lsls	r3, r3, #31
 80a2b70:	d410      	bmi.n	80a2b94 <_Z17_fetch_usbserial1v+0x34>
 80a2b72:	4620      	mov	r0, r4
 80a2b74:	f7fd fa95 	bl	80a00a2 <__cxa_guard_acquire>
 80a2b78:	b160      	cbz	r0, 80a2b94 <_Z17_fetch_usbserial1v+0x34>
 80a2b7a:	aa01      	add	r2, sp, #4
 80a2b7c:	2101      	movs	r1, #1
 80a2b7e:	4808      	ldr	r0, [pc, #32]	; (80a2ba0 <_Z17_fetch_usbserial1v+0x40>)
 80a2b80:	f7ff ff84 	bl	80a2a8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2b84:	4620      	mov	r0, r4
 80a2b86:	f7fd fa91 	bl	80a00ac <__cxa_guard_release>
 80a2b8a:	4a06      	ldr	r2, [pc, #24]	; (80a2ba4 <_Z17_fetch_usbserial1v+0x44>)
 80a2b8c:	4906      	ldr	r1, [pc, #24]	; (80a2ba8 <_Z17_fetch_usbserial1v+0x48>)
 80a2b8e:	4804      	ldr	r0, [pc, #16]	; (80a2ba0 <_Z17_fetch_usbserial1v+0x40>)
 80a2b90:	f000 f9f0 	bl	80a2f74 <__aeabi_atexit>
  return _usbserial1;
}
 80a2b94:	4802      	ldr	r0, [pc, #8]	; (80a2ba0 <_Z17_fetch_usbserial1v+0x40>)
 80a2b96:	b006      	add	sp, #24
 80a2b98:	bd10      	pop	{r4, pc}
 80a2b9a:	bf00      	nop
 80a2b9c:	200009d0 	.word	0x200009d0
 80a2ba0:	20000a58 	.word	0x20000a58
 80a2ba4:	20000390 	.word	0x20000390
 80a2ba8:	080a2a3d 	.word	0x080a2a3d

080a2bac <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a2bac:	4770      	bx	lr

080a2bae <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2bae:	2200      	movs	r2, #0
 80a2bb0:	4611      	mov	r1, r2
 80a2bb2:	4610      	mov	r0, r2
 80a2bb4:	f7fe bdb2 	b.w	80a171c <network_ready>

080a2bb8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a2bb8:	4803      	ldr	r0, [pc, #12]	; (80a2bc8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2bba:	4b04      	ldr	r3, [pc, #16]	; (80a2bcc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a2bbc:	4a04      	ldr	r2, [pc, #16]	; (80a2bd0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a2bbe:	4905      	ldr	r1, [pc, #20]	; (80a2bd4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a2bc0:	6003      	str	r3, [r0, #0]
 80a2bc2:	f000 b9d7 	b.w	80a2f74 <__aeabi_atexit>
 80a2bc6:	bf00      	nop
 80a2bc8:	20000b70 	.word	0x20000b70
 80a2bcc:	080a4bdc 	.word	0x080a4bdc
 80a2bd0:	20000390 	.word	0x20000390
 80a2bd4:	080a2bad 	.word	0x080a2bad

080a2bd8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a2bd8:	b510      	push	{r4, lr}
 80a2bda:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a2bdc:	f001 fb53 	bl	80a4286 <strlen>
 80a2be0:	3801      	subs	r0, #1
 80a2be2:	1823      	adds	r3, r4, r0
 80a2be4:	4620      	mov	r0, r4
	while(i<j){
 80a2be6:	4298      	cmp	r0, r3
 80a2be8:	d206      	bcs.n	80a2bf8 <_Z11str_reversePc+0x20>
		c = *i;
 80a2bea:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a2bec:	7819      	ldrb	r1, [r3, #0]
 80a2bee:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a2bf2:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a2bf6:	e7f6      	b.n	80a2be6 <_Z11str_reversePc+0xe>
 80a2bf8:	bd10      	pop	{r4, pc}

080a2bfa <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a2bfa:	b570      	push	{r4, r5, r6, lr}
 80a2bfc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a2bfe:	1e91      	subs	r1, r2, #2
 80a2c00:	2922      	cmp	r1, #34	; 0x22
 80a2c02:	d820      	bhi.n	80a2c46 <ultoa+0x4c>
 80a2c04:	4625      	mov	r5, r4
 80a2c06:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2c08:	b910      	cbnz	r0, 80a2c10 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2c0a:	4423      	add	r3, r4
            *ptr++ = '0';
 80a2c0c:	2230      	movs	r2, #48	; 0x30
 80a2c0e:	e00e      	b.n	80a2c2e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a2c10:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a2c14:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a2c18:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a2c1a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a2c1c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a2c20:	bf94      	ite	ls
 80a2c22:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a2c24:	3157      	addhi	r1, #87	; 0x57
 80a2c26:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a2c2a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2c2c:	e7eb      	b.n	80a2c06 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2c2e:	4299      	cmp	r1, r3
 80a2c30:	d202      	bcs.n	80a2c38 <ultoa+0x3e>
            *ptr++ = '0';
 80a2c32:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2c36:	e7fa      	b.n	80a2c2e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a2c38:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a2c3a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a2c3c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a2c3e:	f7ff ffcb 	bl	80a2bd8 <_Z11str_reversePc>
	return buffer;
 80a2c42:	4620      	mov	r0, r4
 80a2c44:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a2c46:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a2c48:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2c4c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2c4c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2c4e:	4b14      	ldr	r3, [pc, #80]	; (80a2ca0 <serialEventRun+0x54>)
 80a2c50:	b133      	cbz	r3, 80a2c60 <serialEventRun+0x14>
 80a2c52:	f7ff ff49 	bl	80a2ae8 <_Z16_fetch_usbserialv>
 80a2c56:	6803      	ldr	r3, [r0, #0]
 80a2c58:	691b      	ldr	r3, [r3, #16]
 80a2c5a:	4798      	blx	r3
 80a2c5c:	2800      	cmp	r0, #0
 80a2c5e:	dc16      	bgt.n	80a2c8e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2c60:	4b10      	ldr	r3, [pc, #64]	; (80a2ca4 <serialEventRun+0x58>)
 80a2c62:	b133      	cbz	r3, 80a2c72 <serialEventRun+0x26>
 80a2c64:	f7ff fec2 	bl	80a29ec <_Z22__fetch_global_Serial1v>
 80a2c68:	6803      	ldr	r3, [r0, #0]
 80a2c6a:	691b      	ldr	r3, [r3, #16]
 80a2c6c:	4798      	blx	r3
 80a2c6e:	2800      	cmp	r0, #0
 80a2c70:	dc10      	bgt.n	80a2c94 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2c72:	4b0d      	ldr	r3, [pc, #52]	; (80a2ca8 <serialEventRun+0x5c>)
 80a2c74:	b10b      	cbz	r3, 80a2c7a <serialEventRun+0x2e>
 80a2c76:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2c7a:	4b0c      	ldr	r3, [pc, #48]	; (80a2cac <serialEventRun+0x60>)
 80a2c7c:	b17b      	cbz	r3, 80a2c9e <serialEventRun+0x52>
 80a2c7e:	f7ff ff6f 	bl	80a2b60 <_Z17_fetch_usbserial1v>
 80a2c82:	6803      	ldr	r3, [r0, #0]
 80a2c84:	691b      	ldr	r3, [r3, #16]
 80a2c86:	4798      	blx	r3
 80a2c88:	2800      	cmp	r0, #0
 80a2c8a:	dc06      	bgt.n	80a2c9a <serialEventRun+0x4e>
 80a2c8c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2c8e:	f3af 8000 	nop.w
 80a2c92:	e7e5      	b.n	80a2c60 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2c94:	f3af 8000 	nop.w
 80a2c98:	e7eb      	b.n	80a2c72 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2c9a:	f3af 8000 	nop.w
 80a2c9e:	bd08      	pop	{r3, pc}
	...

080a2cb0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2cb0:	b508      	push	{r3, lr}
	serialEventRun();
 80a2cb2:	f7ff ffcb 	bl	80a2c4c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2cb6:	f7fe fb6b 	bl	80a1390 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2cba:	4b01      	ldr	r3, [pc, #4]	; (80a2cc0 <_post_loop+0x10>)
 80a2cbc:	6018      	str	r0, [r3, #0]
 80a2cbe:	bd08      	pop	{r3, pc}
 80a2cc0:	20000b7c 	.word	0x20000b7c

080a2cc4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2cc4:	4802      	ldr	r0, [pc, #8]	; (80a2cd0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2cc6:	4a03      	ldr	r2, [pc, #12]	; (80a2cd4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2cc8:	4903      	ldr	r1, [pc, #12]	; (80a2cd8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2cca:	1a12      	subs	r2, r2, r0
 80a2ccc:	f001 ba7a 	b.w	80a41c4 <memcpy>
 80a2cd0:	40024000 	.word	0x40024000
 80a2cd4:	40024004 	.word	0x40024004
 80a2cd8:	080a4d98 	.word	0x080a4d98

080a2cdc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2cdc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2cde:	2300      	movs	r3, #0
 80a2ce0:	9300      	str	r3, [sp, #0]
 80a2ce2:	461a      	mov	r2, r3
 80a2ce4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2ce8:	f7fe fcf6 	bl	80a16d8 <system_ctrl_set_result>
}
 80a2cec:	b003      	add	sp, #12
 80a2cee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2cf4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2cf4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2cf6:	8843      	ldrh	r3, [r0, #2]
 80a2cf8:	2b0a      	cmp	r3, #10
 80a2cfa:	d008      	beq.n	80a2d0e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2cfc:	2b50      	cmp	r3, #80	; 0x50
 80a2cfe:	d109      	bne.n	80a2d14 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2d00:	4b09      	ldr	r3, [pc, #36]	; (80a2d28 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2d02:	681b      	ldr	r3, [r3, #0]
 80a2d04:	b13b      	cbz	r3, 80a2d16 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2d06:	b003      	add	sp, #12
 80a2d08:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2d0c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2d0e:	f7ff ffe5 	bl	80a2cdc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2d12:	e006      	b.n	80a2d22 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2d14:	2300      	movs	r3, #0
 80a2d16:	9300      	str	r3, [sp, #0]
 80a2d18:	461a      	mov	r2, r3
 80a2d1a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2d1e:	f7fe fcdb 	bl	80a16d8 <system_ctrl_set_result>
        break;
    }
}
 80a2d22:	b003      	add	sp, #12
 80a2d24:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2d28:	20000b74 	.word	0x20000b74

080a2d2c <module_user_init_hook>:

void module_user_init_hook()
{
 80a2d2c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2d2e:	4c10      	ldr	r4, [pc, #64]	; (80a2d70 <module_user_init_hook+0x44>)
 80a2d30:	4d10      	ldr	r5, [pc, #64]	; (80a2d74 <module_user_init_hook+0x48>)
 80a2d32:	6823      	ldr	r3, [r4, #0]
 80a2d34:	42ab      	cmp	r3, r5
 80a2d36:	4b10      	ldr	r3, [pc, #64]	; (80a2d78 <module_user_init_hook+0x4c>)
 80a2d38:	bf0c      	ite	eq
 80a2d3a:	2201      	moveq	r2, #1
 80a2d3c:	2200      	movne	r2, #0
 80a2d3e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2d40:	d002      	beq.n	80a2d48 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2d42:	f7ff ffbf 	bl	80a2cc4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2d46:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a2d48:	f7fe fb0a 	bl	80a1360 <HAL_RNG_GetRandomNumber>
 80a2d4c:	f001 fa4e 	bl	80a41ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2d50:	4b0a      	ldr	r3, [pc, #40]	; (80a2d7c <module_user_init_hook+0x50>)
 80a2d52:	b11b      	cbz	r3, 80a2d5c <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2d54:	f7fe fb04 	bl	80a1360 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a2d58:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2d5c:	2100      	movs	r1, #0
 80a2d5e:	4807      	ldr	r0, [pc, #28]	; (80a2d7c <module_user_init_hook+0x50>)
 80a2d60:	f7fe fcd4 	bl	80a170c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2d68:	2100      	movs	r1, #0
 80a2d6a:	4805      	ldr	r0, [pc, #20]	; (80a2d80 <module_user_init_hook+0x54>)
 80a2d6c:	f7fe bcaa 	b.w	80a16c4 <system_ctrl_set_app_request_handler>
 80a2d70:	40024000 	.word	0x40024000
 80a2d74:	9a271c1e 	.word	0x9a271c1e
 80a2d78:	20000b78 	.word	0x20000b78
 80a2d7c:	00000000 	.word	0x00000000
 80a2d80:	080a2cf5 	.word	0x080a2cf5

080a2d84 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2d84:	b510      	push	{r4, lr}
 80a2d86:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2d88:	480f      	ldr	r0, [pc, #60]	; (80a2dc8 <pinAvailable+0x44>)
 80a2d8a:	f7ff fa41 	bl	80a2210 <_ZN8SPIClass9isEnabledEv>
 80a2d8e:	b128      	cbz	r0, 80a2d9c <pinAvailable+0x18>
 80a2d90:	f1a4 030d 	sub.w	r3, r4, #13
 80a2d94:	2b02      	cmp	r3, #2
 80a2d96:	d801      	bhi.n	80a2d9c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2d98:	2000      	movs	r0, #0
 80a2d9a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2d9c:	f000 f890 	bl	80a2ec0 <_Z19__fetch_global_Wirev>
 80a2da0:	f7fe ffea 	bl	80a1d78 <_ZN7TwoWire9isEnabledEv>
 80a2da4:	b108      	cbz	r0, 80a2daa <pinAvailable+0x26>
 80a2da6:	2c01      	cmp	r4, #1
 80a2da8:	d9f6      	bls.n	80a2d98 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2daa:	f7ff fe1f 	bl	80a29ec <_Z22__fetch_global_Serial1v>
 80a2dae:	f7ff fe19 	bl	80a29e4 <_ZN11USARTSerial9isEnabledEv>
 80a2db2:	b118      	cbz	r0, 80a2dbc <pinAvailable+0x38>
 80a2db4:	f1a4 0312 	sub.w	r3, r4, #18
 80a2db8:	2b01      	cmp	r3, #1
 80a2dba:	d9ed      	bls.n	80a2d98 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2dbc:	2c17      	cmp	r4, #23
 80a2dbe:	bf8c      	ite	hi
 80a2dc0:	2000      	movhi	r0, #0
 80a2dc2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2dc4:	bd10      	pop	{r4, pc}
 80a2dc6:	bf00      	nop
 80a2dc8:	20000bb0 	.word	0x20000bb0

080a2dcc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2dcc:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2dce:	b538      	push	{r3, r4, r5, lr}
 80a2dd0:	4604      	mov	r4, r0
 80a2dd2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2dd4:	d80a      	bhi.n	80a2dec <pinMode+0x20>
 80a2dd6:	29ff      	cmp	r1, #255	; 0xff
 80a2dd8:	d008      	beq.n	80a2dec <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2dda:	f7ff ffd3 	bl	80a2d84 <pinAvailable>
 80a2dde:	b128      	cbz	r0, 80a2dec <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2de0:	4629      	mov	r1, r5
 80a2de2:	4620      	mov	r0, r4
}
 80a2de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2de8:	f7fe baea 	b.w	80a13c0 <HAL_Pin_Mode>
 80a2dec:	bd38      	pop	{r3, r4, r5, pc}

080a2dee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2dee:	b538      	push	{r3, r4, r5, lr}
 80a2df0:	4604      	mov	r4, r0
 80a2df2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2df4:	f7fe faec 	bl	80a13d0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2df8:	28ff      	cmp	r0, #255	; 0xff
 80a2dfa:	d010      	beq.n	80a2e1e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2dfc:	2806      	cmp	r0, #6
 80a2dfe:	d804      	bhi.n	80a2e0a <digitalWrite+0x1c>
 80a2e00:	234d      	movs	r3, #77	; 0x4d
 80a2e02:	fa23 f000 	lsr.w	r0, r3, r0
 80a2e06:	07c3      	lsls	r3, r0, #31
 80a2e08:	d409      	bmi.n	80a2e1e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2e0a:	4620      	mov	r0, r4
 80a2e0c:	f7ff ffba 	bl	80a2d84 <pinAvailable>
 80a2e10:	b128      	cbz	r0, 80a2e1e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2e12:	4629      	mov	r1, r5
 80a2e14:	4620      	mov	r0, r4
}
 80a2e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2e1a:	f7fe bae1 	b.w	80a13e0 <HAL_GPIO_Write>
 80a2e1e:	bd38      	pop	{r3, r4, r5, pc}

080a2e20 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2e20:	b510      	push	{r4, lr}
 80a2e22:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2e24:	f7fe fad4 	bl	80a13d0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2e28:	3804      	subs	r0, #4
 80a2e2a:	b2c0      	uxtb	r0, r0
 80a2e2c:	2801      	cmp	r0, #1
 80a2e2e:	d908      	bls.n	80a2e42 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2e30:	4620      	mov	r0, r4
 80a2e32:	f7ff ffa7 	bl	80a2d84 <pinAvailable>
 80a2e36:	b120      	cbz	r0, 80a2e42 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2e38:	4620      	mov	r0, r4
}
 80a2e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2e3e:	f7fe bad7 	b.w	80a13f0 <HAL_GPIO_Read>
}
 80a2e42:	2000      	movs	r0, #0
 80a2e44:	bd10      	pop	{r4, pc}

080a2e46 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2e46:	b510      	push	{r4, lr}
 80a2e48:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a2e4a:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a2e4c:	bf9c      	itt	ls
 80a2e4e:	340a      	addls	r4, #10
 80a2e50:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2e52:	4620      	mov	r0, r4
 80a2e54:	f7ff ff96 	bl	80a2d84 <pinAvailable>
 80a2e58:	b150      	cbz	r0, 80a2e70 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a2e5a:	2103      	movs	r1, #3
 80a2e5c:	4620      	mov	r0, r4
 80a2e5e:	f7fe faa7 	bl	80a13b0 <HAL_Validate_Pin_Function>
 80a2e62:	2803      	cmp	r0, #3
 80a2e64:	d104      	bne.n	80a2e70 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2e66:	4620      	mov	r0, r4
}
 80a2e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2e6c:	f7fe bae0 	b.w	80a1430 <HAL_ADC_Read>
}
 80a2e70:	2000      	movs	r0, #0
 80a2e72:	bd10      	pop	{r4, pc}

080a2e74 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a2e74:	b538      	push	{r3, r4, r5, lr}
 80a2e76:	4604      	mov	r4, r0
 80a2e78:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a2e7a:	f7ff ff83 	bl	80a2d84 <pinAvailable>
 80a2e7e:	b1f0      	cbz	r0, 80a2ebe <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a2e80:	2104      	movs	r1, #4
 80a2e82:	4620      	mov	r0, r4
 80a2e84:	f7fe fa94 	bl	80a13b0 <HAL_Validate_Pin_Function>
 80a2e88:	2804      	cmp	r0, #4
 80a2e8a:	d105      	bne.n	80a2e98 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a2e8c:	b2a9      	uxth	r1, r5
 80a2e8e:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 80a2e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 80a2e94:	f7fe bac4 	b.w	80a1420 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a2e98:	2102      	movs	r1, #2
 80a2e9a:	4620      	mov	r0, r4
 80a2e9c:	f7fe fa88 	bl	80a13b0 <HAL_Validate_Pin_Function>
 80a2ea0:	2802      	cmp	r0, #2
 80a2ea2:	d10c      	bne.n	80a2ebe <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2ea4:	4620      	mov	r0, r4
 80a2ea6:	f7fe fa93 	bl	80a13d0 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a2eaa:	2801      	cmp	r0, #1
 80a2eac:	d001      	beq.n	80a2eb2 <_Z11analogWritetm+0x3e>
 80a2eae:	2804      	cmp	r0, #4
 80a2eb0:	d105      	bne.n	80a2ebe <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a2eb2:	4629      	mov	r1, r5
 80a2eb4:	4620      	mov	r0, r4
    }
}
 80a2eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a2eba:	f7fe bac1 	b.w	80a1440 <HAL_PWM_Write_Ext>
 80a2ebe:	bd38      	pop	{r3, r4, r5, pc}

080a2ec0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2ec0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2ec2:	4d0b      	ldr	r5, [pc, #44]	; (80a2ef0 <_Z19__fetch_global_Wirev+0x30>)
 80a2ec4:	6829      	ldr	r1, [r5, #0]
 80a2ec6:	f011 0401 	ands.w	r4, r1, #1
 80a2eca:	d10f      	bne.n	80a2eec <_Z19__fetch_global_Wirev+0x2c>
 80a2ecc:	4628      	mov	r0, r5
 80a2ece:	f7fd f8e8 	bl	80a00a2 <__cxa_guard_acquire>
 80a2ed2:	b158      	cbz	r0, 80a2eec <_Z19__fetch_global_Wirev+0x2c>
 80a2ed4:	4621      	mov	r1, r4
 80a2ed6:	4807      	ldr	r0, [pc, #28]	; (80a2ef4 <_Z19__fetch_global_Wirev+0x34>)
 80a2ed8:	f7fe ff3c 	bl	80a1d54 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2edc:	4628      	mov	r0, r5
 80a2ede:	f7fd f8e5 	bl	80a00ac <__cxa_guard_release>
 80a2ee2:	4a05      	ldr	r2, [pc, #20]	; (80a2ef8 <_Z19__fetch_global_Wirev+0x38>)
 80a2ee4:	4905      	ldr	r1, [pc, #20]	; (80a2efc <_Z19__fetch_global_Wirev+0x3c>)
 80a2ee6:	4803      	ldr	r0, [pc, #12]	; (80a2ef4 <_Z19__fetch_global_Wirev+0x34>)
 80a2ee8:	f000 f844 	bl	80a2f74 <__aeabi_atexit>
	return wire;
}
 80a2eec:	4801      	ldr	r0, [pc, #4]	; (80a2ef4 <_Z19__fetch_global_Wirev+0x34>)
 80a2eee:	bd38      	pop	{r3, r4, r5, pc}
 80a2ef0:	20000b80 	.word	0x20000b80
 80a2ef4:	20000b84 	.word	0x20000b84
 80a2ef8:	20000390 	.word	0x20000390
 80a2efc:	080a1cfd 	.word	0x080a1cfd

080a2f00 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2f00:	b513      	push	{r0, r1, r4, lr}
 80a2f02:	4c08      	ldr	r4, [pc, #32]	; (80a2f24 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2f04:	2300      	movs	r3, #0
 80a2f06:	461a      	mov	r2, r3
 80a2f08:	4619      	mov	r1, r3
 80a2f0a:	9300      	str	r3, [sp, #0]
 80a2f0c:	4620      	mov	r0, r4
 80a2f0e:	f7fe ffed 	bl	80a1eec <_ZN9IPAddressC1Ehhhh>
 80a2f12:	4620      	mov	r0, r4
 80a2f14:	4a04      	ldr	r2, [pc, #16]	; (80a2f28 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2f16:	4905      	ldr	r1, [pc, #20]	; (80a2f2c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2f18:	b002      	add	sp, #8
 80a2f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2f1e:	f000 b829 	b.w	80a2f74 <__aeabi_atexit>
 80a2f22:	bf00      	nop
 80a2f24:	20000b98 	.word	0x20000b98
 80a2f28:	20000390 	.word	0x20000390
 80a2f2c:	080a1e75 	.word	0x080a1e75

080a2f30 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2f30:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2f32:	4c0c      	ldr	r4, [pc, #48]	; (80a2f64 <_GLOBAL__sub_I_SPI+0x34>)
 80a2f34:	4e0c      	ldr	r6, [pc, #48]	; (80a2f68 <_GLOBAL__sub_I_SPI+0x38>)
 80a2f36:	4d0d      	ldr	r5, [pc, #52]	; (80a2f6c <_GLOBAL__sub_I_SPI+0x3c>)
 80a2f38:	2100      	movs	r1, #0
 80a2f3a:	4620      	mov	r0, r4
 80a2f3c:	f7ff f954 	bl	80a21e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2f40:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2f42:	4c0b      	ldr	r4, [pc, #44]	; (80a2f70 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2f44:	4632      	mov	r2, r6
 80a2f46:	4629      	mov	r1, r5
 80a2f48:	f000 f814 	bl	80a2f74 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2f4c:	2101      	movs	r1, #1
 80a2f4e:	4620      	mov	r0, r4
 80a2f50:	f7ff f94a 	bl	80a21e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2f54:	4632      	mov	r2, r6
 80a2f56:	4629      	mov	r1, r5
 80a2f58:	4620      	mov	r0, r4
 80a2f5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2f5e:	f000 b809 	b.w	80a2f74 <__aeabi_atexit>
 80a2f62:	bf00      	nop
 80a2f64:	20000bb0 	.word	0x20000bb0
 80a2f68:	20000390 	.word	0x20000390
 80a2f6c:	080a21d9 	.word	0x080a21d9
 80a2f70:	20000bc0 	.word	0x20000bc0

080a2f74 <__aeabi_atexit>:
 80a2f74:	460b      	mov	r3, r1
 80a2f76:	4601      	mov	r1, r0
 80a2f78:	4618      	mov	r0, r3
 80a2f7a:	f001 b915 	b.w	80a41a8 <__cxa_atexit>

080a2f7e <_ZSt25__throw_bad_function_callv>:
 80a2f7e:	b508      	push	{r3, lr}
 80a2f80:	f7fe fbf4 	bl	80a176c <abort>

080a2f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2f84:	4b24      	ldr	r3, [pc, #144]	; (80a3018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2f86:	681a      	ldr	r2, [r3, #0]
 80a2f88:	07d0      	lsls	r0, r2, #31
 80a2f8a:	bf5c      	itt	pl
 80a2f8c:	2201      	movpl	r2, #1
 80a2f8e:	601a      	strpl	r2, [r3, #0]
 80a2f90:	4b22      	ldr	r3, [pc, #136]	; (80a301c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2f92:	681a      	ldr	r2, [r3, #0]
 80a2f94:	07d1      	lsls	r1, r2, #31
 80a2f96:	bf5c      	itt	pl
 80a2f98:	2201      	movpl	r2, #1
 80a2f9a:	601a      	strpl	r2, [r3, #0]
 80a2f9c:	4b20      	ldr	r3, [pc, #128]	; (80a3020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2f9e:	681a      	ldr	r2, [r3, #0]
 80a2fa0:	07d2      	lsls	r2, r2, #31
 80a2fa2:	bf5c      	itt	pl
 80a2fa4:	2201      	movpl	r2, #1
 80a2fa6:	601a      	strpl	r2, [r3, #0]
 80a2fa8:	4b1e      	ldr	r3, [pc, #120]	; (80a3024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2faa:	681a      	ldr	r2, [r3, #0]
 80a2fac:	07d0      	lsls	r0, r2, #31
 80a2fae:	bf5c      	itt	pl
 80a2fb0:	2201      	movpl	r2, #1
 80a2fb2:	601a      	strpl	r2, [r3, #0]
 80a2fb4:	4b1c      	ldr	r3, [pc, #112]	; (80a3028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2fb6:	681a      	ldr	r2, [r3, #0]
 80a2fb8:	07d1      	lsls	r1, r2, #31
 80a2fba:	bf5c      	itt	pl
 80a2fbc:	2201      	movpl	r2, #1
 80a2fbe:	601a      	strpl	r2, [r3, #0]
 80a2fc0:	4b1a      	ldr	r3, [pc, #104]	; (80a302c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2fc2:	681a      	ldr	r2, [r3, #0]
 80a2fc4:	07d2      	lsls	r2, r2, #31
 80a2fc6:	bf5c      	itt	pl
 80a2fc8:	2201      	movpl	r2, #1
 80a2fca:	601a      	strpl	r2, [r3, #0]
 80a2fcc:	4b18      	ldr	r3, [pc, #96]	; (80a3030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2fce:	681a      	ldr	r2, [r3, #0]
 80a2fd0:	07d0      	lsls	r0, r2, #31
 80a2fd2:	bf5c      	itt	pl
 80a2fd4:	2201      	movpl	r2, #1
 80a2fd6:	601a      	strpl	r2, [r3, #0]
 80a2fd8:	4b16      	ldr	r3, [pc, #88]	; (80a3034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2fda:	681a      	ldr	r2, [r3, #0]
 80a2fdc:	07d1      	lsls	r1, r2, #31
 80a2fde:	bf5c      	itt	pl
 80a2fe0:	2201      	movpl	r2, #1
 80a2fe2:	601a      	strpl	r2, [r3, #0]
 80a2fe4:	4b14      	ldr	r3, [pc, #80]	; (80a3038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2fe6:	681a      	ldr	r2, [r3, #0]
 80a2fe8:	07d2      	lsls	r2, r2, #31
 80a2fea:	bf5c      	itt	pl
 80a2fec:	2201      	movpl	r2, #1
 80a2fee:	601a      	strpl	r2, [r3, #0]
 80a2ff0:	4b12      	ldr	r3, [pc, #72]	; (80a303c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2ff2:	681a      	ldr	r2, [r3, #0]
 80a2ff4:	07d0      	lsls	r0, r2, #31
 80a2ff6:	bf5c      	itt	pl
 80a2ff8:	2201      	movpl	r2, #1
 80a2ffa:	601a      	strpl	r2, [r3, #0]
 80a2ffc:	4b10      	ldr	r3, [pc, #64]	; (80a3040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2ffe:	681a      	ldr	r2, [r3, #0]
 80a3000:	07d1      	lsls	r1, r2, #31
 80a3002:	bf5c      	itt	pl
 80a3004:	2201      	movpl	r2, #1
 80a3006:	601a      	strpl	r2, [r3, #0]
 80a3008:	4b0e      	ldr	r3, [pc, #56]	; (80a3044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a300a:	681a      	ldr	r2, [r3, #0]
 80a300c:	07d2      	lsls	r2, r2, #31
 80a300e:	bf5c      	itt	pl
 80a3010:	2201      	movpl	r2, #1
 80a3012:	601a      	strpl	r2, [r3, #0]
 80a3014:	4770      	bx	lr
 80a3016:	bf00      	nop
 80a3018:	20000bfc 	.word	0x20000bfc
 80a301c:	20000bf8 	.word	0x20000bf8
 80a3020:	20000bf4 	.word	0x20000bf4
 80a3024:	20000bf0 	.word	0x20000bf0
 80a3028:	20000bec 	.word	0x20000bec
 80a302c:	20000be8 	.word	0x20000be8
 80a3030:	20000be4 	.word	0x20000be4
 80a3034:	20000be0 	.word	0x20000be0
 80a3038:	20000bdc 	.word	0x20000bdc
 80a303c:	20000bd8 	.word	0x20000bd8
 80a3040:	20000bd4 	.word	0x20000bd4
 80a3044:	20000bd0 	.word	0x20000bd0

080a3048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3048:	4b18      	ldr	r3, [pc, #96]	; (80a30ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a304a:	681a      	ldr	r2, [r3, #0]
 80a304c:	07d1      	lsls	r1, r2, #31
 80a304e:	bf5c      	itt	pl
 80a3050:	2201      	movpl	r2, #1
 80a3052:	601a      	strpl	r2, [r3, #0]
 80a3054:	4b16      	ldr	r3, [pc, #88]	; (80a30b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3056:	681a      	ldr	r2, [r3, #0]
 80a3058:	07d2      	lsls	r2, r2, #31
 80a305a:	bf5c      	itt	pl
 80a305c:	2201      	movpl	r2, #1
 80a305e:	601a      	strpl	r2, [r3, #0]
 80a3060:	4b14      	ldr	r3, [pc, #80]	; (80a30b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3062:	681a      	ldr	r2, [r3, #0]
 80a3064:	07d0      	lsls	r0, r2, #31
 80a3066:	bf5c      	itt	pl
 80a3068:	2201      	movpl	r2, #1
 80a306a:	601a      	strpl	r2, [r3, #0]
 80a306c:	4b12      	ldr	r3, [pc, #72]	; (80a30b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a306e:	681a      	ldr	r2, [r3, #0]
 80a3070:	07d1      	lsls	r1, r2, #31
 80a3072:	bf5c      	itt	pl
 80a3074:	2201      	movpl	r2, #1
 80a3076:	601a      	strpl	r2, [r3, #0]
 80a3078:	4b10      	ldr	r3, [pc, #64]	; (80a30bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a307a:	681a      	ldr	r2, [r3, #0]
 80a307c:	07d2      	lsls	r2, r2, #31
 80a307e:	bf5c      	itt	pl
 80a3080:	2201      	movpl	r2, #1
 80a3082:	601a      	strpl	r2, [r3, #0]
 80a3084:	4b0e      	ldr	r3, [pc, #56]	; (80a30c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3086:	681a      	ldr	r2, [r3, #0]
 80a3088:	07d0      	lsls	r0, r2, #31
 80a308a:	bf5c      	itt	pl
 80a308c:	2201      	movpl	r2, #1
 80a308e:	601a      	strpl	r2, [r3, #0]
 80a3090:	4b0c      	ldr	r3, [pc, #48]	; (80a30c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3092:	681a      	ldr	r2, [r3, #0]
 80a3094:	07d1      	lsls	r1, r2, #31
 80a3096:	bf5c      	itt	pl
 80a3098:	2201      	movpl	r2, #1
 80a309a:	601a      	strpl	r2, [r3, #0]
 80a309c:	4b0a      	ldr	r3, [pc, #40]	; (80a30c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a309e:	681a      	ldr	r2, [r3, #0]
 80a30a0:	07d2      	lsls	r2, r2, #31
 80a30a2:	bf5c      	itt	pl
 80a30a4:	2201      	movpl	r2, #1
 80a30a6:	601a      	strpl	r2, [r3, #0]
 80a30a8:	4770      	bx	lr
 80a30aa:	bf00      	nop
 80a30ac:	20000c1c 	.word	0x20000c1c
 80a30b0:	20000c18 	.word	0x20000c18
 80a30b4:	20000c14 	.word	0x20000c14
 80a30b8:	20000c10 	.word	0x20000c10
 80a30bc:	20000c0c 	.word	0x20000c0c
 80a30c0:	20000c08 	.word	0x20000c08
 80a30c4:	20000c04 	.word	0x20000c04
 80a30c8:	20000c00 	.word	0x20000c00

080a30cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a30cc:	4b18      	ldr	r3, [pc, #96]	; (80a3130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a30ce:	681a      	ldr	r2, [r3, #0]
 80a30d0:	07d1      	lsls	r1, r2, #31
 80a30d2:	bf5c      	itt	pl
 80a30d4:	2201      	movpl	r2, #1
 80a30d6:	601a      	strpl	r2, [r3, #0]
 80a30d8:	4b16      	ldr	r3, [pc, #88]	; (80a3134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a30da:	681a      	ldr	r2, [r3, #0]
 80a30dc:	07d2      	lsls	r2, r2, #31
 80a30de:	bf5c      	itt	pl
 80a30e0:	2201      	movpl	r2, #1
 80a30e2:	601a      	strpl	r2, [r3, #0]
 80a30e4:	4b14      	ldr	r3, [pc, #80]	; (80a3138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a30e6:	681a      	ldr	r2, [r3, #0]
 80a30e8:	07d0      	lsls	r0, r2, #31
 80a30ea:	bf5c      	itt	pl
 80a30ec:	2201      	movpl	r2, #1
 80a30ee:	601a      	strpl	r2, [r3, #0]
 80a30f0:	4b12      	ldr	r3, [pc, #72]	; (80a313c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a30f2:	681a      	ldr	r2, [r3, #0]
 80a30f4:	07d1      	lsls	r1, r2, #31
 80a30f6:	bf5c      	itt	pl
 80a30f8:	2201      	movpl	r2, #1
 80a30fa:	601a      	strpl	r2, [r3, #0]
 80a30fc:	4b10      	ldr	r3, [pc, #64]	; (80a3140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a30fe:	681a      	ldr	r2, [r3, #0]
 80a3100:	07d2      	lsls	r2, r2, #31
 80a3102:	bf5c      	itt	pl
 80a3104:	2201      	movpl	r2, #1
 80a3106:	601a      	strpl	r2, [r3, #0]
 80a3108:	4b0e      	ldr	r3, [pc, #56]	; (80a3144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a310a:	681a      	ldr	r2, [r3, #0]
 80a310c:	07d0      	lsls	r0, r2, #31
 80a310e:	bf5c      	itt	pl
 80a3110:	2201      	movpl	r2, #1
 80a3112:	601a      	strpl	r2, [r3, #0]
 80a3114:	4b0c      	ldr	r3, [pc, #48]	; (80a3148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3116:	681a      	ldr	r2, [r3, #0]
 80a3118:	07d1      	lsls	r1, r2, #31
 80a311a:	bf5c      	itt	pl
 80a311c:	2201      	movpl	r2, #1
 80a311e:	601a      	strpl	r2, [r3, #0]
 80a3120:	4b0a      	ldr	r3, [pc, #40]	; (80a314c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3122:	681a      	ldr	r2, [r3, #0]
 80a3124:	07d2      	lsls	r2, r2, #31
 80a3126:	bf5c      	itt	pl
 80a3128:	2201      	movpl	r2, #1
 80a312a:	601a      	strpl	r2, [r3, #0]
 80a312c:	4770      	bx	lr
 80a312e:	bf00      	nop
 80a3130:	20000c3c 	.word	0x20000c3c
 80a3134:	20000c38 	.word	0x20000c38
 80a3138:	20000c34 	.word	0x20000c34
 80a313c:	20000c30 	.word	0x20000c30
 80a3140:	20000c2c 	.word	0x20000c2c
 80a3144:	20000c28 	.word	0x20000c28
 80a3148:	20000c24 	.word	0x20000c24
 80a314c:	20000c20 	.word	0x20000c20

080a3150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a3150:	4b24      	ldr	r3, [pc, #144]	; (80a31e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a3152:	681a      	ldr	r2, [r3, #0]
 80a3154:	07d0      	lsls	r0, r2, #31
 80a3156:	bf5c      	itt	pl
 80a3158:	2201      	movpl	r2, #1
 80a315a:	601a      	strpl	r2, [r3, #0]
 80a315c:	4b22      	ldr	r3, [pc, #136]	; (80a31e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a315e:	681a      	ldr	r2, [r3, #0]
 80a3160:	07d1      	lsls	r1, r2, #31
 80a3162:	bf5c      	itt	pl
 80a3164:	2201      	movpl	r2, #1
 80a3166:	601a      	strpl	r2, [r3, #0]
 80a3168:	4b20      	ldr	r3, [pc, #128]	; (80a31ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a316a:	681a      	ldr	r2, [r3, #0]
 80a316c:	07d2      	lsls	r2, r2, #31
 80a316e:	bf5c      	itt	pl
 80a3170:	2201      	movpl	r2, #1
 80a3172:	601a      	strpl	r2, [r3, #0]
 80a3174:	4b1e      	ldr	r3, [pc, #120]	; (80a31f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a3176:	681a      	ldr	r2, [r3, #0]
 80a3178:	07d0      	lsls	r0, r2, #31
 80a317a:	bf5c      	itt	pl
 80a317c:	2201      	movpl	r2, #1
 80a317e:	601a      	strpl	r2, [r3, #0]
 80a3180:	4b1c      	ldr	r3, [pc, #112]	; (80a31f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a3182:	681a      	ldr	r2, [r3, #0]
 80a3184:	07d1      	lsls	r1, r2, #31
 80a3186:	bf5c      	itt	pl
 80a3188:	2201      	movpl	r2, #1
 80a318a:	601a      	strpl	r2, [r3, #0]
 80a318c:	4b1a      	ldr	r3, [pc, #104]	; (80a31f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a318e:	681a      	ldr	r2, [r3, #0]
 80a3190:	07d2      	lsls	r2, r2, #31
 80a3192:	bf5c      	itt	pl
 80a3194:	2201      	movpl	r2, #1
 80a3196:	601a      	strpl	r2, [r3, #0]
 80a3198:	4b18      	ldr	r3, [pc, #96]	; (80a31fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a319a:	681a      	ldr	r2, [r3, #0]
 80a319c:	07d0      	lsls	r0, r2, #31
 80a319e:	bf5c      	itt	pl
 80a31a0:	2201      	movpl	r2, #1
 80a31a2:	601a      	strpl	r2, [r3, #0]
 80a31a4:	4b16      	ldr	r3, [pc, #88]	; (80a3200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a31a6:	681a      	ldr	r2, [r3, #0]
 80a31a8:	07d1      	lsls	r1, r2, #31
 80a31aa:	bf5c      	itt	pl
 80a31ac:	2201      	movpl	r2, #1
 80a31ae:	601a      	strpl	r2, [r3, #0]
 80a31b0:	4b14      	ldr	r3, [pc, #80]	; (80a3204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a31b2:	681a      	ldr	r2, [r3, #0]
 80a31b4:	07d2      	lsls	r2, r2, #31
 80a31b6:	bf5c      	itt	pl
 80a31b8:	2201      	movpl	r2, #1
 80a31ba:	601a      	strpl	r2, [r3, #0]
 80a31bc:	4b12      	ldr	r3, [pc, #72]	; (80a3208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a31be:	681a      	ldr	r2, [r3, #0]
 80a31c0:	07d0      	lsls	r0, r2, #31
 80a31c2:	bf5c      	itt	pl
 80a31c4:	2201      	movpl	r2, #1
 80a31c6:	601a      	strpl	r2, [r3, #0]
 80a31c8:	4b10      	ldr	r3, [pc, #64]	; (80a320c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a31ca:	681a      	ldr	r2, [r3, #0]
 80a31cc:	07d1      	lsls	r1, r2, #31
 80a31ce:	bf5c      	itt	pl
 80a31d0:	2201      	movpl	r2, #1
 80a31d2:	601a      	strpl	r2, [r3, #0]
 80a31d4:	4b0e      	ldr	r3, [pc, #56]	; (80a3210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a31d6:	681a      	ldr	r2, [r3, #0]
 80a31d8:	07d2      	lsls	r2, r2, #31
 80a31da:	bf5c      	itt	pl
 80a31dc:	2201      	movpl	r2, #1
 80a31de:	601a      	strpl	r2, [r3, #0]
 80a31e0:	4770      	bx	lr
 80a31e2:	bf00      	nop
 80a31e4:	20000c6c 	.word	0x20000c6c
 80a31e8:	20000c68 	.word	0x20000c68
 80a31ec:	20000c64 	.word	0x20000c64
 80a31f0:	20000c60 	.word	0x20000c60
 80a31f4:	20000c5c 	.word	0x20000c5c
 80a31f8:	20000c58 	.word	0x20000c58
 80a31fc:	20000c54 	.word	0x20000c54
 80a3200:	20000c50 	.word	0x20000c50
 80a3204:	20000c4c 	.word	0x20000c4c
 80a3208:	20000c48 	.word	0x20000c48
 80a320c:	20000c44 	.word	0x20000c44
 80a3210:	20000c40 	.word	0x20000c40

080a3214 <__aeabi_drsub>:
 80a3214:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3218:	e002      	b.n	80a3220 <__adddf3>
 80a321a:	bf00      	nop

080a321c <__aeabi_dsub>:
 80a321c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3220 <__adddf3>:
 80a3220:	b530      	push	{r4, r5, lr}
 80a3222:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3226:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a322a:	ea94 0f05 	teq	r4, r5
 80a322e:	bf08      	it	eq
 80a3230:	ea90 0f02 	teqeq	r0, r2
 80a3234:	bf1f      	itttt	ne
 80a3236:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a323a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a323e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3242:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3246:	f000 80e2 	beq.w	80a340e <__adddf3+0x1ee>
 80a324a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a324e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3252:	bfb8      	it	lt
 80a3254:	426d      	neglt	r5, r5
 80a3256:	dd0c      	ble.n	80a3272 <__adddf3+0x52>
 80a3258:	442c      	add	r4, r5
 80a325a:	ea80 0202 	eor.w	r2, r0, r2
 80a325e:	ea81 0303 	eor.w	r3, r1, r3
 80a3262:	ea82 0000 	eor.w	r0, r2, r0
 80a3266:	ea83 0101 	eor.w	r1, r3, r1
 80a326a:	ea80 0202 	eor.w	r2, r0, r2
 80a326e:	ea81 0303 	eor.w	r3, r1, r3
 80a3272:	2d36      	cmp	r5, #54	; 0x36
 80a3274:	bf88      	it	hi
 80a3276:	bd30      	pophi	{r4, r5, pc}
 80a3278:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a327c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3280:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3284:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3288:	d002      	beq.n	80a3290 <__adddf3+0x70>
 80a328a:	4240      	negs	r0, r0
 80a328c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3290:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3294:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3298:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a329c:	d002      	beq.n	80a32a4 <__adddf3+0x84>
 80a329e:	4252      	negs	r2, r2
 80a32a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a32a4:	ea94 0f05 	teq	r4, r5
 80a32a8:	f000 80a7 	beq.w	80a33fa <__adddf3+0x1da>
 80a32ac:	f1a4 0401 	sub.w	r4, r4, #1
 80a32b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80a32b4:	db0d      	blt.n	80a32d2 <__adddf3+0xb2>
 80a32b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a32ba:	fa22 f205 	lsr.w	r2, r2, r5
 80a32be:	1880      	adds	r0, r0, r2
 80a32c0:	f141 0100 	adc.w	r1, r1, #0
 80a32c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a32c8:	1880      	adds	r0, r0, r2
 80a32ca:	fa43 f305 	asr.w	r3, r3, r5
 80a32ce:	4159      	adcs	r1, r3
 80a32d0:	e00e      	b.n	80a32f0 <__adddf3+0xd0>
 80a32d2:	f1a5 0520 	sub.w	r5, r5, #32
 80a32d6:	f10e 0e20 	add.w	lr, lr, #32
 80a32da:	2a01      	cmp	r2, #1
 80a32dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a32e0:	bf28      	it	cs
 80a32e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a32e6:	fa43 f305 	asr.w	r3, r3, r5
 80a32ea:	18c0      	adds	r0, r0, r3
 80a32ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a32f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a32f4:	d507      	bpl.n	80a3306 <__adddf3+0xe6>
 80a32f6:	f04f 0e00 	mov.w	lr, #0
 80a32fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80a32fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3302:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3306:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a330a:	d31b      	bcc.n	80a3344 <__adddf3+0x124>
 80a330c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3310:	d30c      	bcc.n	80a332c <__adddf3+0x10c>
 80a3312:	0849      	lsrs	r1, r1, #1
 80a3314:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3318:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a331c:	f104 0401 	add.w	r4, r4, #1
 80a3320:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3324:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3328:	f080 809a 	bcs.w	80a3460 <__adddf3+0x240>
 80a332c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3330:	bf08      	it	eq
 80a3332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3336:	f150 0000 	adcs.w	r0, r0, #0
 80a333a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a333e:	ea41 0105 	orr.w	r1, r1, r5
 80a3342:	bd30      	pop	{r4, r5, pc}
 80a3344:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3348:	4140      	adcs	r0, r0
 80a334a:	eb41 0101 	adc.w	r1, r1, r1
 80a334e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3352:	f1a4 0401 	sub.w	r4, r4, #1
 80a3356:	d1e9      	bne.n	80a332c <__adddf3+0x10c>
 80a3358:	f091 0f00 	teq	r1, #0
 80a335c:	bf04      	itt	eq
 80a335e:	4601      	moveq	r1, r0
 80a3360:	2000      	moveq	r0, #0
 80a3362:	fab1 f381 	clz	r3, r1
 80a3366:	bf08      	it	eq
 80a3368:	3320      	addeq	r3, #32
 80a336a:	f1a3 030b 	sub.w	r3, r3, #11
 80a336e:	f1b3 0220 	subs.w	r2, r3, #32
 80a3372:	da0c      	bge.n	80a338e <__adddf3+0x16e>
 80a3374:	320c      	adds	r2, #12
 80a3376:	dd08      	ble.n	80a338a <__adddf3+0x16a>
 80a3378:	f102 0c14 	add.w	ip, r2, #20
 80a337c:	f1c2 020c 	rsb	r2, r2, #12
 80a3380:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3384:	fa21 f102 	lsr.w	r1, r1, r2
 80a3388:	e00c      	b.n	80a33a4 <__adddf3+0x184>
 80a338a:	f102 0214 	add.w	r2, r2, #20
 80a338e:	bfd8      	it	le
 80a3390:	f1c2 0c20 	rsble	ip, r2, #32
 80a3394:	fa01 f102 	lsl.w	r1, r1, r2
 80a3398:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a339c:	bfdc      	itt	le
 80a339e:	ea41 010c 	orrle.w	r1, r1, ip
 80a33a2:	4090      	lslle	r0, r2
 80a33a4:	1ae4      	subs	r4, r4, r3
 80a33a6:	bfa2      	ittt	ge
 80a33a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a33ac:	4329      	orrge	r1, r5
 80a33ae:	bd30      	popge	{r4, r5, pc}
 80a33b0:	ea6f 0404 	mvn.w	r4, r4
 80a33b4:	3c1f      	subs	r4, #31
 80a33b6:	da1c      	bge.n	80a33f2 <__adddf3+0x1d2>
 80a33b8:	340c      	adds	r4, #12
 80a33ba:	dc0e      	bgt.n	80a33da <__adddf3+0x1ba>
 80a33bc:	f104 0414 	add.w	r4, r4, #20
 80a33c0:	f1c4 0220 	rsb	r2, r4, #32
 80a33c4:	fa20 f004 	lsr.w	r0, r0, r4
 80a33c8:	fa01 f302 	lsl.w	r3, r1, r2
 80a33cc:	ea40 0003 	orr.w	r0, r0, r3
 80a33d0:	fa21 f304 	lsr.w	r3, r1, r4
 80a33d4:	ea45 0103 	orr.w	r1, r5, r3
 80a33d8:	bd30      	pop	{r4, r5, pc}
 80a33da:	f1c4 040c 	rsb	r4, r4, #12
 80a33de:	f1c4 0220 	rsb	r2, r4, #32
 80a33e2:	fa20 f002 	lsr.w	r0, r0, r2
 80a33e6:	fa01 f304 	lsl.w	r3, r1, r4
 80a33ea:	ea40 0003 	orr.w	r0, r0, r3
 80a33ee:	4629      	mov	r1, r5
 80a33f0:	bd30      	pop	{r4, r5, pc}
 80a33f2:	fa21 f004 	lsr.w	r0, r1, r4
 80a33f6:	4629      	mov	r1, r5
 80a33f8:	bd30      	pop	{r4, r5, pc}
 80a33fa:	f094 0f00 	teq	r4, #0
 80a33fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3402:	bf06      	itte	eq
 80a3404:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3408:	3401      	addeq	r4, #1
 80a340a:	3d01      	subne	r5, #1
 80a340c:	e74e      	b.n	80a32ac <__adddf3+0x8c>
 80a340e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3412:	bf18      	it	ne
 80a3414:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3418:	d029      	beq.n	80a346e <__adddf3+0x24e>
 80a341a:	ea94 0f05 	teq	r4, r5
 80a341e:	bf08      	it	eq
 80a3420:	ea90 0f02 	teqeq	r0, r2
 80a3424:	d005      	beq.n	80a3432 <__adddf3+0x212>
 80a3426:	ea54 0c00 	orrs.w	ip, r4, r0
 80a342a:	bf04      	itt	eq
 80a342c:	4619      	moveq	r1, r3
 80a342e:	4610      	moveq	r0, r2
 80a3430:	bd30      	pop	{r4, r5, pc}
 80a3432:	ea91 0f03 	teq	r1, r3
 80a3436:	bf1e      	ittt	ne
 80a3438:	2100      	movne	r1, #0
 80a343a:	2000      	movne	r0, #0
 80a343c:	bd30      	popne	{r4, r5, pc}
 80a343e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3442:	d105      	bne.n	80a3450 <__adddf3+0x230>
 80a3444:	0040      	lsls	r0, r0, #1
 80a3446:	4149      	adcs	r1, r1
 80a3448:	bf28      	it	cs
 80a344a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a344e:	bd30      	pop	{r4, r5, pc}
 80a3450:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3454:	bf3c      	itt	cc
 80a3456:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a345a:	bd30      	popcc	{r4, r5, pc}
 80a345c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3460:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3464:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3468:	f04f 0000 	mov.w	r0, #0
 80a346c:	bd30      	pop	{r4, r5, pc}
 80a346e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3472:	bf1a      	itte	ne
 80a3474:	4619      	movne	r1, r3
 80a3476:	4610      	movne	r0, r2
 80a3478:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a347c:	bf1c      	itt	ne
 80a347e:	460b      	movne	r3, r1
 80a3480:	4602      	movne	r2, r0
 80a3482:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3486:	bf06      	itte	eq
 80a3488:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a348c:	ea91 0f03 	teqeq	r1, r3
 80a3490:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3494:	bd30      	pop	{r4, r5, pc}
 80a3496:	bf00      	nop

080a3498 <__aeabi_ui2d>:
 80a3498:	f090 0f00 	teq	r0, #0
 80a349c:	bf04      	itt	eq
 80a349e:	2100      	moveq	r1, #0
 80a34a0:	4770      	bxeq	lr
 80a34a2:	b530      	push	{r4, r5, lr}
 80a34a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a34a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a34ac:	f04f 0500 	mov.w	r5, #0
 80a34b0:	f04f 0100 	mov.w	r1, #0
 80a34b4:	e750      	b.n	80a3358 <__adddf3+0x138>
 80a34b6:	bf00      	nop

080a34b8 <__aeabi_i2d>:
 80a34b8:	f090 0f00 	teq	r0, #0
 80a34bc:	bf04      	itt	eq
 80a34be:	2100      	moveq	r1, #0
 80a34c0:	4770      	bxeq	lr
 80a34c2:	b530      	push	{r4, r5, lr}
 80a34c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a34c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a34cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a34d0:	bf48      	it	mi
 80a34d2:	4240      	negmi	r0, r0
 80a34d4:	f04f 0100 	mov.w	r1, #0
 80a34d8:	e73e      	b.n	80a3358 <__adddf3+0x138>
 80a34da:	bf00      	nop

080a34dc <__aeabi_f2d>:
 80a34dc:	0042      	lsls	r2, r0, #1
 80a34de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a34e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a34e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a34ea:	bf1f      	itttt	ne
 80a34ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a34f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a34f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a34f8:	4770      	bxne	lr
 80a34fa:	f092 0f00 	teq	r2, #0
 80a34fe:	bf14      	ite	ne
 80a3500:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3504:	4770      	bxeq	lr
 80a3506:	b530      	push	{r4, r5, lr}
 80a3508:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a350c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3510:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3514:	e720      	b.n	80a3358 <__adddf3+0x138>
 80a3516:	bf00      	nop

080a3518 <__aeabi_ul2d>:
 80a3518:	ea50 0201 	orrs.w	r2, r0, r1
 80a351c:	bf08      	it	eq
 80a351e:	4770      	bxeq	lr
 80a3520:	b530      	push	{r4, r5, lr}
 80a3522:	f04f 0500 	mov.w	r5, #0
 80a3526:	e00a      	b.n	80a353e <__aeabi_l2d+0x16>

080a3528 <__aeabi_l2d>:
 80a3528:	ea50 0201 	orrs.w	r2, r0, r1
 80a352c:	bf08      	it	eq
 80a352e:	4770      	bxeq	lr
 80a3530:	b530      	push	{r4, r5, lr}
 80a3532:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3536:	d502      	bpl.n	80a353e <__aeabi_l2d+0x16>
 80a3538:	4240      	negs	r0, r0
 80a353a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a353e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3542:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3546:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a354a:	f43f aedc 	beq.w	80a3306 <__adddf3+0xe6>
 80a354e:	f04f 0203 	mov.w	r2, #3
 80a3552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3556:	bf18      	it	ne
 80a3558:	3203      	addne	r2, #3
 80a355a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a355e:	bf18      	it	ne
 80a3560:	3203      	addne	r2, #3
 80a3562:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3566:	f1c2 0320 	rsb	r3, r2, #32
 80a356a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a356e:	fa20 f002 	lsr.w	r0, r0, r2
 80a3572:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3576:	ea40 000e 	orr.w	r0, r0, lr
 80a357a:	fa21 f102 	lsr.w	r1, r1, r2
 80a357e:	4414      	add	r4, r2
 80a3580:	e6c1      	b.n	80a3306 <__adddf3+0xe6>
 80a3582:	bf00      	nop

080a3584 <__aeabi_dmul>:
 80a3584:	b570      	push	{r4, r5, r6, lr}
 80a3586:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a358a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a358e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3592:	bf1d      	ittte	ne
 80a3594:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3598:	ea94 0f0c 	teqne	r4, ip
 80a359c:	ea95 0f0c 	teqne	r5, ip
 80a35a0:	f000 f8de 	bleq	80a3760 <__aeabi_dmul+0x1dc>
 80a35a4:	442c      	add	r4, r5
 80a35a6:	ea81 0603 	eor.w	r6, r1, r3
 80a35aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a35ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a35b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a35b6:	bf18      	it	ne
 80a35b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a35bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a35c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a35c4:	d038      	beq.n	80a3638 <__aeabi_dmul+0xb4>
 80a35c6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a35ca:	f04f 0500 	mov.w	r5, #0
 80a35ce:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a35d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a35d6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a35da:	f04f 0600 	mov.w	r6, #0
 80a35de:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a35e2:	f09c 0f00 	teq	ip, #0
 80a35e6:	bf18      	it	ne
 80a35e8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a35ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a35f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a35f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a35f8:	d204      	bcs.n	80a3604 <__aeabi_dmul+0x80>
 80a35fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a35fe:	416d      	adcs	r5, r5
 80a3600:	eb46 0606 	adc.w	r6, r6, r6
 80a3604:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3608:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a360c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3610:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3614:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3618:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a361c:	bf88      	it	hi
 80a361e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3622:	d81e      	bhi.n	80a3662 <__aeabi_dmul+0xde>
 80a3624:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3628:	bf08      	it	eq
 80a362a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a362e:	f150 0000 	adcs.w	r0, r0, #0
 80a3632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3636:	bd70      	pop	{r4, r5, r6, pc}
 80a3638:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a363c:	ea46 0101 	orr.w	r1, r6, r1
 80a3640:	ea40 0002 	orr.w	r0, r0, r2
 80a3644:	ea81 0103 	eor.w	r1, r1, r3
 80a3648:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a364c:	bfc2      	ittt	gt
 80a364e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3652:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3656:	bd70      	popgt	{r4, r5, r6, pc}
 80a3658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a365c:	f04f 0e00 	mov.w	lr, #0
 80a3660:	3c01      	subs	r4, #1
 80a3662:	f300 80ab 	bgt.w	80a37bc <__aeabi_dmul+0x238>
 80a3666:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a366a:	bfde      	ittt	le
 80a366c:	2000      	movle	r0, #0
 80a366e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3672:	bd70      	pople	{r4, r5, r6, pc}
 80a3674:	f1c4 0400 	rsb	r4, r4, #0
 80a3678:	3c20      	subs	r4, #32
 80a367a:	da35      	bge.n	80a36e8 <__aeabi_dmul+0x164>
 80a367c:	340c      	adds	r4, #12
 80a367e:	dc1b      	bgt.n	80a36b8 <__aeabi_dmul+0x134>
 80a3680:	f104 0414 	add.w	r4, r4, #20
 80a3684:	f1c4 0520 	rsb	r5, r4, #32
 80a3688:	fa00 f305 	lsl.w	r3, r0, r5
 80a368c:	fa20 f004 	lsr.w	r0, r0, r4
 80a3690:	fa01 f205 	lsl.w	r2, r1, r5
 80a3694:	ea40 0002 	orr.w	r0, r0, r2
 80a3698:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a369c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a36a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a36a4:	fa21 f604 	lsr.w	r6, r1, r4
 80a36a8:	eb42 0106 	adc.w	r1, r2, r6
 80a36ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a36b0:	bf08      	it	eq
 80a36b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a36b6:	bd70      	pop	{r4, r5, r6, pc}
 80a36b8:	f1c4 040c 	rsb	r4, r4, #12
 80a36bc:	f1c4 0520 	rsb	r5, r4, #32
 80a36c0:	fa00 f304 	lsl.w	r3, r0, r4
 80a36c4:	fa20 f005 	lsr.w	r0, r0, r5
 80a36c8:	fa01 f204 	lsl.w	r2, r1, r4
 80a36cc:	ea40 0002 	orr.w	r0, r0, r2
 80a36d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a36d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a36d8:	f141 0100 	adc.w	r1, r1, #0
 80a36dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a36e0:	bf08      	it	eq
 80a36e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a36e6:	bd70      	pop	{r4, r5, r6, pc}
 80a36e8:	f1c4 0520 	rsb	r5, r4, #32
 80a36ec:	fa00 f205 	lsl.w	r2, r0, r5
 80a36f0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a36f4:	fa20 f304 	lsr.w	r3, r0, r4
 80a36f8:	fa01 f205 	lsl.w	r2, r1, r5
 80a36fc:	ea43 0302 	orr.w	r3, r3, r2
 80a3700:	fa21 f004 	lsr.w	r0, r1, r4
 80a3704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3708:	fa21 f204 	lsr.w	r2, r1, r4
 80a370c:	ea20 0002 	bic.w	r0, r0, r2
 80a3710:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3718:	bf08      	it	eq
 80a371a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a371e:	bd70      	pop	{r4, r5, r6, pc}
 80a3720:	f094 0f00 	teq	r4, #0
 80a3724:	d10f      	bne.n	80a3746 <__aeabi_dmul+0x1c2>
 80a3726:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a372a:	0040      	lsls	r0, r0, #1
 80a372c:	eb41 0101 	adc.w	r1, r1, r1
 80a3730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3734:	bf08      	it	eq
 80a3736:	3c01      	subeq	r4, #1
 80a3738:	d0f7      	beq.n	80a372a <__aeabi_dmul+0x1a6>
 80a373a:	ea41 0106 	orr.w	r1, r1, r6
 80a373e:	f095 0f00 	teq	r5, #0
 80a3742:	bf18      	it	ne
 80a3744:	4770      	bxne	lr
 80a3746:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a374a:	0052      	lsls	r2, r2, #1
 80a374c:	eb43 0303 	adc.w	r3, r3, r3
 80a3750:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3754:	bf08      	it	eq
 80a3756:	3d01      	subeq	r5, #1
 80a3758:	d0f7      	beq.n	80a374a <__aeabi_dmul+0x1c6>
 80a375a:	ea43 0306 	orr.w	r3, r3, r6
 80a375e:	4770      	bx	lr
 80a3760:	ea94 0f0c 	teq	r4, ip
 80a3764:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3768:	bf18      	it	ne
 80a376a:	ea95 0f0c 	teqne	r5, ip
 80a376e:	d00c      	beq.n	80a378a <__aeabi_dmul+0x206>
 80a3770:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3774:	bf18      	it	ne
 80a3776:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a377a:	d1d1      	bne.n	80a3720 <__aeabi_dmul+0x19c>
 80a377c:	ea81 0103 	eor.w	r1, r1, r3
 80a3780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3784:	f04f 0000 	mov.w	r0, #0
 80a3788:	bd70      	pop	{r4, r5, r6, pc}
 80a378a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a378e:	bf06      	itte	eq
 80a3790:	4610      	moveq	r0, r2
 80a3792:	4619      	moveq	r1, r3
 80a3794:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3798:	d019      	beq.n	80a37ce <__aeabi_dmul+0x24a>
 80a379a:	ea94 0f0c 	teq	r4, ip
 80a379e:	d102      	bne.n	80a37a6 <__aeabi_dmul+0x222>
 80a37a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a37a4:	d113      	bne.n	80a37ce <__aeabi_dmul+0x24a>
 80a37a6:	ea95 0f0c 	teq	r5, ip
 80a37aa:	d105      	bne.n	80a37b8 <__aeabi_dmul+0x234>
 80a37ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a37b0:	bf1c      	itt	ne
 80a37b2:	4610      	movne	r0, r2
 80a37b4:	4619      	movne	r1, r3
 80a37b6:	d10a      	bne.n	80a37ce <__aeabi_dmul+0x24a>
 80a37b8:	ea81 0103 	eor.w	r1, r1, r3
 80a37bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a37c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a37c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a37c8:	f04f 0000 	mov.w	r0, #0
 80a37cc:	bd70      	pop	{r4, r5, r6, pc}
 80a37ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a37d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a37d6:	bd70      	pop	{r4, r5, r6, pc}

080a37d8 <__aeabi_ddiv>:
 80a37d8:	b570      	push	{r4, r5, r6, lr}
 80a37da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a37de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a37e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a37e6:	bf1d      	ittte	ne
 80a37e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a37ec:	ea94 0f0c 	teqne	r4, ip
 80a37f0:	ea95 0f0c 	teqne	r5, ip
 80a37f4:	f000 f8a7 	bleq	80a3946 <__aeabi_ddiv+0x16e>
 80a37f8:	eba4 0405 	sub.w	r4, r4, r5
 80a37fc:	ea81 0e03 	eor.w	lr, r1, r3
 80a3800:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3804:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3808:	f000 8088 	beq.w	80a391c <__aeabi_ddiv+0x144>
 80a380c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3810:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3814:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3818:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a381c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3820:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3824:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3828:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a382c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3830:	429d      	cmp	r5, r3
 80a3832:	bf08      	it	eq
 80a3834:	4296      	cmpeq	r6, r2
 80a3836:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a383a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a383e:	d202      	bcs.n	80a3846 <__aeabi_ddiv+0x6e>
 80a3840:	085b      	lsrs	r3, r3, #1
 80a3842:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3846:	1ab6      	subs	r6, r6, r2
 80a3848:	eb65 0503 	sbc.w	r5, r5, r3
 80a384c:	085b      	lsrs	r3, r3, #1
 80a384e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3852:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3856:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a385a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a385e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3862:	bf22      	ittt	cs
 80a3864:	1ab6      	subcs	r6, r6, r2
 80a3866:	4675      	movcs	r5, lr
 80a3868:	ea40 000c 	orrcs.w	r0, r0, ip
 80a386c:	085b      	lsrs	r3, r3, #1
 80a386e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3872:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3876:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a387a:	bf22      	ittt	cs
 80a387c:	1ab6      	subcs	r6, r6, r2
 80a387e:	4675      	movcs	r5, lr
 80a3880:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3884:	085b      	lsrs	r3, r3, #1
 80a3886:	ea4f 0232 	mov.w	r2, r2, rrx
 80a388a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a388e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3892:	bf22      	ittt	cs
 80a3894:	1ab6      	subcs	r6, r6, r2
 80a3896:	4675      	movcs	r5, lr
 80a3898:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a389c:	085b      	lsrs	r3, r3, #1
 80a389e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a38a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a38a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a38aa:	bf22      	ittt	cs
 80a38ac:	1ab6      	subcs	r6, r6, r2
 80a38ae:	4675      	movcs	r5, lr
 80a38b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a38b4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a38b8:	d018      	beq.n	80a38ec <__aeabi_ddiv+0x114>
 80a38ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a38be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a38c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a38c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a38ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a38ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a38d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a38d6:	d1c0      	bne.n	80a385a <__aeabi_ddiv+0x82>
 80a38d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a38dc:	d10b      	bne.n	80a38f6 <__aeabi_ddiv+0x11e>
 80a38de:	ea41 0100 	orr.w	r1, r1, r0
 80a38e2:	f04f 0000 	mov.w	r0, #0
 80a38e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a38ea:	e7b6      	b.n	80a385a <__aeabi_ddiv+0x82>
 80a38ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a38f0:	bf04      	itt	eq
 80a38f2:	4301      	orreq	r1, r0
 80a38f4:	2000      	moveq	r0, #0
 80a38f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a38fa:	bf88      	it	hi
 80a38fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3900:	f63f aeaf 	bhi.w	80a3662 <__aeabi_dmul+0xde>
 80a3904:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3908:	bf04      	itt	eq
 80a390a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a390e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3912:	f150 0000 	adcs.w	r0, r0, #0
 80a3916:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a391a:	bd70      	pop	{r4, r5, r6, pc}
 80a391c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3920:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3924:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3928:	bfc2      	ittt	gt
 80a392a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a392e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3932:	bd70      	popgt	{r4, r5, r6, pc}
 80a3934:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3938:	f04f 0e00 	mov.w	lr, #0
 80a393c:	3c01      	subs	r4, #1
 80a393e:	e690      	b.n	80a3662 <__aeabi_dmul+0xde>
 80a3940:	ea45 0e06 	orr.w	lr, r5, r6
 80a3944:	e68d      	b.n	80a3662 <__aeabi_dmul+0xde>
 80a3946:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a394a:	ea94 0f0c 	teq	r4, ip
 80a394e:	bf08      	it	eq
 80a3950:	ea95 0f0c 	teqeq	r5, ip
 80a3954:	f43f af3b 	beq.w	80a37ce <__aeabi_dmul+0x24a>
 80a3958:	ea94 0f0c 	teq	r4, ip
 80a395c:	d10a      	bne.n	80a3974 <__aeabi_ddiv+0x19c>
 80a395e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3962:	f47f af34 	bne.w	80a37ce <__aeabi_dmul+0x24a>
 80a3966:	ea95 0f0c 	teq	r5, ip
 80a396a:	f47f af25 	bne.w	80a37b8 <__aeabi_dmul+0x234>
 80a396e:	4610      	mov	r0, r2
 80a3970:	4619      	mov	r1, r3
 80a3972:	e72c      	b.n	80a37ce <__aeabi_dmul+0x24a>
 80a3974:	ea95 0f0c 	teq	r5, ip
 80a3978:	d106      	bne.n	80a3988 <__aeabi_ddiv+0x1b0>
 80a397a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a397e:	f43f aefd 	beq.w	80a377c <__aeabi_dmul+0x1f8>
 80a3982:	4610      	mov	r0, r2
 80a3984:	4619      	mov	r1, r3
 80a3986:	e722      	b.n	80a37ce <__aeabi_dmul+0x24a>
 80a3988:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a398c:	bf18      	it	ne
 80a398e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3992:	f47f aec5 	bne.w	80a3720 <__aeabi_dmul+0x19c>
 80a3996:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a399a:	f47f af0d 	bne.w	80a37b8 <__aeabi_dmul+0x234>
 80a399e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a39a2:	f47f aeeb 	bne.w	80a377c <__aeabi_dmul+0x1f8>
 80a39a6:	e712      	b.n	80a37ce <__aeabi_dmul+0x24a>

080a39a8 <__gedf2>:
 80a39a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a39ac:	e006      	b.n	80a39bc <__cmpdf2+0x4>
 80a39ae:	bf00      	nop

080a39b0 <__ledf2>:
 80a39b0:	f04f 0c01 	mov.w	ip, #1
 80a39b4:	e002      	b.n	80a39bc <__cmpdf2+0x4>
 80a39b6:	bf00      	nop

080a39b8 <__cmpdf2>:
 80a39b8:	f04f 0c01 	mov.w	ip, #1
 80a39bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a39c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a39c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a39c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a39cc:	bf18      	it	ne
 80a39ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a39d2:	d01b      	beq.n	80a3a0c <__cmpdf2+0x54>
 80a39d4:	b001      	add	sp, #4
 80a39d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a39da:	bf0c      	ite	eq
 80a39dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a39e0:	ea91 0f03 	teqne	r1, r3
 80a39e4:	bf02      	ittt	eq
 80a39e6:	ea90 0f02 	teqeq	r0, r2
 80a39ea:	2000      	moveq	r0, #0
 80a39ec:	4770      	bxeq	lr
 80a39ee:	f110 0f00 	cmn.w	r0, #0
 80a39f2:	ea91 0f03 	teq	r1, r3
 80a39f6:	bf58      	it	pl
 80a39f8:	4299      	cmppl	r1, r3
 80a39fa:	bf08      	it	eq
 80a39fc:	4290      	cmpeq	r0, r2
 80a39fe:	bf2c      	ite	cs
 80a3a00:	17d8      	asrcs	r0, r3, #31
 80a3a02:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3a06:	f040 0001 	orr.w	r0, r0, #1
 80a3a0a:	4770      	bx	lr
 80a3a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3a14:	d102      	bne.n	80a3a1c <__cmpdf2+0x64>
 80a3a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3a1a:	d107      	bne.n	80a3a2c <__cmpdf2+0x74>
 80a3a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3a24:	d1d6      	bne.n	80a39d4 <__cmpdf2+0x1c>
 80a3a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3a2a:	d0d3      	beq.n	80a39d4 <__cmpdf2+0x1c>
 80a3a2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3a30:	4770      	bx	lr
 80a3a32:	bf00      	nop

080a3a34 <__aeabi_cdrcmple>:
 80a3a34:	4684      	mov	ip, r0
 80a3a36:	4610      	mov	r0, r2
 80a3a38:	4662      	mov	r2, ip
 80a3a3a:	468c      	mov	ip, r1
 80a3a3c:	4619      	mov	r1, r3
 80a3a3e:	4663      	mov	r3, ip
 80a3a40:	e000      	b.n	80a3a44 <__aeabi_cdcmpeq>
 80a3a42:	bf00      	nop

080a3a44 <__aeabi_cdcmpeq>:
 80a3a44:	b501      	push	{r0, lr}
 80a3a46:	f7ff ffb7 	bl	80a39b8 <__cmpdf2>
 80a3a4a:	2800      	cmp	r0, #0
 80a3a4c:	bf48      	it	mi
 80a3a4e:	f110 0f00 	cmnmi.w	r0, #0
 80a3a52:	bd01      	pop	{r0, pc}

080a3a54 <__aeabi_dcmpeq>:
 80a3a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3a58:	f7ff fff4 	bl	80a3a44 <__aeabi_cdcmpeq>
 80a3a5c:	bf0c      	ite	eq
 80a3a5e:	2001      	moveq	r0, #1
 80a3a60:	2000      	movne	r0, #0
 80a3a62:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3a66:	bf00      	nop

080a3a68 <__aeabi_dcmplt>:
 80a3a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3a6c:	f7ff ffea 	bl	80a3a44 <__aeabi_cdcmpeq>
 80a3a70:	bf34      	ite	cc
 80a3a72:	2001      	movcc	r0, #1
 80a3a74:	2000      	movcs	r0, #0
 80a3a76:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3a7a:	bf00      	nop

080a3a7c <__aeabi_dcmple>:
 80a3a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3a80:	f7ff ffe0 	bl	80a3a44 <__aeabi_cdcmpeq>
 80a3a84:	bf94      	ite	ls
 80a3a86:	2001      	movls	r0, #1
 80a3a88:	2000      	movhi	r0, #0
 80a3a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3a8e:	bf00      	nop

080a3a90 <__aeabi_dcmpge>:
 80a3a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3a94:	f7ff ffce 	bl	80a3a34 <__aeabi_cdrcmple>
 80a3a98:	bf94      	ite	ls
 80a3a9a:	2001      	movls	r0, #1
 80a3a9c:	2000      	movhi	r0, #0
 80a3a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3aa2:	bf00      	nop

080a3aa4 <__aeabi_dcmpgt>:
 80a3aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3aa8:	f7ff ffc4 	bl	80a3a34 <__aeabi_cdrcmple>
 80a3aac:	bf34      	ite	cc
 80a3aae:	2001      	movcc	r0, #1
 80a3ab0:	2000      	movcs	r0, #0
 80a3ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3ab6:	bf00      	nop

080a3ab8 <__aeabi_dcmpun>:
 80a3ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3ac0:	d102      	bne.n	80a3ac8 <__aeabi_dcmpun+0x10>
 80a3ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3ac6:	d10a      	bne.n	80a3ade <__aeabi_dcmpun+0x26>
 80a3ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3ad0:	d102      	bne.n	80a3ad8 <__aeabi_dcmpun+0x20>
 80a3ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3ad6:	d102      	bne.n	80a3ade <__aeabi_dcmpun+0x26>
 80a3ad8:	f04f 0000 	mov.w	r0, #0
 80a3adc:	4770      	bx	lr
 80a3ade:	f04f 0001 	mov.w	r0, #1
 80a3ae2:	4770      	bx	lr

080a3ae4 <__aeabi_d2iz>:
 80a3ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3aec:	d215      	bcs.n	80a3b1a <__aeabi_d2iz+0x36>
 80a3aee:	d511      	bpl.n	80a3b14 <__aeabi_d2iz+0x30>
 80a3af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3af8:	d912      	bls.n	80a3b20 <__aeabi_d2iz+0x3c>
 80a3afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3b0a:	fa23 f002 	lsr.w	r0, r3, r2
 80a3b0e:	bf18      	it	ne
 80a3b10:	4240      	negne	r0, r0
 80a3b12:	4770      	bx	lr
 80a3b14:	f04f 0000 	mov.w	r0, #0
 80a3b18:	4770      	bx	lr
 80a3b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3b1e:	d105      	bne.n	80a3b2c <__aeabi_d2iz+0x48>
 80a3b20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3b24:	bf08      	it	eq
 80a3b26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3b2a:	4770      	bx	lr
 80a3b2c:	f04f 0000 	mov.w	r0, #0
 80a3b30:	4770      	bx	lr
 80a3b32:	bf00      	nop

080a3b34 <__aeabi_d2uiz>:
 80a3b34:	004a      	lsls	r2, r1, #1
 80a3b36:	d211      	bcs.n	80a3b5c <__aeabi_d2uiz+0x28>
 80a3b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3b3c:	d211      	bcs.n	80a3b62 <__aeabi_d2uiz+0x2e>
 80a3b3e:	d50d      	bpl.n	80a3b5c <__aeabi_d2uiz+0x28>
 80a3b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3b48:	d40e      	bmi.n	80a3b68 <__aeabi_d2uiz+0x34>
 80a3b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3b56:	fa23 f002 	lsr.w	r0, r3, r2
 80a3b5a:	4770      	bx	lr
 80a3b5c:	f04f 0000 	mov.w	r0, #0
 80a3b60:	4770      	bx	lr
 80a3b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3b66:	d102      	bne.n	80a3b6e <__aeabi_d2uiz+0x3a>
 80a3b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3b6c:	4770      	bx	lr
 80a3b6e:	f04f 0000 	mov.w	r0, #0
 80a3b72:	4770      	bx	lr

080a3b74 <__aeabi_d2f>:
 80a3b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3b78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3b7c:	bf24      	itt	cs
 80a3b7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a3b82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a3b86:	d90d      	bls.n	80a3ba4 <__aeabi_d2f+0x30>
 80a3b88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3b8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a3b90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a3b94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a3b98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3b9c:	bf08      	it	eq
 80a3b9e:	f020 0001 	biceq.w	r0, r0, #1
 80a3ba2:	4770      	bx	lr
 80a3ba4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a3ba8:	d121      	bne.n	80a3bee <__aeabi_d2f+0x7a>
 80a3baa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a3bae:	bfbc      	itt	lt
 80a3bb0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a3bb4:	4770      	bxlt	lr
 80a3bb6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3bba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a3bbe:	f1c2 0218 	rsb	r2, r2, #24
 80a3bc2:	f1c2 0c20 	rsb	ip, r2, #32
 80a3bc6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a3bca:	fa20 f002 	lsr.w	r0, r0, r2
 80a3bce:	bf18      	it	ne
 80a3bd0:	f040 0001 	orrne.w	r0, r0, #1
 80a3bd4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3bd8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a3bdc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a3be0:	ea40 000c 	orr.w	r0, r0, ip
 80a3be4:	fa23 f302 	lsr.w	r3, r3, r2
 80a3be8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a3bec:	e7cc      	b.n	80a3b88 <__aeabi_d2f+0x14>
 80a3bee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a3bf2:	d107      	bne.n	80a3c04 <__aeabi_d2f+0x90>
 80a3bf4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a3bf8:	bf1e      	ittt	ne
 80a3bfa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a3bfe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a3c02:	4770      	bxne	lr
 80a3c04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a3c08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3c0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3c10:	4770      	bx	lr
 80a3c12:	bf00      	nop

080a3c14 <__aeabi_frsub>:
 80a3c14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3c18:	e002      	b.n	80a3c20 <__addsf3>
 80a3c1a:	bf00      	nop

080a3c1c <__aeabi_fsub>:
 80a3c1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3c20 <__addsf3>:
 80a3c20:	0042      	lsls	r2, r0, #1
 80a3c22:	bf1f      	itttt	ne
 80a3c24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3c28:	ea92 0f03 	teqne	r2, r3
 80a3c2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3c30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3c34:	d06a      	beq.n	80a3d0c <__addsf3+0xec>
 80a3c36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3c3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3c3e:	bfc1      	itttt	gt
 80a3c40:	18d2      	addgt	r2, r2, r3
 80a3c42:	4041      	eorgt	r1, r0
 80a3c44:	4048      	eorgt	r0, r1
 80a3c46:	4041      	eorgt	r1, r0
 80a3c48:	bfb8      	it	lt
 80a3c4a:	425b      	neglt	r3, r3
 80a3c4c:	2b19      	cmp	r3, #25
 80a3c4e:	bf88      	it	hi
 80a3c50:	4770      	bxhi	lr
 80a3c52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3c56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3c5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3c5e:	bf18      	it	ne
 80a3c60:	4240      	negne	r0, r0
 80a3c62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3c66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3c6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3c6e:	bf18      	it	ne
 80a3c70:	4249      	negne	r1, r1
 80a3c72:	ea92 0f03 	teq	r2, r3
 80a3c76:	d03f      	beq.n	80a3cf8 <__addsf3+0xd8>
 80a3c78:	f1a2 0201 	sub.w	r2, r2, #1
 80a3c7c:	fa41 fc03 	asr.w	ip, r1, r3
 80a3c80:	eb10 000c 	adds.w	r0, r0, ip
 80a3c84:	f1c3 0320 	rsb	r3, r3, #32
 80a3c88:	fa01 f103 	lsl.w	r1, r1, r3
 80a3c8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3c90:	d502      	bpl.n	80a3c98 <__addsf3+0x78>
 80a3c92:	4249      	negs	r1, r1
 80a3c94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3c98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3c9c:	d313      	bcc.n	80a3cc6 <__addsf3+0xa6>
 80a3c9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3ca2:	d306      	bcc.n	80a3cb2 <__addsf3+0x92>
 80a3ca4:	0840      	lsrs	r0, r0, #1
 80a3ca6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3caa:	f102 0201 	add.w	r2, r2, #1
 80a3cae:	2afe      	cmp	r2, #254	; 0xfe
 80a3cb0:	d251      	bcs.n	80a3d56 <__addsf3+0x136>
 80a3cb2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a3cb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3cba:	bf08      	it	eq
 80a3cbc:	f020 0001 	biceq.w	r0, r0, #1
 80a3cc0:	ea40 0003 	orr.w	r0, r0, r3
 80a3cc4:	4770      	bx	lr
 80a3cc6:	0049      	lsls	r1, r1, #1
 80a3cc8:	eb40 0000 	adc.w	r0, r0, r0
 80a3ccc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3cd0:	f1a2 0201 	sub.w	r2, r2, #1
 80a3cd4:	d1ed      	bne.n	80a3cb2 <__addsf3+0x92>
 80a3cd6:	fab0 fc80 	clz	ip, r0
 80a3cda:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3cde:	ebb2 020c 	subs.w	r2, r2, ip
 80a3ce2:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3ce6:	bfaa      	itet	ge
 80a3ce8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3cec:	4252      	neglt	r2, r2
 80a3cee:	4318      	orrge	r0, r3
 80a3cf0:	bfbc      	itt	lt
 80a3cf2:	40d0      	lsrlt	r0, r2
 80a3cf4:	4318      	orrlt	r0, r3
 80a3cf6:	4770      	bx	lr
 80a3cf8:	f092 0f00 	teq	r2, #0
 80a3cfc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3d00:	bf06      	itte	eq
 80a3d02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3d06:	3201      	addeq	r2, #1
 80a3d08:	3b01      	subne	r3, #1
 80a3d0a:	e7b5      	b.n	80a3c78 <__addsf3+0x58>
 80a3d0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3d10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3d14:	bf18      	it	ne
 80a3d16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3d1a:	d021      	beq.n	80a3d60 <__addsf3+0x140>
 80a3d1c:	ea92 0f03 	teq	r2, r3
 80a3d20:	d004      	beq.n	80a3d2c <__addsf3+0x10c>
 80a3d22:	f092 0f00 	teq	r2, #0
 80a3d26:	bf08      	it	eq
 80a3d28:	4608      	moveq	r0, r1
 80a3d2a:	4770      	bx	lr
 80a3d2c:	ea90 0f01 	teq	r0, r1
 80a3d30:	bf1c      	itt	ne
 80a3d32:	2000      	movne	r0, #0
 80a3d34:	4770      	bxne	lr
 80a3d36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3d3a:	d104      	bne.n	80a3d46 <__addsf3+0x126>
 80a3d3c:	0040      	lsls	r0, r0, #1
 80a3d3e:	bf28      	it	cs
 80a3d40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3d44:	4770      	bx	lr
 80a3d46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3d4a:	bf3c      	itt	cc
 80a3d4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3d50:	4770      	bxcc	lr
 80a3d52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3d56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3d5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3d5e:	4770      	bx	lr
 80a3d60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3d64:	bf16      	itet	ne
 80a3d66:	4608      	movne	r0, r1
 80a3d68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3d6c:	4601      	movne	r1, r0
 80a3d6e:	0242      	lsls	r2, r0, #9
 80a3d70:	bf06      	itte	eq
 80a3d72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3d76:	ea90 0f01 	teqeq	r0, r1
 80a3d7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3d7e:	4770      	bx	lr

080a3d80 <__aeabi_ui2f>:
 80a3d80:	f04f 0300 	mov.w	r3, #0
 80a3d84:	e004      	b.n	80a3d90 <__aeabi_i2f+0x8>
 80a3d86:	bf00      	nop

080a3d88 <__aeabi_i2f>:
 80a3d88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3d8c:	bf48      	it	mi
 80a3d8e:	4240      	negmi	r0, r0
 80a3d90:	ea5f 0c00 	movs.w	ip, r0
 80a3d94:	bf08      	it	eq
 80a3d96:	4770      	bxeq	lr
 80a3d98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3d9c:	4601      	mov	r1, r0
 80a3d9e:	f04f 0000 	mov.w	r0, #0
 80a3da2:	e01c      	b.n	80a3dde <__aeabi_l2f+0x2a>

080a3da4 <__aeabi_ul2f>:
 80a3da4:	ea50 0201 	orrs.w	r2, r0, r1
 80a3da8:	bf08      	it	eq
 80a3daa:	4770      	bxeq	lr
 80a3dac:	f04f 0300 	mov.w	r3, #0
 80a3db0:	e00a      	b.n	80a3dc8 <__aeabi_l2f+0x14>
 80a3db2:	bf00      	nop

080a3db4 <__aeabi_l2f>:
 80a3db4:	ea50 0201 	orrs.w	r2, r0, r1
 80a3db8:	bf08      	it	eq
 80a3dba:	4770      	bxeq	lr
 80a3dbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3dc0:	d502      	bpl.n	80a3dc8 <__aeabi_l2f+0x14>
 80a3dc2:	4240      	negs	r0, r0
 80a3dc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3dc8:	ea5f 0c01 	movs.w	ip, r1
 80a3dcc:	bf02      	ittt	eq
 80a3dce:	4684      	moveq	ip, r0
 80a3dd0:	4601      	moveq	r1, r0
 80a3dd2:	2000      	moveq	r0, #0
 80a3dd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3dd8:	bf08      	it	eq
 80a3dda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3dde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3de2:	fabc f28c 	clz	r2, ip
 80a3de6:	3a08      	subs	r2, #8
 80a3de8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3dec:	db10      	blt.n	80a3e10 <__aeabi_l2f+0x5c>
 80a3dee:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3df2:	4463      	add	r3, ip
 80a3df4:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3df8:	f1c2 0220 	rsb	r2, r2, #32
 80a3dfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3e00:	fa20 f202 	lsr.w	r2, r0, r2
 80a3e04:	eb43 0002 	adc.w	r0, r3, r2
 80a3e08:	bf08      	it	eq
 80a3e0a:	f020 0001 	biceq.w	r0, r0, #1
 80a3e0e:	4770      	bx	lr
 80a3e10:	f102 0220 	add.w	r2, r2, #32
 80a3e14:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3e18:	f1c2 0220 	rsb	r2, r2, #32
 80a3e1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3e20:	fa21 f202 	lsr.w	r2, r1, r2
 80a3e24:	eb43 0002 	adc.w	r0, r3, r2
 80a3e28:	bf08      	it	eq
 80a3e2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3e2e:	4770      	bx	lr

080a3e30 <__aeabi_uldivmod>:
 80a3e30:	b953      	cbnz	r3, 80a3e48 <__aeabi_uldivmod+0x18>
 80a3e32:	b94a      	cbnz	r2, 80a3e48 <__aeabi_uldivmod+0x18>
 80a3e34:	2900      	cmp	r1, #0
 80a3e36:	bf08      	it	eq
 80a3e38:	2800      	cmpeq	r0, #0
 80a3e3a:	bf1c      	itt	ne
 80a3e3c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80a3e40:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a3e44:	f000 b9a6 	b.w	80a4194 <__aeabi_idiv0>
 80a3e48:	f1ad 0c08 	sub.w	ip, sp, #8
 80a3e4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a3e50:	f000 f82a 	bl	80a3ea8 <__udivmoddi4>
 80a3e54:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a3e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3e5c:	b004      	add	sp, #16
 80a3e5e:	4770      	bx	lr

080a3e60 <__aeabi_d2ulz>:
 80a3e60:	b5d0      	push	{r4, r6, r7, lr}
 80a3e62:	2200      	movs	r2, #0
 80a3e64:	4b0e      	ldr	r3, [pc, #56]	; (80a3ea0 <__aeabi_d2ulz+0x40>)
 80a3e66:	4606      	mov	r6, r0
 80a3e68:	460f      	mov	r7, r1
 80a3e6a:	f7ff fb8b 	bl	80a3584 <__aeabi_dmul>
 80a3e6e:	f7ff fe61 	bl	80a3b34 <__aeabi_d2uiz>
 80a3e72:	4604      	mov	r4, r0
 80a3e74:	f7ff fb10 	bl	80a3498 <__aeabi_ui2d>
 80a3e78:	2200      	movs	r2, #0
 80a3e7a:	4b0a      	ldr	r3, [pc, #40]	; (80a3ea4 <__aeabi_d2ulz+0x44>)
 80a3e7c:	f7ff fb82 	bl	80a3584 <__aeabi_dmul>
 80a3e80:	4602      	mov	r2, r0
 80a3e82:	460b      	mov	r3, r1
 80a3e84:	4630      	mov	r0, r6
 80a3e86:	4639      	mov	r1, r7
 80a3e88:	f7ff f9c8 	bl	80a321c <__aeabi_dsub>
 80a3e8c:	f7ff fe52 	bl	80a3b34 <__aeabi_d2uiz>
 80a3e90:	4623      	mov	r3, r4
 80a3e92:	2200      	movs	r2, #0
 80a3e94:	ea42 0200 	orr.w	r2, r2, r0
 80a3e98:	4610      	mov	r0, r2
 80a3e9a:	4619      	mov	r1, r3
 80a3e9c:	bdd0      	pop	{r4, r6, r7, pc}
 80a3e9e:	bf00      	nop
 80a3ea0:	3df00000 	.word	0x3df00000
 80a3ea4:	41f00000 	.word	0x41f00000

080a3ea8 <__udivmoddi4>:
 80a3ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3eac:	468c      	mov	ip, r1
 80a3eae:	460c      	mov	r4, r1
 80a3eb0:	4605      	mov	r5, r0
 80a3eb2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a3eb4:	2b00      	cmp	r3, #0
 80a3eb6:	d14f      	bne.n	80a3f58 <__udivmoddi4+0xb0>
 80a3eb8:	428a      	cmp	r2, r1
 80a3eba:	4617      	mov	r7, r2
 80a3ebc:	d96b      	bls.n	80a3f96 <__udivmoddi4+0xee>
 80a3ebe:	fab2 fe82 	clz	lr, r2
 80a3ec2:	f1be 0f00 	cmp.w	lr, #0
 80a3ec6:	d00b      	beq.n	80a3ee0 <__udivmoddi4+0x38>
 80a3ec8:	f1ce 0520 	rsb	r5, lr, #32
 80a3ecc:	fa20 f505 	lsr.w	r5, r0, r5
 80a3ed0:	fa01 f30e 	lsl.w	r3, r1, lr
 80a3ed4:	ea45 0c03 	orr.w	ip, r5, r3
 80a3ed8:	fa02 f70e 	lsl.w	r7, r2, lr
 80a3edc:	fa00 f50e 	lsl.w	r5, r0, lr
 80a3ee0:	0c39      	lsrs	r1, r7, #16
 80a3ee2:	fbbc f0f1 	udiv	r0, ip, r1
 80a3ee6:	b2ba      	uxth	r2, r7
 80a3ee8:	fb01 c310 	mls	r3, r1, r0, ip
 80a3eec:	fb00 f802 	mul.w	r8, r0, r2
 80a3ef0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a3ef4:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a3ef8:	45a0      	cmp	r8, r4
 80a3efa:	d909      	bls.n	80a3f10 <__udivmoddi4+0x68>
 80a3efc:	19e4      	adds	r4, r4, r7
 80a3efe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a3f02:	f080 8128 	bcs.w	80a4156 <__udivmoddi4+0x2ae>
 80a3f06:	45a0      	cmp	r8, r4
 80a3f08:	f240 8125 	bls.w	80a4156 <__udivmoddi4+0x2ae>
 80a3f0c:	3802      	subs	r0, #2
 80a3f0e:	443c      	add	r4, r7
 80a3f10:	ebc8 0404 	rsb	r4, r8, r4
 80a3f14:	fbb4 f3f1 	udiv	r3, r4, r1
 80a3f18:	fb01 4c13 	mls	ip, r1, r3, r4
 80a3f1c:	fb03 f202 	mul.w	r2, r3, r2
 80a3f20:	b2ac      	uxth	r4, r5
 80a3f22:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a3f26:	428a      	cmp	r2, r1
 80a3f28:	d909      	bls.n	80a3f3e <__udivmoddi4+0x96>
 80a3f2a:	19c9      	adds	r1, r1, r7
 80a3f2c:	f103 34ff 	add.w	r4, r3, #4294967295	; 0xffffffff
 80a3f30:	f080 810f 	bcs.w	80a4152 <__udivmoddi4+0x2aa>
 80a3f34:	428a      	cmp	r2, r1
 80a3f36:	f240 810c 	bls.w	80a4152 <__udivmoddi4+0x2aa>
 80a3f3a:	3b02      	subs	r3, #2
 80a3f3c:	4439      	add	r1, r7
 80a3f3e:	1a8a      	subs	r2, r1, r2
 80a3f40:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a3f44:	2100      	movs	r1, #0
 80a3f46:	2e00      	cmp	r6, #0
 80a3f48:	d063      	beq.n	80a4012 <__udivmoddi4+0x16a>
 80a3f4a:	fa22 f20e 	lsr.w	r2, r2, lr
 80a3f4e:	2300      	movs	r3, #0
 80a3f50:	e886 000c 	stmia.w	r6, {r2, r3}
 80a3f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3f58:	428b      	cmp	r3, r1
 80a3f5a:	d907      	bls.n	80a3f6c <__udivmoddi4+0xc4>
 80a3f5c:	2e00      	cmp	r6, #0
 80a3f5e:	d056      	beq.n	80a400e <__udivmoddi4+0x166>
 80a3f60:	2100      	movs	r1, #0
 80a3f62:	e886 0011 	stmia.w	r6, {r0, r4}
 80a3f66:	4608      	mov	r0, r1
 80a3f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3f6c:	fab3 f183 	clz	r1, r3
 80a3f70:	2900      	cmp	r1, #0
 80a3f72:	f040 8093 	bne.w	80a409c <__udivmoddi4+0x1f4>
 80a3f76:	42a3      	cmp	r3, r4
 80a3f78:	d302      	bcc.n	80a3f80 <__udivmoddi4+0xd8>
 80a3f7a:	4282      	cmp	r2, r0
 80a3f7c:	f200 80fe 	bhi.w	80a417c <__udivmoddi4+0x2d4>
 80a3f80:	1a85      	subs	r5, r0, r2
 80a3f82:	eb64 0303 	sbc.w	r3, r4, r3
 80a3f86:	469c      	mov	ip, r3
 80a3f88:	2001      	movs	r0, #1
 80a3f8a:	2e00      	cmp	r6, #0
 80a3f8c:	d041      	beq.n	80a4012 <__udivmoddi4+0x16a>
 80a3f8e:	e886 1020 	stmia.w	r6, {r5, ip}
 80a3f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3f96:	b912      	cbnz	r2, 80a3f9e <__udivmoddi4+0xf6>
 80a3f98:	2701      	movs	r7, #1
 80a3f9a:	fbb7 f7f2 	udiv	r7, r7, r2
 80a3f9e:	fab7 fe87 	clz	lr, r7
 80a3fa2:	f1be 0f00 	cmp.w	lr, #0
 80a3fa6:	d136      	bne.n	80a4016 <__udivmoddi4+0x16e>
 80a3fa8:	1be4      	subs	r4, r4, r7
 80a3faa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3fae:	fa1f f987 	uxth.w	r9, r7
 80a3fb2:	2101      	movs	r1, #1
 80a3fb4:	fbb4 f3f8 	udiv	r3, r4, r8
 80a3fb8:	fb08 4413 	mls	r4, r8, r3, r4
 80a3fbc:	fb09 f203 	mul.w	r2, r9, r3
 80a3fc0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a3fc4:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a3fc8:	42a2      	cmp	r2, r4
 80a3fca:	d907      	bls.n	80a3fdc <__udivmoddi4+0x134>
 80a3fcc:	19e4      	adds	r4, r4, r7
 80a3fce:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80a3fd2:	d202      	bcs.n	80a3fda <__udivmoddi4+0x132>
 80a3fd4:	42a2      	cmp	r2, r4
 80a3fd6:	f200 80d3 	bhi.w	80a4180 <__udivmoddi4+0x2d8>
 80a3fda:	4603      	mov	r3, r0
 80a3fdc:	1aa4      	subs	r4, r4, r2
 80a3fde:	fbb4 f0f8 	udiv	r0, r4, r8
 80a3fe2:	fb08 4810 	mls	r8, r8, r0, r4
 80a3fe6:	fb09 f900 	mul.w	r9, r9, r0
 80a3fea:	b2ac      	uxth	r4, r5
 80a3fec:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a3ff0:	4591      	cmp	r9, r2
 80a3ff2:	d907      	bls.n	80a4004 <__udivmoddi4+0x15c>
 80a3ff4:	19d2      	adds	r2, r2, r7
 80a3ff6:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80a3ffa:	d202      	bcs.n	80a4002 <__udivmoddi4+0x15a>
 80a3ffc:	4591      	cmp	r9, r2
 80a3ffe:	f200 80ba 	bhi.w	80a4176 <__udivmoddi4+0x2ce>
 80a4002:	4620      	mov	r0, r4
 80a4004:	ebc9 0202 	rsb	r2, r9, r2
 80a4008:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a400c:	e79b      	b.n	80a3f46 <__udivmoddi4+0x9e>
 80a400e:	4631      	mov	r1, r6
 80a4010:	4630      	mov	r0, r6
 80a4012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4016:	fa07 f70e 	lsl.w	r7, r7, lr
 80a401a:	f1ce 0c20 	rsb	ip, lr, #32
 80a401e:	fa24 f30c 	lsr.w	r3, r4, ip
 80a4022:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a4026:	fbb3 faf8 	udiv	sl, r3, r8
 80a402a:	fa1f f987 	uxth.w	r9, r7
 80a402e:	fb08 351a 	mls	r5, r8, sl, r3
 80a4032:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4036:	fa04 f40e 	lsl.w	r4, r4, lr
 80a403a:	fb0a fb09 	mul.w	fp, sl, r9
 80a403e:	ea4c 0c04 	orr.w	ip, ip, r4
 80a4042:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a4046:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a404a:	459b      	cmp	fp, r3
 80a404c:	fa00 f50e 	lsl.w	r5, r0, lr
 80a4050:	d90a      	bls.n	80a4068 <__udivmoddi4+0x1c0>
 80a4052:	19db      	adds	r3, r3, r7
 80a4054:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a4058:	f080 808b 	bcs.w	80a4172 <__udivmoddi4+0x2ca>
 80a405c:	459b      	cmp	fp, r3
 80a405e:	f240 8088 	bls.w	80a4172 <__udivmoddi4+0x2ca>
 80a4062:	f1aa 0a02 	sub.w	sl, sl, #2
 80a4066:	443b      	add	r3, r7
 80a4068:	ebcb 0303 	rsb	r3, fp, r3
 80a406c:	fbb3 f0f8 	udiv	r0, r3, r8
 80a4070:	fb08 3310 	mls	r3, r8, r0, r3
 80a4074:	fb00 f409 	mul.w	r4, r0, r9
 80a4078:	fa1f fc8c 	uxth.w	ip, ip
 80a407c:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a4080:	429c      	cmp	r4, r3
 80a4082:	d907      	bls.n	80a4094 <__udivmoddi4+0x1ec>
 80a4084:	19db      	adds	r3, r3, r7
 80a4086:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a408a:	d26e      	bcs.n	80a416a <__udivmoddi4+0x2c2>
 80a408c:	429c      	cmp	r4, r3
 80a408e:	d96c      	bls.n	80a416a <__udivmoddi4+0x2c2>
 80a4090:	3802      	subs	r0, #2
 80a4092:	443b      	add	r3, r7
 80a4094:	1b1c      	subs	r4, r3, r4
 80a4096:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a409a:	e78b      	b.n	80a3fb4 <__udivmoddi4+0x10c>
 80a409c:	f1c1 0e20 	rsb	lr, r1, #32
 80a40a0:	408b      	lsls	r3, r1
 80a40a2:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a40a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80a40aa:	fa24 f70e 	lsr.w	r7, r4, lr
 80a40ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a40b2:	fbb7 faf9 	udiv	sl, r7, r9
 80a40b6:	fa1f f38c 	uxth.w	r3, ip
 80a40ba:	fb09 771a 	mls	r7, r9, sl, r7
 80a40be:	fa20 f80e 	lsr.w	r8, r0, lr
 80a40c2:	408c      	lsls	r4, r1
 80a40c4:	fb0a f503 	mul.w	r5, sl, r3
 80a40c8:	ea48 0404 	orr.w	r4, r8, r4
 80a40cc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a40d0:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a40d4:	42bd      	cmp	r5, r7
 80a40d6:	fa02 f201 	lsl.w	r2, r2, r1
 80a40da:	fa00 fb01 	lsl.w	fp, r0, r1
 80a40de:	d909      	bls.n	80a40f4 <__udivmoddi4+0x24c>
 80a40e0:	eb17 070c 	adds.w	r7, r7, ip
 80a40e4:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80a40e8:	d241      	bcs.n	80a416e <__udivmoddi4+0x2c6>
 80a40ea:	42bd      	cmp	r5, r7
 80a40ec:	d93f      	bls.n	80a416e <__udivmoddi4+0x2c6>
 80a40ee:	f1aa 0a02 	sub.w	sl, sl, #2
 80a40f2:	4467      	add	r7, ip
 80a40f4:	1b7f      	subs	r7, r7, r5
 80a40f6:	fbb7 f5f9 	udiv	r5, r7, r9
 80a40fa:	fb09 7715 	mls	r7, r9, r5, r7
 80a40fe:	fb05 f303 	mul.w	r3, r5, r3
 80a4102:	b2a4      	uxth	r4, r4
 80a4104:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a4108:	42bb      	cmp	r3, r7
 80a410a:	d908      	bls.n	80a411e <__udivmoddi4+0x276>
 80a410c:	eb17 070c 	adds.w	r7, r7, ip
 80a4110:	f105 30ff 	add.w	r0, r5, #4294967295	; 0xffffffff
 80a4114:	d227      	bcs.n	80a4166 <__udivmoddi4+0x2be>
 80a4116:	42bb      	cmp	r3, r7
 80a4118:	d925      	bls.n	80a4166 <__udivmoddi4+0x2be>
 80a411a:	3d02      	subs	r5, #2
 80a411c:	4467      	add	r7, ip
 80a411e:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a4122:	fba0 8902 	umull	r8, r9, r0, r2
 80a4126:	1aff      	subs	r7, r7, r3
 80a4128:	454f      	cmp	r7, r9
 80a412a:	4645      	mov	r5, r8
 80a412c:	464c      	mov	r4, r9
 80a412e:	d314      	bcc.n	80a415a <__udivmoddi4+0x2b2>
 80a4130:	d029      	beq.n	80a4186 <__udivmoddi4+0x2de>
 80a4132:	b366      	cbz	r6, 80a418e <__udivmoddi4+0x2e6>
 80a4134:	ebbb 0305 	subs.w	r3, fp, r5
 80a4138:	eb67 0704 	sbc.w	r7, r7, r4
 80a413c:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a4140:	40cb      	lsrs	r3, r1
 80a4142:	40cf      	lsrs	r7, r1
 80a4144:	ea4e 0303 	orr.w	r3, lr, r3
 80a4148:	e886 0088 	stmia.w	r6, {r3, r7}
 80a414c:	2100      	movs	r1, #0
 80a414e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4152:	4623      	mov	r3, r4
 80a4154:	e6f3      	b.n	80a3f3e <__udivmoddi4+0x96>
 80a4156:	4618      	mov	r0, r3
 80a4158:	e6da      	b.n	80a3f10 <__udivmoddi4+0x68>
 80a415a:	ebb8 0502 	subs.w	r5, r8, r2
 80a415e:	eb69 040c 	sbc.w	r4, r9, ip
 80a4162:	3801      	subs	r0, #1
 80a4164:	e7e5      	b.n	80a4132 <__udivmoddi4+0x28a>
 80a4166:	4605      	mov	r5, r0
 80a4168:	e7d9      	b.n	80a411e <__udivmoddi4+0x276>
 80a416a:	4610      	mov	r0, r2
 80a416c:	e792      	b.n	80a4094 <__udivmoddi4+0x1ec>
 80a416e:	4682      	mov	sl, r0
 80a4170:	e7c0      	b.n	80a40f4 <__udivmoddi4+0x24c>
 80a4172:	4692      	mov	sl, r2
 80a4174:	e778      	b.n	80a4068 <__udivmoddi4+0x1c0>
 80a4176:	3802      	subs	r0, #2
 80a4178:	443a      	add	r2, r7
 80a417a:	e743      	b.n	80a4004 <__udivmoddi4+0x15c>
 80a417c:	4608      	mov	r0, r1
 80a417e:	e704      	b.n	80a3f8a <__udivmoddi4+0xe2>
 80a4180:	3b02      	subs	r3, #2
 80a4182:	443c      	add	r4, r7
 80a4184:	e72a      	b.n	80a3fdc <__udivmoddi4+0x134>
 80a4186:	45c3      	cmp	fp, r8
 80a4188:	d3e7      	bcc.n	80a415a <__udivmoddi4+0x2b2>
 80a418a:	463c      	mov	r4, r7
 80a418c:	e7d1      	b.n	80a4132 <__udivmoddi4+0x28a>
 80a418e:	4631      	mov	r1, r6
 80a4190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a4194 <__aeabi_idiv0>:
 80a4194:	4770      	bx	lr
 80a4196:	bf00      	nop

080a4198 <atoi>:
 80a4198:	220a      	movs	r2, #10
 80a419a:	2100      	movs	r1, #0
 80a419c:	f000 b914 	b.w	80a43c8 <strtol>

080a41a0 <atol>:
 80a41a0:	220a      	movs	r2, #10
 80a41a2:	2100      	movs	r1, #0
 80a41a4:	f000 b910 	b.w	80a43c8 <strtol>

080a41a8 <__cxa_atexit>:
 80a41a8:	b510      	push	{r4, lr}
 80a41aa:	4c05      	ldr	r4, [pc, #20]	; (80a41c0 <__cxa_atexit+0x18>)
 80a41ac:	4613      	mov	r3, r2
 80a41ae:	b12c      	cbz	r4, 80a41bc <__cxa_atexit+0x14>
 80a41b0:	460a      	mov	r2, r1
 80a41b2:	4601      	mov	r1, r0
 80a41b4:	2002      	movs	r0, #2
 80a41b6:	f3af 8000 	nop.w
 80a41ba:	bd10      	pop	{r4, pc}
 80a41bc:	4620      	mov	r0, r4
 80a41be:	bd10      	pop	{r4, pc}
 80a41c0:	00000000 	.word	0x00000000

080a41c4 <memcpy>:
 80a41c4:	b510      	push	{r4, lr}
 80a41c6:	1e43      	subs	r3, r0, #1
 80a41c8:	440a      	add	r2, r1
 80a41ca:	4291      	cmp	r1, r2
 80a41cc:	d004      	beq.n	80a41d8 <memcpy+0x14>
 80a41ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a41d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a41d6:	e7f8      	b.n	80a41ca <memcpy+0x6>
 80a41d8:	bd10      	pop	{r4, pc}

080a41da <memset>:
 80a41da:	4603      	mov	r3, r0
 80a41dc:	4402      	add	r2, r0
 80a41de:	4293      	cmp	r3, r2
 80a41e0:	d002      	beq.n	80a41e8 <memset+0xe>
 80a41e2:	f803 1b01 	strb.w	r1, [r3], #1
 80a41e6:	e7fa      	b.n	80a41de <memset+0x4>
 80a41e8:	4770      	bx	lr
	...

080a41ec <srand>:
 80a41ec:	b538      	push	{r3, r4, r5, lr}
 80a41ee:	4b12      	ldr	r3, [pc, #72]	; (80a4238 <srand+0x4c>)
 80a41f0:	4605      	mov	r5, r0
 80a41f2:	681c      	ldr	r4, [r3, #0]
 80a41f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a41f6:	b9d3      	cbnz	r3, 80a422e <srand+0x42>
 80a41f8:	2018      	movs	r0, #24
 80a41fa:	f7fd fa97 	bl	80a172c <malloc>
 80a41fe:	f243 330e 	movw	r3, #13070	; 0x330e
 80a4202:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4204:	8003      	strh	r3, [r0, #0]
 80a4206:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a420a:	8043      	strh	r3, [r0, #2]
 80a420c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4210:	8083      	strh	r3, [r0, #4]
 80a4212:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a4216:	80c3      	strh	r3, [r0, #6]
 80a4218:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a421c:	8103      	strh	r3, [r0, #8]
 80a421e:	2305      	movs	r3, #5
 80a4220:	8143      	strh	r3, [r0, #10]
 80a4222:	230b      	movs	r3, #11
 80a4224:	8183      	strh	r3, [r0, #12]
 80a4226:	2201      	movs	r2, #1
 80a4228:	2300      	movs	r3, #0
 80a422a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a422e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4230:	2200      	movs	r2, #0
 80a4232:	611d      	str	r5, [r3, #16]
 80a4234:	615a      	str	r2, [r3, #20]
 80a4236:	bd38      	pop	{r3, r4, r5, pc}
 80a4238:	2000038c 	.word	0x2000038c

080a423c <strcmp>:
 80a423c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a4240:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a4244:	2a01      	cmp	r2, #1
 80a4246:	bf28      	it	cs
 80a4248:	429a      	cmpcs	r2, r3
 80a424a:	d0f7      	beq.n	80a423c <strcmp>
 80a424c:	1ad0      	subs	r0, r2, r3
 80a424e:	4770      	bx	lr

080a4250 <strdup>:
 80a4250:	4b02      	ldr	r3, [pc, #8]	; (80a425c <strdup+0xc>)
 80a4252:	4601      	mov	r1, r0
 80a4254:	6818      	ldr	r0, [r3, #0]
 80a4256:	f000 b803 	b.w	80a4260 <_strdup_r>
 80a425a:	bf00      	nop
 80a425c:	2000038c 	.word	0x2000038c

080a4260 <_strdup_r>:
 80a4260:	b570      	push	{r4, r5, r6, lr}
 80a4262:	4606      	mov	r6, r0
 80a4264:	4608      	mov	r0, r1
 80a4266:	460c      	mov	r4, r1
 80a4268:	f000 f80d 	bl	80a4286 <strlen>
 80a426c:	1c45      	adds	r5, r0, #1
 80a426e:	4629      	mov	r1, r5
 80a4270:	4630      	mov	r0, r6
 80a4272:	f7fd fa83 	bl	80a177c <_malloc_r>
 80a4276:	4606      	mov	r6, r0
 80a4278:	b118      	cbz	r0, 80a4282 <_strdup_r+0x22>
 80a427a:	462a      	mov	r2, r5
 80a427c:	4621      	mov	r1, r4
 80a427e:	f7ff ffa1 	bl	80a41c4 <memcpy>
 80a4282:	4630      	mov	r0, r6
 80a4284:	bd70      	pop	{r4, r5, r6, pc}

080a4286 <strlen>:
 80a4286:	4603      	mov	r3, r0
 80a4288:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a428c:	2a00      	cmp	r2, #0
 80a428e:	d1fb      	bne.n	80a4288 <strlen+0x2>
 80a4290:	1a18      	subs	r0, r3, r0
 80a4292:	3801      	subs	r0, #1
 80a4294:	4770      	bx	lr

080a4296 <strncpy>:
 80a4296:	4603      	mov	r3, r0
 80a4298:	b510      	push	{r4, lr}
 80a429a:	b142      	cbz	r2, 80a42ae <strncpy+0x18>
 80a429c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a42a0:	3a01      	subs	r2, #1
 80a42a2:	f803 4b01 	strb.w	r4, [r3], #1
 80a42a6:	2c00      	cmp	r4, #0
 80a42a8:	d1f7      	bne.n	80a429a <strncpy+0x4>
 80a42aa:	441a      	add	r2, r3
 80a42ac:	e000      	b.n	80a42b0 <strncpy+0x1a>
 80a42ae:	bd10      	pop	{r4, pc}
 80a42b0:	4293      	cmp	r3, r2
 80a42b2:	d002      	beq.n	80a42ba <strncpy+0x24>
 80a42b4:	f803 4b01 	strb.w	r4, [r3], #1
 80a42b8:	e7fa      	b.n	80a42b0 <strncpy+0x1a>
 80a42ba:	bd10      	pop	{r4, pc}

080a42bc <_strtol_r>:
 80a42bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a42c0:	460f      	mov	r7, r1
 80a42c2:	4680      	mov	r8, r0
 80a42c4:	483f      	ldr	r0, [pc, #252]	; (80a43c4 <_strtol_r+0x108>)
 80a42c6:	f8d0 9000 	ldr.w	r9, [r0]
 80a42ca:	463d      	mov	r5, r7
 80a42cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a42d0:	eb09 0004 	add.w	r0, r9, r4
 80a42d4:	7840      	ldrb	r0, [r0, #1]
 80a42d6:	f000 0008 	and.w	r0, r0, #8
 80a42da:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a42de:	b108      	cbz	r0, 80a42e4 <_strtol_r+0x28>
 80a42e0:	462f      	mov	r7, r5
 80a42e2:	e7f2      	b.n	80a42ca <_strtol_r+0xe>
 80a42e4:	2c2d      	cmp	r4, #45	; 0x2d
 80a42e6:	d103      	bne.n	80a42f0 <_strtol_r+0x34>
 80a42e8:	1cbd      	adds	r5, r7, #2
 80a42ea:	787c      	ldrb	r4, [r7, #1]
 80a42ec:	2601      	movs	r6, #1
 80a42ee:	e003      	b.n	80a42f8 <_strtol_r+0x3c>
 80a42f0:	2c2b      	cmp	r4, #43	; 0x2b
 80a42f2:	bf04      	itt	eq
 80a42f4:	787c      	ldrbeq	r4, [r7, #1]
 80a42f6:	1cbd      	addeq	r5, r7, #2
 80a42f8:	b113      	cbz	r3, 80a4300 <_strtol_r+0x44>
 80a42fa:	2b10      	cmp	r3, #16
 80a42fc:	d10a      	bne.n	80a4314 <_strtol_r+0x58>
 80a42fe:	e05b      	b.n	80a43b8 <_strtol_r+0xfc>
 80a4300:	2c30      	cmp	r4, #48	; 0x30
 80a4302:	d157      	bne.n	80a43b4 <_strtol_r+0xf8>
 80a4304:	7828      	ldrb	r0, [r5, #0]
 80a4306:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a430a:	2858      	cmp	r0, #88	; 0x58
 80a430c:	d14d      	bne.n	80a43aa <_strtol_r+0xee>
 80a430e:	786c      	ldrb	r4, [r5, #1]
 80a4310:	2310      	movs	r3, #16
 80a4312:	3502      	adds	r5, #2
 80a4314:	2e00      	cmp	r6, #0
 80a4316:	bf14      	ite	ne
 80a4318:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a431c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a4320:	fbbc faf3 	udiv	sl, ip, r3
 80a4324:	2700      	movs	r7, #0
 80a4326:	4638      	mov	r0, r7
 80a4328:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a432c:	eb09 0e04 	add.w	lr, r9, r4
 80a4330:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a4334:	f01e 0f04 	tst.w	lr, #4
 80a4338:	d001      	beq.n	80a433e <_strtol_r+0x82>
 80a433a:	3c30      	subs	r4, #48	; 0x30
 80a433c:	e00b      	b.n	80a4356 <_strtol_r+0x9a>
 80a433e:	f01e 0e03 	ands.w	lr, lr, #3
 80a4342:	d01b      	beq.n	80a437c <_strtol_r+0xc0>
 80a4344:	f1be 0f01 	cmp.w	lr, #1
 80a4348:	bf0c      	ite	eq
 80a434a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a434e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a4352:	ebce 0404 	rsb	r4, lr, r4
 80a4356:	42a3      	cmp	r3, r4
 80a4358:	dd10      	ble.n	80a437c <_strtol_r+0xc0>
 80a435a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a435e:	d00a      	beq.n	80a4376 <_strtol_r+0xba>
 80a4360:	4550      	cmp	r0, sl
 80a4362:	d806      	bhi.n	80a4372 <_strtol_r+0xb6>
 80a4364:	d101      	bne.n	80a436a <_strtol_r+0xae>
 80a4366:	4564      	cmp	r4, ip
 80a4368:	dc03      	bgt.n	80a4372 <_strtol_r+0xb6>
 80a436a:	fb03 4000 	mla	r0, r3, r0, r4
 80a436e:	2701      	movs	r7, #1
 80a4370:	e001      	b.n	80a4376 <_strtol_r+0xba>
 80a4372:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a4376:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a437a:	e7d7      	b.n	80a432c <_strtol_r+0x70>
 80a437c:	1c7b      	adds	r3, r7, #1
 80a437e:	d10c      	bne.n	80a439a <_strtol_r+0xde>
 80a4380:	2e00      	cmp	r6, #0
 80a4382:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a4386:	bf14      	ite	ne
 80a4388:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a438c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4390:	f8c8 3000 	str.w	r3, [r8]
 80a4394:	b92a      	cbnz	r2, 80a43a2 <_strtol_r+0xe6>
 80a4396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a439a:	b106      	cbz	r6, 80a439e <_strtol_r+0xe2>
 80a439c:	4240      	negs	r0, r0
 80a439e:	b172      	cbz	r2, 80a43be <_strtol_r+0x102>
 80a43a0:	b107      	cbz	r7, 80a43a4 <_strtol_r+0xe8>
 80a43a2:	1e69      	subs	r1, r5, #1
 80a43a4:	6011      	str	r1, [r2, #0]
 80a43a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a43aa:	2430      	movs	r4, #48	; 0x30
 80a43ac:	2b00      	cmp	r3, #0
 80a43ae:	d1b1      	bne.n	80a4314 <_strtol_r+0x58>
 80a43b0:	2308      	movs	r3, #8
 80a43b2:	e7af      	b.n	80a4314 <_strtol_r+0x58>
 80a43b4:	230a      	movs	r3, #10
 80a43b6:	e7ad      	b.n	80a4314 <_strtol_r+0x58>
 80a43b8:	2c30      	cmp	r4, #48	; 0x30
 80a43ba:	d0a3      	beq.n	80a4304 <_strtol_r+0x48>
 80a43bc:	e7aa      	b.n	80a4314 <_strtol_r+0x58>
 80a43be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a43c2:	bf00      	nop
 80a43c4:	20000328 	.word	0x20000328

080a43c8 <strtol>:
 80a43c8:	4613      	mov	r3, r2
 80a43ca:	460a      	mov	r2, r1
 80a43cc:	4601      	mov	r1, r0
 80a43ce:	4802      	ldr	r0, [pc, #8]	; (80a43d8 <strtol+0x10>)
 80a43d0:	6800      	ldr	r0, [r0, #0]
 80a43d2:	f7ff bf73 	b.w	80a42bc <_strtol_r>
 80a43d6:	bf00      	nop
 80a43d8:	2000038c 	.word	0x2000038c

080a43dc <dynalib_user>:
 80a43dc:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a43ec:	00000000                                ....

080a43f0 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
 80a43f0:	6b6e6c62 00666e69 00726576 2e352e30     blnkinf.ver.0.5.
 80a4400:	2d680034 74616562 00303100 66667562     4.h-beat.10.buff
 80a4410:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
 80a4420:	6c636974 68502065 6e6f746f 69756200     ticle Photon.bui
 80a4430:	4d00646c 32207961 30322036 31203931     ld.May 26 2019 1
 80a4440:	36333a35 0031323a 69250000 696c2500     5:36:21...%i.%li
 80a4450:	006e6900 0074756f 006d7770 61007764     .in.out.pwm.dw.a
 80a4460:	6c620077 2d6b6e79 756f6c63 6f632e64     w.blynk-cloud.co
 80a4470:	7776006d 2e322500 4f006633 7473004b     m.vw.%2.3f.OK.st
 80a4480:	73757461 72724500 0d0a726f 65684309     atus.Error...Che
 80a4490:	75736b63 7265206d 00726f72 6f727245     cksum error.Erro
 80a44a0:	090d0a72 20525349 656d6974 74756f20     r...ISR time out
 80a44b0:	72726520 4500726f 726f7272 52090d0a      error.Error...R
 80a44c0:	6f707365 2065736e 656d6974 74756f20     esponse time out
 80a44d0:	72726520 4500726f 726f7272 44090d0a      error.Error...D
 80a44e0:	20617461 656d6974 74756f20 72726520     ata time out err
 80a44f0:	4500726f 726f7272 41090d0a 69757163     or.Error...Acqui
 80a4500:	676e6972 72724500 0d0a726f 6c654409     ring.Error...Del
 80a4510:	74206174 20656d69 206f6f74 6c616d73     ta time too smal
 80a4520:	7245006c 0a726f72 6f4e090d 74732074     l.Error...Not st
 80a4530:	65747261 6e550064 776f6e6b 7265206e     arted.Unknown er
 80a4540:	00726f72 706d6554 74617265 20657275     ror.Temperature 
 80a4550:	29436f28 7400203a 65706d65 75746172     (oC): .temperatu
 80a4560:	48006572 64696d75 20797469 3a292528     re.Humidity (%):
 80a4570:	75680020 6964696d 00007974               .humidity..

080a457c <_ZL23BlynkWriteHandlerVector>:
 80a457c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a458c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a459c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a45ac:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a45bc:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a45cc:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a45dc:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a45ec:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a45fc:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a460c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a461c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a462c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a463c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a464c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a465c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a466c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a467c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a468c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a469c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a46ac:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a46bc:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a46cc:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a46dc:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a46ec:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a46fc:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a470c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a471c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a472c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a473c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a474c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a475c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...
 80a476c:	080a117b 080a117b 080a117b 080a117b     {...{...{...{...

080a477c <_ZL22BlynkReadHandlerVector>:
 80a477c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a478c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a479c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a47ac:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a47bc:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a47cc:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a47dc:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a47ec:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a47fc:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a480c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a481c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a482c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a483c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a484c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a485c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a486c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a487c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a488c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a489c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a48ac:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a48bc:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a48cc:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a48dc:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a48ec:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a48fc:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a490c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a491c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a492c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a493c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a494c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a495c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...
 80a496c:	080a1179 080a1179 080a1179 080a1179     y...y...y...y...

080a497c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4984:	080a17b9 080a17bf 080a17e7 080a17cb     ................
 80a4994:	080a17bb                                ....

080a4998 <_ZTV7TwoWire>:
	...
 80a49a0:	080a1cfd 080a1d47 080a1d1f 080a1cff     ....G...........
 80a49b0:	080a1d27 080a1d2f 080a1d37 080a1d3f     '.../...7...?...

080a49c0 <_ZTV9IPAddress>:
	...
 80a49c8:	080a1e83 080a1e75 080a1e77 66006e6c     ....u...w...ln.f
 80a49d8:	6f63006e 64006564 69617465 0a0d006c     n.code.detail...
 80a49e8:	31302500 00207530 2500205d 202c0064     .%010u .] .%d., 
 80a49f8:	3a292800 5b200020 646f6300 203d2065     .(): . [.code = 
 80a4a08:	74656400 736c6961 00203d20 64756162     .details = .baud
 80a4a18:	72655300 006c6169 53425355 61697265     .Serial.USBSeria
 80a4a28:	7400316c 00657079 61726170 6d63006d     l1.type.param.cm
 80a4a38:	64690064 646e6800 72747300 6966006d     d.id.hnd.strm.fi
 80a4a48:	6c00746c 61006c76 61486464 656c646e     lt.lvl.addHandle
 80a4a58:	65720072 65766f6d 646e6148 0072656c     r.removeHandler.
 80a4a68:	6d756e65 646e6148 7372656c 4f534a00     enumHandlers.JSO
 80a4a78:	7274534e 4c6d6165 6148676f 656c646e     NStreamLogHandle
 80a4a88:	70610072 6f6e0070 7400656e 65636172     r.app.none.trace
 80a4a98:	666e6900 6177006f 70006e72 63696e61     .info.warn.panic
 80a4aa8:	6e616e00 66766f00 69002e00 0000666e     .nan.ovf...inf..

080a4ab8 <_ZTV8SPIClass>:
	...
 80a4ac0:	080a21d9 080a21db                       .!...!..

080a4ac8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a4ad0:	080a2495 080a249b 080a25bb 080a24a7     .$...$...%...$..
 80a4ae0:	080a2497                                .$..

080a4ae4 <_ZTV9TCPClient>:
	...
 80a4aec:	080a25d9 080a25f9 080a2451 080a246b     .%...%..Q$..k$..
 80a4afc:	080a266d 080a2587 080a2559 080a2493     m&...%..Y%...$..
 80a4b0c:	080a27a1 080a24ad 080a260b 080a26e9     .'...$...&...&..
 80a4b1c:	080a28f1 080a2943 080a247b 080a28b5     .(..C)..{$...(..
 80a4b2c:	080a2539 69726977 5400676e 6c435043     9%..wiring.TCPCl
 80a4b3c:	746e6569 636f7320 3d74656b 5a007825     ient socket=%x.Z
 80a4b4c:	302b2500 253a6433 00753230 252d5925     .%+03d:%02u.%Y-%
 80a4b5c:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 80a4b6c:	74637361 00656d69                       asctime.

080a4b74 <_ZTV11USARTSerial>:
	...
 80a4b7c:	080a2965 080a2989 080a2995 080a1f15     e)...)...)......
 80a4b8c:	080a2971 080a297d 080a2977 080a2983     q)..})..w)...)..
 80a4b9c:	080a2967 080a296b                       g)..k)..

080a4ba4 <_ZTV9USBSerial>:
	...
 80a4bac:	080a2a3d 080a2a81 080a2a5b 080a1f15     =*...*..[*......
 80a4bbc:	080a2a55 080a2a3f 080a2a47 080a2a7b     U*..?*..G*..{*..
 80a4bcc:	080a2a4f 080a2a39                       O*..9*..

080a4bd4 <_ZTVN5spark9WiFiClassE>:
	...
 80a4bdc:	080a2baf                                .+..

080a4be0 <_ZN5spark7NetworkE>:
 80a4be0:	20000b70                                p.. 

080a4be4 <_ctype_>:
 80a4be4:	20202000 20202020 28282020 20282828     .         ((((( 
 80a4bf4:	20202020 20202020 20202020 20202020                     
 80a4c04:	10108820 10101010 10101010 10101010      ...............
 80a4c14:	04040410 04040404 10040404 10101010     ................
 80a4c24:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a4c34:	01010101 01010101 01010101 10101010     ................
 80a4c44:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4c54:	02020202 02020202 02020202 10101010     ................
 80a4c64:	00000020 00000000 00000000 00000000      ...............
	...

080a4ce8 <__sf_fake_stdin>:
	...

080a4d08 <__sf_fake_stdout>:
	...

080a4d28 <__sf_fake_stderr>:
	...
 80a4d48:	00000043                                         C.

080a4d4a <link_const_variable_data_end>:
	...

080a4d4c <link_constructors_location>:
 80a4d4c:	080a0cc5 	.word	0x080a0cc5
 80a4d50:	080a1169 	.word	0x080a1169
 80a4d54:	080a1175 	.word	0x080a1175
 80a4d58:	080a11a9 	.word	0x080a11a9
 80a4d5c:	080a133b 	.word	0x080a133b
 80a4d60:	080a1f05 	.word	0x080a1f05
 80a4d64:	080a21bd 	.word	0x080a21bd
 80a4d68:	080a2411 	.word	0x080a2411
 80a4d6c:	080a2951 	.word	0x080a2951
 80a4d70:	080a2bb9 	.word	0x080a2bb9
 80a4d74:	080a2f01 	.word	0x080a2f01
 80a4d78:	080a2f31 	.word	0x080a2f31
 80a4d7c:	080a2f85 	.word	0x080a2f85
 80a4d80:	080a3049 	.word	0x080a3049
 80a4d84:	080a30cd 	.word	0x080a30cd
 80a4d88:	080a3151 	.word	0x080a3151

080a4d8c <link_constructors_end>:
 80a4d8c:	00000000 	.word	0x00000000
